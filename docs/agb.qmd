---
title: "AGB estimation"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
```

```{r include=FALSE}
library(tidyverse)
library(here)
library(targets)
library(knitr)
library(scales)
library(patchwork)
library(cowplot)
```

# Parameter extraction

```{r}
options(width=150)
tallo_wd <- tar_read(tallo_wd) |>
  filter(!is.na(wd)) |>
  mutate(log_dbh = log(dbh),
         log_h = log(h),
         log_cr = log(cr),
         log_wd = log(wd)) |>
  filter(!is.na(log_dbh), !is.na(log_cr), !is.na(log_h), !is.na(log_wd)) |>
  select(-division,-family, -genus, - latitude, - longitude, -reference_id, -height_outlier, -crown_radius_outlier, -mean_wd, -unit, -wd_s) |>
  group_by(sp) |>
  filter(n() >= 20) |>
  ungroup()

tallo_wd
summary(tallo_wd)

sp_posterior_df <- tar_read(sp_posterior_df)
head(sp_posterior_df)

# H models 2a, 2b
h_wb_df <- sp_posterior_df |>
  filter(Dependent_variable == "Tree Height") |>
  dplyr::select(sp, a, b, k)

head(h_wb_df)

h_pl_df <- sp_posterior_df |>
  filter(Dependent_variable == "Tree Height", is.na(k)) |>
   dplyr::select(sp, a, b)

head(h_pl_df)

# DBH models 3a, 3b, 3c
dbh_df <- sp_posterior_df |>
  filter(Dependent_variable == "DBH") |>
  dplyr::select(sp, a, b, c)

head(dbh_df)

dbh2_df <- sp_posterior_df |>
  filter(Dependent_variable == "DBH2") |>
  dplyr::select(sp, a, b, c)

head(dbh2_df)

dbh3_df <- sp_posterior_df |>
  filter(Dependent_variable == "DBH3") |>
  dplyr::select(sp, a, b, c)

head(dbh3_df)
```

# Compute AGB for various scenarios

```{r}
h_wb_df <- h_wb_df |> distinct(sp, .keep_all = TRUE)
h_pl_df <- h_pl_df |> distinct(sp, .keep_all = TRUE)
dbh_df <- dbh_df |> distinct(sp, .keep_all = TRUE)
dbh2_df <- dbh2_df |> distinct(sp, .keep_all = TRUE)
dbh3_df <- dbh3_df |> distinct(sp, .keep_all = TRUE)


agb_df <- tallo_wd |>
  left_join(h_wb_df |> rename(a_h_wb = a, b_h_wb = b, k_h_wb = k), by = "sp") |>    # Joining h_df with renamed columns
  left_join(h_pl_df |> rename(a_h_pl = a, b_h_pl = b), by = "sp") |>    # Joining h_pl_df with renamed columns
  left_join(dbh_df |> rename(a_dbh = a, b_dbh = b, c_dbh = c), by = "sp") |>  # Joining dbh_df with renamed columns
  left_join(dbh2_df |> rename(a_dbh2 = a, b_dbh2 = b), by = "sp") |> # Joining dbh2_df with renamed columns
  left_join(dbh3_df |> rename(a_dbh3 = a, b_dbh3 = b), by = "sp")


agb_df <- agb_df |>
  mutate(
    a_h_wb = as.numeric(gsub(" .*", "", a_h_wb)),
    b_h_wb = as.numeric(gsub(" .*", "", b_h_wb)),
    k_h_wb = as.numeric(gsub(" .*", "", k_h_wb)),

    a_h_pl = as.numeric(gsub(" .*", "", a_h_pl)),
    b_h_pl = as.numeric(gsub(" .*", "", b_h_pl)),

    a_dbh = as.numeric(gsub(" .*", "", a_dbh)),
    b_dbh = as.numeric(gsub(" .*", "", b_dbh)),
    c_dbh = as.numeric(gsub(" .*", "", c_dbh)),

    a_dbh2 = as.numeric(gsub(" .*", "", a_dbh2)),
    b_dbh2 = as.numeric(gsub(" .*", "", b_dbh2)),

    a_dbh3 = as.numeric(gsub(" .*", "", a_dbh3)),
    b_dbh3 = as.numeric(gsub(" .*", "", b_dbh3))
  )

agb_df
```


```{r}
calculate_agb <- function(agb_df) {
  agb_df |>
    mutate(
      # Baseline biomass calculation
      log_AGB_bl = log(0.0559) + log_wd + 2 * log_dbh + log_h,
      
      # Weibull-based height estimation and biomass calculation
      height_wb = as.numeric(a_h_wb) * (1 - exp(-as.numeric(b_h_wb) * dbh^as.numeric(k_h_wb))),
      log_AGB_wb_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_wb),
      
      # Power-law based height estimation and biomass calculation
      height_pl = as.numeric(a_h_pl) * dbh^as.numeric(b_h_pl),
      log_AGB_pl_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_pl),
      
      # Power-law DBH estimation using CR and H, and biomass calculation
      dbh_pl = as.numeric(a_dbh) * (cr^as.numeric(b_dbh)) * (h^as.numeric(c_dbh)),
      log_AGB_pl_dbh = log(0.0559) + log_wd + 2 * log(dbh_pl) + log_h,
      
      # Power-law DBH estimation using CR only, and biomass calculation
      dbh_pl2 = as.numeric(a_dbh2) * (cr^as.numeric(b_dbh2)),
      log_AGB_pl_dbh2 = log(0.0559) + log_wd + 2 * log(dbh_pl2) + log_h,
      
      # Power-law DBH estimation using H only, and biomass calculation
      dbh_pl3 = as.numeric(a_dbh3) * (h^as.numeric(b_dbh3)),
      log_AGB_pl_dbh3 = log(0.0559) + log_wd + 2 * log(dbh_pl3) + log_h
    ) |>
    dplyr::select(
      tree_id, sp, log_dbh, log_h, log_wd, 
      log_AGB_bl, log_AGB_wb_h, log_AGB_pl_h, 
      log_AGB_pl_dbh, log_AGB_pl_dbh2, log_AGB_pl_dbh3
    )
}

# Apply the function to your dataset
agb_df <- calculate_agb(agb_df)
agb_df

```

# Box plot

```{r}
agb_long <- agb_df |>
  tidyr::pivot_longer(cols = starts_with("log_AGB"), names_to = "Scenario", values_to = "AGB")

ggplot(agb_long, aes(x = Scenario, y = AGB)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  labs(x = "Senarios",
       y = "log predicted AGB (kg)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

# Performance metrics

```{r}
metrics_df <- agb_df |>
  summarize(
    # Weibull Height Model 2a
    mae_wb_h = mean(abs(log_AGB_bl - log_AGB_wb_h), na.rm = TRUE),
    rmse_wb_h = sqrt(mean((log_AGB_bl - log_AGB_wb_h)^2, na.rm = TRUE)),
    r2_wb_h = 1 - (sum((log_AGB_bl - log_AGB_wb_h)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)),
    bias_wb_h = mean(log_AGB_wb_h - log_AGB_bl, na.rm = TRUE),

    # Power-Law Height Model 2b
    mae_pl_h = mean(abs(log_AGB_bl - log_AGB_pl_h), na.rm = TRUE),
    rmse_pl_h = sqrt(mean((log_AGB_bl - log_AGB_pl_h)^2, na.rm = TRUE)),
    r2_pl_h = 1 - (sum((log_AGB_bl - log_AGB_pl_h)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)),
    bias_pl_h = mean(log_AGB_pl_h - log_AGB_bl, na.rm = TRUE),

    # Power-Law Scenario 3a
    mae_pl_dbh = mean(abs(log_AGB_bl - log_AGB_pl_dbh), na.rm = TRUE),
    rmse_pl_dbh = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh)^2, na.rm = TRUE)),
    r2_pl_dbh = 1 - (sum((log_AGB_bl - log_AGB_pl_dbh)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)),
    bias_pl_dbh = mean(log_AGB_pl_dbh - log_AGB_bl, na.rm = TRUE),

    # Power-Law Scenario 3b
    mae_pl_dbh2 = mean(abs(log_AGB_bl - log_AGB_pl_dbh2), na.rm = TRUE),
    rmse_pl_dbh2 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh2)^2, na.rm = TRUE)),
    r2_pl_dbh2 = 1 - (sum((log_AGB_bl - log_AGB_pl_dbh2)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)),
    bias_pl_dbh2 = mean(log_AGB_pl_dbh2 - log_AGB_bl, na.rm = TRUE),

    # Power-Law Scenario 3c
    mae_pl_dbh3 = mean(abs(log_AGB_bl - log_AGB_pl_dbh3), na.rm = TRUE),
    rmse_pl_dbh3 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh3)^2, na.rm = TRUE)),
    r2_pl_dbh3 = 1 - (sum((log_AGB_bl - log_AGB_pl_dbh3)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)),
    bias_pl_dbh3 = mean(log_AGB_pl_dbh3 - log_AGB_bl, na.rm = TRUE),

    # CR*H
    mae_cr_h = mean(abs(log_AGB_bl - log_AGB_obs_CR_H), na.rm = TRUE),
    rmse_cr_h = sqrt(mean((log_AGB_bl - log_AGB_obs_CR_H)^2, na.rm = TRUE)),
    r2_pl_cr_h = 1 - (sum((log_AGB_bl - log_AGB_obs_CR_H)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)),
    bias_cr_h = mean(log_AGB_obs_CR_H - log_AGB_bl, na.rm = TRUE),
  )

metrics_df

metrics_long <- metrics_df |>
  pivot_longer(cols = everything(), names_to = "Metric_Model", values_to = "Value") |>
  separate(Metric_Model, into = c("Metric", "Model"), sep = "_", extra = "merge") |>
  filter(Metric != "bias")  # Exclude the bias metric

ggplot(metrics_long, aes(x = Model, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(x = "Senarios",
       y = "Metric Value") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2")
```

# Predicted vs. baseline AGB plots

```{r}
model_colors <- c("h_wb" = "#d55e00",    # Magenta/pinkish color
                  "h_pl" = "#0072b2",    # Blue
                  "dbh_pl" = "#e69f00",  # Orange
                  "dbh2_pl" = "#009e73", # Green
                  "dbh3_pl" = "#56b4e9", # Cyan/Light blue
                  "cr_h" = "#56b8e9") 
                  
# Refactor the pred_bl function to include all models
pred_bl <- function(data, baseline, predicted, rmse, bias, model_name) {
  ggplot(data, aes(x = exp(baseline), y = exp(predicted))) +
    geom_point(alpha = 0.3, color = "grey") +
    geom_smooth(method = "lm", se = FALSE, color = model_colors[model_name], linetype = "solid") +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
    scale_x_log10(labels = scales::comma) +
    scale_y_log10(labels = scales::comma) +
    labs(x = "Baseline AGB (kg)", y = paste("Predicted biomass (kg) -", model_name)) +
    annotate("text", x = 1, y = 1e5, label = paste("RMSE =", format(round(rmse, 2), nsmall = 2), "Mg"), hjust = 0) +
    annotate("text", x = 1, y = 5e4, label = paste("Bias =", format(round(bias * 100, 2), nsmall = 2), "%"), hjust = 0) +
    theme_minimal()
}

p1 <- pred_bl(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_wb_h, 
              mean(metrics_df$rmse_wb_h), mean(metrics_df$bias_wb_h), "h_wb")

p2 <- pred_bl(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_h, 
              mean(metrics_df$rmse_pl_h), mean(metrics_df$bias_pl_h), "h_pl")

p3 <- pred_bl(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh, 
              mean(metrics_df$rmse_pl_dbh), mean(metrics_df$bias_pl_dbh), "dbh_pl")

p4 <- pred_bl(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh2, 
              mean(metrics_df$rmse_pl_dbh2), mean(metrics_df$bias_pl_dbh2), "dbh2_pl")

p5 <- pred_bl(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh3, 
              mean(metrics_df$rmse_pl_dbh3), mean(metrics_df$bias_pl_dbh3), "dbh3_pl")

p6 <- pred_bl(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_obs_CR_H, 
              mean(metrics_df$rmse_cr_h), mean(metrics_df$bias_cr_h), "cr_h")



```

```{r}
# agb_df <- agb_df |>
#   mutate(
#     abs_error_wb_h = abs(exp(log_AGB_wb_h) - exp(log_AGB_bl)),
#     abs_error_pl_h = abs(exp(log_AGB_pl_h) - exp(log_AGB_bl)),
#     abs_error_pl_dbh = abs(exp(log_AGB_pl_dbh) - exp(log_AGB_bl)),
#     abs_error_pl_dbh2 = abs(exp(log_AGB_pl_dbh2) - exp(log_AGB_bl)),
#     abs_error_pl_dbh3 = abs(exp(log_AGB_pl_dbh3) - exp(log_AGB_bl))
#   )

# errors_long <- agb_df |>
#   select(tree_id, abs_error_wb_h, abs_error_pl_h, abs_error_pl_dbh, abs_error_pl_dbh2, abs_error_pl_dbh3) |>
#   pivot_longer(cols = starts_with("abs_error"), names_to = "Model", values_to = "Abs_Error") |>
#   mutate(Model = case_when(
#     Model == "abs_error_wb_h" ~ "h_wb",
#     Model == "abs_error_pl_h" ~ "h_pl",
#     Model == "abs_error_pl_dbh" ~ "dbh_pl",
#     Model == "abs_error_pl_dbh2" ~ "dbh2_pl",
#     Model == "abs_error_pl_dbh3" ~ "dbh3_pl"
#   ))


# p6 <- ggplot(errors_long, aes(x = Abs_Error, color = Model)) +
#   geom_density(fill = NA) + 
#   scale_x_log10(labels = scales::comma) + 
#   scale_y_continuous(position = "right") + 
#   scale_color_manual(values = model_colors) + 
#   labs(x = "Error (kg)", y = "Density") +
#   theme_minimal() +
#   theme(legend.position = "none", plot.margin = margin(5.5, 100, 5.5, 5.5)) 

# p6 <- ggdraw(p6) +
#   draw_line(x = c(0.88, 0.9), y = c(0.85, 0.85), color = "#d55e00", size = 1) +  # h_wb line
#   draw_text("h_wb", x = 0.91, y = 0.85, hjust = 0, size = 12) +  # h_wb label
#   draw_line(x = c(0.88, 0.9), y = c(0.8, 0.8), color = "#0072b2", size = 1) +   # h_pl line
#   draw_text("h_pl", x = 0.91, y = 0.8, hjust = 0, size = 12) +  # h_pl label
#   draw_line(x = c(0.88, 0.9), y = c(0.75, 0.75), color = "#e69f00", size = 1) +  # dbh_pl line
#   draw_text("dbh_pl", x = 0.91, y = 0.75, hjust = 0, size = 12) +  # dbh_pl label
#   draw_line(x = c(0.88, 0.9), y = c(0.7, 0.7), color = "#009e73", size = 1) +   # dbh2_pl line
#   draw_text("dbh2_pl", x = 0.91, y = 0.7, hjust = 0, size = 12) +  # dbh2_pl label
#   draw_line(x = c(0.88, 0.9), y = c(0.65, 0.65), color = "#56b4e9", size = 1) +  # dbh3_pl line
#   draw_text("dbh3_pl", x = 0.91, y = 0.65, hjust = 0, size = 12)  # dbh3_pl label

```


```{r}
p1
p2
p3
p4
p5
p6
```

# Combine in 1 plot

```{r}
# p <- (
#   p1 + labs(tag = "(a)", x = NULL, y = "Predicted AGB_h_wb (kg)") + 
#     theme(
#       axis.title = element_text(size = 14, margin = margin(t = 10, r = 10, b = 10, l = 10)),  # Adjust title margin
#       axis.text = element_text(size = 12),   # Adjust axis text size
#       plot.tag = element_text(face = "bold", size = 14)  # Bold and resize plot tag
#     ) |
  
#   p2 + labs(tag = "(b)", x = NULL, y = "Predicted AGB_h_pl (kg)") + 
#     theme(
#       axis.title = element_text(size = 14, margin = margin(t = 10, r = 10, b = 10, l = 10)),
#       axis.text = element_text(size = 12),
#       plot.tag = element_text(face = "bold", size = 14)
#     ) |
  
#   p3 + labs(tag = "(c)", x = NULL, y = "Predicted AGB_dbh_pl (kg)") + 
#     theme(
#       axis.title = element_text(size = 16, margin = margin(t = 10, r = 10, b = 10, l = 10)),
#       axis.text = element_text(size = 12),
#       plot.tag = element_text(face = "bold", size = 14)
#     ) |
  
#   p4 + labs(tag = "(d)", x = "AGB_obs (kg)", y = "Predicted AGB_dbh2_pl (kg)") + 
#     theme(
#       axis.title.x = element_text(size = 14, margin = margin(t = 10, r = 10, b = 20, l = 10)),  # Increased bottom margin for distance
#       axis.text = element_text(size = 12),
#       plot.tag = element_text(face = "bold", size = 14)
#     ) |
  
#   p5 + labs(tag = "(e)", x = "AGB_obs (kg)", y = "Predicted AGB_dbh3_pl (kg)") + 
#     theme(
#       axis.title.x = element_text(size = 16, margin = margin(t = 10, r = 10, b = 20, l = 10)),  # Increased bottom margin for distance
#       axis.text = element_text(size = 12),
#       plot.tag = element_text(face = "bold", size = 14)
#     ) |
  
#   p6 + labs(tag = "(f)", x = "Error (kg)", y = "Density") + 
#     theme(
#       axis.title = element_text(size = 14, margin = margin(t = 10, r = 10, b = 10, l = 10)),
#       axis.text = element_text(size = 12),
#       plot.tag = element_text(face = "bold", size = 14)
#     )
# ) + 
#   plot_layout(ncol = 2, nrow = 3) + 
#   plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)"))) & 
#   theme(
#     plot.tag = element_text(face = "bold", size = 14),  # Set tag text to bold and larger
#     axis.title = element_text(size = 14),  # Set axis title text size
#     axis.text = element_text(size = 12),   # Set axis label text size
#     plot.margin = margin(5, 10, 5, 5)       # Set plot margins
#   )

# ggsave(
#   filename = "agb2.png",  # Specify the filename and format
#   plot = p,                             # Pass the combined plot object
#   width = 13,                           # Set the width of the plot in inches
#   height = 16,                          # Set the height of the plot in inches
#   dpi = 300                             # Set the resolution (300 for high quality)
# )
```




```{r}
p <- (
  p1 + labs(tag = "(a)", x = NULL, y = "Predicted AGB_h_wb (kg)") + 
    theme(
      axis.title = element_text(size = 14, margin = margin(t = 10, r = 10, b = 10, l = 10)),  # Adjust title margin
      axis.text = element_text(size = 12),   # Adjust axis text size
      plot.tag = element_text(face = "bold", size = 14)  # Bold and resize plot tag
    ) |
  
  p2 + labs(tag = "(b)", x = NULL, y = "Predicted AGB_h_pl (kg)") + 
    theme(
      axis.title = element_text(size = 14, margin = margin(t = 10, r = 10, b = 10, l = 10)),
      axis.text = element_text(size = 12),
      plot.tag = element_text(face = "bold", size = 14)
    ) |
  
  p3 + labs(tag = "(c)", x = NULL, y = "Predicted AGB_dbh_pl (kg)") + 
    theme(
      axis.title = element_text(size = 16, margin = margin(t = 10, r = 10, b = 10, l = 10)),
      axis.text = element_text(size = 12),
      plot.tag = element_text(face = "bold", size = 14)
    ) |
  
  p4 + labs(tag = "(d)", x = "AGB_obs (kg)", y = "Predicted AGB_dbh2_pl (kg)") + 
    theme(
      axis.title.x = element_text(size = 14, margin = margin(t = 10, r = 10, b = 20, l = 10)),  # Increased bottom margin for distance
      axis.text = element_text(size = 12),
      plot.tag = element_text(face = "bold", size = 14)
    ) |
  
  p5 + labs(tag = "(e)", x = "AGB_obs (kg)", y = "Predicted AGB_dbh3_pl (kg)") + 
    theme(
      axis.title.x = element_text(size = 16, margin = margin(t = 10, r = 10, b = 20, l = 10)),  # Increased bottom margin for distance
      axis.text = element_text(size = 12),
      plot.tag = element_text(face = "bold", size = 14)
    )
) + 
  plot_layout(ncol = 2, nrow = 3) + 
  plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)"))) & 
  theme(
    plot.tag = element_text(face = "bold", size = 14),  # Set tag text to bold and larger
    axis.title = element_text(size = 14),  # Set axis title text size
    axis.text = element_text(size = 12),   # Set axis label text size
    plot.margin = margin(5, 10, 5, 5)       # Increased right margin to 50
  )

ggsave(
  filename = "agb2.png",  # Specify the filename and format
  plot = p,                             # Pass the combined plot object
  width = 13,                           # Set the width of the plot in inches
  height = 16,                          # Set the height of the plot in inches
  dpi = 300                             # Set the resolution (300 for high quality)
)
```

```{r}
options(width = 140)

calculate_agb <- function(agb_df) {
  agb_df |>
    mutate(
      # Existing biomass calculations:
      # Baseline biomass calculation
      log_AGB_bl = log(0.0559) + log_wd + 2 * log_dbh + log_h,
      
      # Weibull-based height estimation and biomass calculation
      height_wb = as.numeric(a_h_wb) * (1 - exp(-as.numeric(b_h_wb) * dbh^as.numeric(k_h_wb))),
      log_AGB_wb_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_wb),
      
      # Power-law based height estimation and biomass calculation
      height_pl = as.numeric(a_h_pl) * dbh^as.numeric(b_h_pl),
      log_AGB_pl_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_pl),
      
      # Power-law DBH estimation using CR and H, and biomass calculation
      dbh_pl = as.numeric(a_dbh) * (cr^as.numeric(b_dbh)) * (h^as.numeric(c_dbh)),
      log_AGB_pl_dbh = log(0.0559) + log_wd + 2 * log(dbh_pl) + log_h,
      
      # Power-law DBH estimation using CR only, and biomass calculation
      dbh_pl2 = as.numeric(a_dbh2) * (cr^as.numeric(b_dbh2)),
      log_AGB_pl_dbh2 = log(0.0559) + log_wd + 2 * log(dbh_pl2) + log_h,
      
      # Power-law DBH estimation using H only, and biomass calculation
      dbh_pl3 = as.numeric(a_dbh3) * (h^as.numeric(b_dbh3)),
      log_AGB_pl_dbh3 = log(0.0559) + log_wd + 2 * log(dbh_pl3) + log_h,
      
      # New biomass calculation using observed CR and H
      log_AGB_obs_CR_H = log(0.0559) + log_wd + 2 * log((2*cr) * h) + log(h)
    ) |>
    dplyr::select(
      tree_id, sp, log_dbh, log_h, log_wd, 
      log_AGB_bl, log_AGB_wb_h, log_AGB_pl_h, 
      log_AGB_pl_dbh, log_AGB_pl_dbh2, log_AGB_pl_dbh3,
      log_AGB_obs_CR_H # Include the new AGB calculation
    )
}

agb_df
```




```{r}
fit_lr_nou_summary_pl_ang_h <- tar_read(fit_lr_nou_summary_pl_ang_h)
fit_lr_nou_summary_pl_ang_h

fit_lr_nou_summary_pl_gym_h <- tar_read(fit_lr_nou_summary_pl_gym_h)
fit_lr_nou_summary_pl_gym_h

```