---
title: "Wood density vs. parameters"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/workspaces/tree-allometry")
```

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```


```{r, include=FALSE}
# Load necessary libraries
library(targets)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(patchwork)
```


```{r}
# 1. Load wood density data (assuming this is the original data)
tallo_wd_df_200 <- tar_read(tallo_wd_df_200)
# 2. Filter and clean wood density data
data2 <- tallo_wd_df_200 |>
  filter(!is.na(dbh)) |>     # Filter out NAs in dbh
  filter(!is.na(cr)) |>      # Filter out NAs in crown radius
  filter(!is.na(h)) |>       # Filter out NAs in height
  filter(!is.na(wd_s))       # Filter out NAs in scaled wood density

data2

# 3. Group by species and calculate the mean wood density
wd_df <- data2 |>
  group_by(sp) |>
  summarize(wd = mean(wd)) |>  # Calculate mean wood density per species
  mutate(wd_s = scale(wd) |> as.numeric(),  # Scale wood density
         sp_id = 1:n())                     # Assign species ID

# 4. Load Stan model data for height (H-DBH) and fit results
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
wb1_h <- tar_read(fit_nlr_draws_weibull1_h)

# 5. Load Stan model data for crown radius (CR-DBH) and fit results
stan_data_nlr_cr <- tar_read(stan_data_nlr_cr)
wb1_cr <- tar_read(fit_nlr_draws_weibull1_cr)

# 6. Prepare sequences for wood density values for model fitting
wd_seq <- seq(min(wd_df$wd_s), max(wd_df$wd_s), length.out = 100)
wd_seq_df <- data.frame(
  wd_s = wd_seq,
  wd = approx(wd_df$wd_s, wd_df$wd, xout = wd_seq)$y
)
```


```{r}
prepare_and_plot_parameter <- function(stan_data, fit_draws, wd_df, param_name, color_point, color_ribbon, line_color, line_type = "solid", show_ribbon = TRUE) {
  
  # Step 1: Prepare wood density data, ensuring all columns exist
  wd_df <- wd_df |>
    filter(!is.na(wd_s)) |> 
    group_by(sp) |>
    summarize(wd = mean(wd, na.rm = TRUE)) |>
    mutate(wd_s = scale(wd) |> as.numeric(), sp_id = 1:n())
  
  # Step 2: Extract gamma and beta parameters from fit_draws
  gamma_params <- fit_draws |>
    select(starts_with("gamma"))

  # Step 3: Reshape the beta parameters for analysis
  beta_params <- fit_draws |>
    select(starts_with("beta[")) |>
    pivot_longer(
      cols = everything(),
      names_to = c("species", "parameter"),
      names_pattern = "beta\\[(\\d+),(\\d+)\\]",
      names_transform = list(species = as.integer, parameter = as.integer),
      values_to = "value"
    ) |>
    mutate(parameter = case_when(
      parameter == 1 ~ "log_a",
      parameter == 2 ~ "b",
      parameter == 3 ~ "k"
    ))

  # Step 4: Join wood density data with beta parameters
  plot_data <- beta_params |>
    left_join(wd_df, by = c("species" = "sp_id"))
  
  # Step 5: Summarize the posterior distributions for plotting
  summary_stats <- plot_data |>
    group_by(species, parameter, wd, wd_s) |>
    summarize(
      median = median(value, na.rm = TRUE),
      lower = quantile(value, 0.025, na.rm = TRUE),
      upper = quantile(value, 0.975, na.rm = TRUE),
      .groups = "drop"
    )

  # Step 6: Create a sequence for wd_s and merge with corresponding wd values
  wd_seq <- seq(min(wd_df$wd_s), max(wd_df$wd_s), length.out = 100)
  wd_seq_df <- data.frame(
    wd_s = wd_seq,
    wd = approx(wd_df$wd_s, wd_df$wd, xout = wd_seq)$y
  )

  # Step 7: Extract relevant gamma parameters for the chosen model
  gamma_param <- gamma_params |>
    select(paste0("gamma[1,", which(c("log_a", "b", "k") == param_name), "]"), 
           paste0("gamma[2,", which(c("log_a", "b", "k") == param_name), "]"))

  # Step 8: Generate lines and fit data for the selected parameter
  if (param_name == "log_a") {
    transform_value <- function(x) exp(exp(x))
  } else {
    transform_value <- function(x) exp(x)
  }
  
  lines_data <- do.call(rbind, lapply(1:nrow(gamma_param), function(i) {
    data.frame(
      wd_s = wd_seq_df$wd_s,
      wd = wd_seq_df$wd,
      value = transform_value(gamma_param[[1]][i] + gamma_param[[2]][i] * wd_seq_df$wd_s),
      draw = i
    )
  }))
  
  # Step 9: Compute the fit line and 95% credible intervals
  median_intercept <- median(gamma_param[[1]], na.rm = TRUE)
  median_slope <- median(gamma_param[[2]], na.rm = TRUE)

  fit_line <- data.frame(
    wd_s = wd_seq_df$wd_s,
    wd = wd_seq_df$wd,
    value = transform_value(median_intercept + median_slope * wd_seq_df$wd_s)
  )
  
  ci_ribbon <- lines_data |>
    group_by(wd) |>
    summarize(
      lower = quantile(value, 0.025, na.rm = TRUE),
      upper = quantile(value, 0.975, na.rm = TRUE),
      .groups = "drop"
    )

  fit_with_ci <- left_join(fit_line, ci_ribbon, by = "wd")

  # Apply transformation for log_a in summary_stats
  if (param_name == "log_a") {
    summary_stats <- summary_stats |>
      mutate(median = exp(median), lower = exp(lower), upper = exp(upper))
  }
  
  # Step 10: Set y-axis label based on parameter
  y_label <- case_when(
    param_name == "log_a" ~ "Amplitude parameter, a",
    param_name == "b" ~ "Scale parameter, b",
    param_name == "k" ~ "Shape parameter, k"
  )

  # Step 11: Create plot
  plot <- ggplot() +
    geom_errorbar(data = summary_stats |> filter(parameter == param_name), 
                  aes(x = wd, ymin = lower, ymax = upper), 
                  width = 0, linewidth = 0.2, color = color_ribbon) +
    geom_point(data = summary_stats |> filter(parameter == param_name), 
               aes(x = wd, y = median), color = color_point, size = 0.5) +
    geom_line(data = fit_line, aes(x = wd, y = value), 
              color = line_color, linewidth = 1, linetype = line_type) +
    theme_minimal() +
    labs(
      x = "Wood Density (g cm⁻³)",
      y = y_label
    ) +
    theme(
      plot.title = element_text(hjust = 0.5),
      axis.title.x = element_text(size = 12),
      axis.title.y = element_text(size = 12)
    )

  # Step 12: Conditionally add ribbon if `show_ribbon` is TRUE
  if (show_ribbon) {
    plot <- plot +
      geom_ribbon(data = fit_with_ci, aes(x = wd, ymin = lower, ymax = upper), 
                  alpha = 0.5, fill = color_ribbon)
  }
  
  return(plot)
}
```


```{r}
p1 <- prepare_and_plot_parameter(
  stan_data_nlr_h, wb1_h, wd_df, 
  param_name = "log_a",
  color_point = "#9e9ac8", 
  color_ribbon = "#cbc9e2", 
  line_color = "#6a51a3", 
  show_ribbon = TRUE
)

p2 <- prepare_and_plot_parameter(
  stan_data_nlr_h, wb1_h, wd_df, 
  param_name = "b",
  color_point = "#74c476", 
  color_ribbon = "#bae4b3", 
  line_color = "#238b45", 
  show_ribbon = TRUE
)

p3 <- prepare_and_plot_parameter(
  stan_data_nlr_h, wb1_h, wd_df, 
  param_name = "k",
  color_point = "#6baed6", 
  color_ribbon = "#8fcbee", 
  line_color = "#2171b5", 
  line_type = "dashed", 
  show_ribbon = FALSE
)

p4 <- prepare_and_plot_parameter(
  stan_data_nlr_cr, wb1_cr, wd_df, 
  param_name = "log_a",
  color_point = "#9e9ac8", 
  color_ribbon = "#cbc9e2", 
  line_color = "#6a51a3", 
  show_ribbon = FALSE
)

p5 <- prepare_and_plot_parameter(
  stan_data_nlr_cr, wb1_cr, wd_df, 
  param_name = "b",
  color_point = "#74c476", 
  color_ribbon = "#bae4b3", 
  line_color = "#238b45", 
  show_ribbon = FALSE
)

p6 <- prepare_and_plot_parameter(
  stan_data_nlr_cr, wb1_cr, wd_df, 
  param_name = "k",
  color_point = "#6baed6", 
  color_ribbon = "#8fcbee", 
  line_color = "#2171b5", 
  line_type = "dashed", 
  show_ribbon = FALSE
)
```

```{r}
p <- (p1 + labs(tag = "(a)", x = NULL) + theme(axis.text.x = element_blank()) |
                p4 + labs(tag = "(b)", x = NULL) + theme(axis.title.y = element_blank(), axis.text.x = element_blank()) |
                p2 + labs(tag = "(c)", x = NULL) + theme(axis.text.x = element_blank()) |
                p6 + labs(tag = "(d)", x = NULL) + theme(axis.title.y = element_blank(), axis.text.x = element_blank()) |
                p3 + labs(tag = "(e)", x = expression("Wood Density (g cm"^"-3"~")")) |
                p6 + labs(tag = "(f)", x = expression("Wood Density (g cm"^"-3"~")")) + theme(axis.title.y = element_blank())) +
    plot_layout(ncol = 2, nrow = 3) +
    plot_annotation(
      tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)"))
    ) &
    theme(
      plot.tag = element_text(face = "bold", size = 10),
      axis.title = element_text(size = 10),
      axis.text = element_text(size = 9),
      plot.margin = margin(10, 10, 10, 10)
    )

p <- ggdraw() +
  draw_plot(p, x = 0, y = 0, width = 1, height = 0.9) +  # Add the original plot
  draw_label("WD vs. H-DBH", x = 0.25, y = 0.91, fontface = 'bold', size = 10) +  # Title for the left column
  draw_label("WD vs. CR-DBH", x = 0.75, y = 0.91, fontface = 'bold', size = 10)   # Title for the right column
p
```
