---
title: "Weibull-based allometric models for Tree Height and Crown Radius with DBH at community and species level"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/workspaces/tree-allometry")
```

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```


```{r include=FALSE}
library(targets)
library(dplyr)
library(ggplot2)
library(stringr)
library(reshape2)
library(scales)
library(patchwork)
```

# Read in data

```{r}
# Load H data
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
str(stan_data_nlr_h)

# Load CR data
stan_data_nlr_cr <- tar_read(stan_data_nlr_cr)
str(stan_data_nlr_cr)

```

# Ranging DBH 

```{r}
dbh_data <- data.frame(sp = as.factor(stan_data_nlr_h$jj), DBH = stan_data_nlr_h$x)

# Calculate the range of DBH for each species
dbh_range <- dbh_data |>
  group_by(sp) |>
  summarize(min_dbh = min(DBH), max_dbh = max(DBH))

```

# Extract parameters

## H parameters

```{r}
# Function to extract beta parameters and compute fitted values using species-specific DBH range
extract_and_compute_fitted_h <- function(data, summary, dbh_range) {
  log_y <- data$log_y
  x <- data$x
  sp <- as.factor(data$jj)
  
  # Extract beta parameters
  beta <- summary |> filter(grepl("beta\\[", variable))
  
  log_a <- beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q50)
  b <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q50)
  k <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q50)
  
  # Create DBH sequence for each species based on actual range
  create_dbh_sequence <- function(species, dbh_range, length_out = 100) {
    min_dbh <- dbh_range$min_dbh[dbh_range$sp == species]
    max_dbh <- dbh_range$max_dbh[dbh_range$sp == species]
    seq(min_dbh, max_dbh, length.out = length_out)
  }
  
  # Calculate fitted H values for each species using species-specific DBH range
  fitted_h_list <- lapply(unique(sp), function(s) {
    dbh_seq <- create_dbh_sequence(s, dbh_range)
    i <- which(unique(sp) == s)  # Get the index of the species
    fitted_log_y <- log_a[i] + log(1 - exp(-b[i] * (dbh_seq ^ k[i])))
    fitted_h <- exp(fitted_log_y)
    
    data.frame(
      DBH = dbh_seq,
      value = fitted_h,
      variable = paste0("fitted_H_sp_", i)
    )
  })
  
  # Combine all species data frames into one
  data_long_h <- do.call(rbind, fitted_h_list)
  
  # Extract community-level parameters
  gamma <- summary |> filter(grepl("gamma", variable))
  
  community_log_a_hat <- gamma |> filter(variable == "gamma[1,1]") |> pull(q50)
  community_b_hat <- gamma |> filter(variable == "gamma[1,2]") |> pull(q50)
  community_k_hat <- gamma |> filter(variable == "gamma[1,3]") |> pull(q50)
  
  community_log_a <- exp(community_log_a_hat)
  community_b <- exp(community_b_hat)
  community_k <- exp(community_k_hat)
  
  community_fitted_log_y_h <- community_log_a + log(1 - exp(-community_b * (x ^ community_k)))
  community_fitted_H <- exp(community_fitted_log_y_h)
  
  list(fitted_h = fitted_h_list, community_fitted_H = community_fitted_H, log_y = log_y, x = x, sp = sp, data_long_h = data_long_h)
}

# Apply function to H data
h_params <- extract_and_compute_fitted_h(stan_data_nlr_h, tar_read(fit_nlr_summary_weibull1_h), dbh_range)

# Check the extracted and computed values
str(h_params)
```

# CR paramter

```{r}
# Function to extract beta parameters and compute fitted values using species-specific DBH range
extract_and_compute_fitted_cr <- function(data, summary, dbh_range) {
  log_y <- data$log_y
  x <- data$x
  sp <- as.factor(data$jj)
  
  # Extract beta parameters
  beta <- summary |> filter(grepl("beta\\[", variable))
  
  log_a <- beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q50)
  b <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q50)
  k <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q50)
  
  # Create DBH sequence for each species based on actual range
  create_dbh_sequence <- function(species, dbh_range, length_out = 100) {
    min_dbh <- dbh_range$min_dbh[dbh_range$sp == species]
    max_dbh <- dbh_range$max_dbh[dbh_range$sp == species]
    seq(min_dbh, max_dbh, length.out = length_out)
  }
  
  # Calculate fitted CR values for each species using species-specific DBH range
  fitted_cr_list <- lapply(unique(sp), function(s) {
    dbh_seq <- create_dbh_sequence(s, dbh_range)
    i <- which(unique(sp) == s)  # Get the index of the species
    fitted_log_y <- log_a[i] + log(1 - exp(-b[i] * (dbh_seq ^ k[i])))
    fitted_cr <- exp(fitted_log_y)
    
    data.frame(
      DBH = dbh_seq,
      value = fitted_cr,
      variable = paste0("fitted_CR_sp_", i)
    )
  })
  
  # Combine all species data frames into one
  data_long_cr <- do.call(rbind, fitted_cr_list)
  
  # Extract community-level parameters
  gamma <- summary |> filter(grepl("gamma", variable))
  
  community_log_a_hat <- gamma |> filter(variable == "gamma[1,1]") |> pull(q50)
  community_b_hat <- gamma |> filter(variable == "gamma[1,2]") |> pull(q50)
  community_k_hat <- gamma |> filter(variable == "gamma[1,3]") |> pull(q50)
  
  community_log_a <- exp(community_log_a_hat)
  community_b <- exp(community_b_hat)
  community_k <- exp(community_k_hat)
  
  community_fitted_log_y_cr <- community_log_a + log(1 - exp(-community_b * (x ^ community_k)))
  community_fitted_CR <- exp(community_fitted_log_y_cr)
  
  list(fitted_cr = fitted_cr_list, community_fitted_CR = community_fitted_CR, log_y = log_y, x = x, sp = sp, data_long_cr = data_long_cr)
}

# Apply function to CR data
cr_params <- extract_and_compute_fitted_cr(stan_data_nlr_cr, tar_read(fit_nlr_summary_weibull1_cr), dbh_range)

# Check the extracted and computed values
str(cr_params)
```

# Plot data

```{r}
# Data frame for plotting H
data_h <- data.frame(H = exp(h_params$log_y), DBH = h_params$x, sp = h_params$sp)
data_h$community_fitted_H <- h_params$community_fitted_H

# Check the data for plotting
head(h_params$data_long_h)

# Data frame for plotting CR
data_cr <- data.frame(CR = exp(cr_params$log_y), DBH = cr_params$x, sp = cr_params$sp)
data_cr$community_fitted_CR <- cr_params$community_fitted_CR

# Check the data for plotting
head(cr_params$data_long_cr)
```

# Plot
```{r}
# Plot H
p1 <- ggplot(data_h, aes(x = DBH, y = H)) +
  geom_line(data = h_params$data_long_h, aes(x = DBH, y = value, group = variable), color = "#72b6e3", alpha = 0.3, linewidth = 0.15) +
  geom_line(aes(y = community_fitted_H), color = "#0f92e9", linewidth = 0.6) +
  labs(x = "DBH (cm)", y = "Tree Height (m)") +
  scale_x_log10(labels = scales::label_number()) +
  scale_y_log10(labels = scales::label_number()) +
  theme_minimal()


# Plot CR
p2 <- ggplot(data_cr, aes(x = DBH, y = CR)) +
  geom_line(data = cr_params$data_long_cr, aes(x = DBH, y = value, group = variable), color = "#72b6e3", alpha = 0.3, linewidth = 0.15) +
  geom_line(aes(y = community_fitted_CR), color = "#0f92e9", linewidth = 0.6) +
  labs(x = "DBH (cm)", y = "Crown Radius (m)") +
  scale_x_log10(labels = scales::label_number()) +
  scale_y_log10(labels = scales::label_number()) +
  theme_minimal()

# Combine and save plots
p1 <- p1 +
  theme(
    axis.title.x = element_blank(),   # Remove the x-axis title
    axis.text.x = element_blank()     # Remove the x-axis text labels
  )

combined_plot <- p1 / p2 + 
  plot_layout(ncol = 1) &  
  theme(
    plot.margin = unit(c(10, 10, 10, 10), "pt"),  
    text = element_text(size = 9),               
    legend.title = element_text(size = 10)       
  )

ggsave(
  filename = "p.png",
  plot = combined_plot,
  width = 110,    
  height = 180,
  units = "mm",  
  dpi = 600     
)
```




```{r}


```