---
title: "Comparing CR models"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/workspaces/tree-allometry")

library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

```{r, include=FALSE}
library(targets)
library(tidyverse)
library(scales)
library(MASS)
```

# Read in data

```{r}
# Read in the data (pl)
stan_data_lr_cr <- tar_read(stan_data_lr_cr)
str(stan_data_lr_cr)

# Read in the data (gMM, wb)
stan_data_nlr_cr <- tar_read(stan_data_nlr_cr)
str(stan_data_nlr_cr)

# Extract relevant data from stan_data_nlr_cr (log_y, x, jj)
x_nlr <- stan_data_nlr_cr$x

# Read in the model summaries for generalized Michaelis-Menten (gMM), Weibull (wb), and power-law (pl)
gmm_summary <- tar_read(fit_nlr_summary_gmm1_cr)
wb_summary <- tar_read(fit_nlr_summary_weibull1_cr)
pl_summary <- tar_read(fit_lr2_summary_power_law1_cr)

gmm_summary
wb_summary
pl_summary
```


# Extract community-level parameters of each function

## Power-law

### Extract scaling parameters

```{r}
tallo_wd_df_200 <- tar_read(tallo_wd_df_200)
tallo_wd_df_200

data2 <- tallo_wd_df_200 |>
    filter(!is.na(dbh)) |>
    filter(!is.na(cr)) |>
    filter(!is.na(cr)) |>
    filter(!is.na(wd_s))

data2 <- data2 |>
    mutate(log_dbh = log(dbh),
           log_cr = log(cr),
           log_cr = log(cr)) |>
    mutate(log_dbh_s = scale(log_dbh) |> as.numeric(),
           log_cr_s = scale(log_cr) |> as.numeric(),
           log_cr_s = scale(log_cr) |> as.numeric()) |>
    mutate(dbh_s = scale(dbh) |> as.numeric())


data2

# Extract scaling parameters for unscaling
log_dbh_sd <- sd(data2$log_dbh)
log_dbh_mean <- mean(data2$log_dbh)

log_cr_sd <- sd(data2$log_cr)
log_cr_mean <- mean(data2$log_cr)
```

### Computing Fitted Values

```{r}
pl_summary
gamma_pl <- pl_summary |> filter(grepl("gamma", variable))
gamma_pl

community_log_a_pl <- gamma_pl |> filter(variable == "gamma[1,1]") |> pull(q50)
community_b_pl <- gamma_pl |> filter(variable == "gamma[2,1]") |> pull(q50)
community_log_a_pl
community_b_pl


## Computing Fitted Values
scaled_x_range <- stan_data_lr_cr$log_x[, 2] |> range()
log_x_seq <- seq(scaled_x_range[1], scaled_x_range[2], length.out = 100)
log_xx <- (log_x_seq * log_dbh_sd) + log_dbh_mean

# use scaled values to predict scaled values
log_y_pred_scaled <- community_log_a_pl + community_b_pl * log_x_seq
# unscaled
log_y_pred <- log_y_pred_scaled * log_cr_sd + log_cr_mean
community_fitted_cr_pl <- exp(log_y_pred)

df_pl <- tibble(y = community_fitted_cr_pl, x = exp(log_xx))
head(df_pl)
```

## gMM
```{r}
gmm_summary
gamma_gmm <- gmm_summary |> filter(grepl("gamma", variable))
gamma_gmm
community_log_a_hat_gmm <- gamma_gmm |> filter(variable == "gamma[1,1]") |> pull(q50)
community_b_hat_gmm <- gamma_gmm |> filter(variable == "gamma[1,2]") |> pull(q50)
community_k_hat_gmm <- gamma_gmm |> filter(variable == "gamma[1,3]") |> pull(q50)

community_log_a_gmm <- exp(community_log_a_hat_gmm)
community_b_gmm <- exp(community_b_hat_gmm) 
community_k_gmm <- exp(community_k_hat_gmm)

community_log_a_gmm
community_b_gmm
community_k_gmm

## Computing Fitted Values
x_nlr_range <- range(x_nlr)
x_nlr_seq <- seq(x_nlr_range[1], x_nlr_range[2], length.out = 100)

# Compute the fitted values using the sequence of x-values
community_fitted_log_y_cr_gmm_seq <- community_log_a_gmm + community_b_gmm * log(x_nlr_seq) - log(community_k_gmm + x_nlr_seq^community_b_gmm)
community_fitted_cr_gmm_seq <- exp(community_fitted_log_y_cr_gmm_seq)


df_gmm <- tibble(y = community_fitted_cr_gmm_seq, x = x_nlr_seq)
head(df_gmm)
```

## Weibull
```{r}
wb_summary
gamma_wb <- wb_summary |> filter(grepl("gamma", variable))
gamma_wb
community_log_a_hat_wb <- gamma_wb |> filter(variable == "gamma[1,1]") |> pull(q50)
community_b_hat_wb <- gamma_wb |> filter(variable == "gamma[1,2]") |> pull(q50)
community_k_hat_wb <- gamma_wb |> filter(variable == "gamma[1,3]") |> pull(q50)

community_log_a_wb <- exp(community_log_a_hat_wb)
community_b_wb <- exp(community_b_hat_wb) 
community_k_wb <- exp(community_k_hat_wb)

community_log_a_wb
community_b_wb
community_b_wb

# Compute the fitted values using the sequence of x-values
community_fitted_log_y_cr_wb_seq <- community_log_a_wb + log(1 - exp(-community_b_wb * (x_nlr_seq ^ community_k_wb)))
community_fitted_cr_wb_seq <- exp(community_fitted_log_y_cr_wb_seq)


df_wb <- tibble(y = community_fitted_cr_wb_seq, x = x_nlr_seq)
head(df_wb)
```

# Plot
## Power-law

```{r}
head(data2)
head(df_pl)

ggplot() +
  geom_bin2d(data = data2, aes(x = dbh, y = cr), bins = 200)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_pl, aes(x = x, y = y), color = "blue")

```

## gMM
```{r}
head(df_gmm)

ggplot() +
  geom_bin2d(data = data2, aes(x = dbh, y = cr), bins = 200)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_gmm, aes(x = x, y = y), color = "green")

```

## Weibull
```{r}
head(df_wb)

ggplot() +
  geom_bin2d(data = data2, aes(x = dbh, y = cr), bins = 200)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_wb, aes(x = x, y = y), color = "red")

```

## 3 functions in 1 panel: Log-scale
```{r}
combined_plot <- ggplot(data2) +
  geom_bin2d(data = data2, aes(x = dbh, y = cr), bins = 200)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_pl, aes(x = x, y = y, color = "Power-law"), size = 0.8) +
  geom_line(data = df_gmm, aes(x = x, y = y, color = "gMM"), size = 0.8) +
  geom_line(data = df_wb, aes(x = x, y = y, color = "Weibull"), size = 0.8) +
  labs(title = "Community-level Model Fits for Power-law, gMM, and Weibull Models",
       x = "DBH (cm)",
       y = "CR (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  scale_color_manual(name = "Model", values = c("Power-law" = "blue", "gMM" = "red", "Weibull" = "green"))

combined_plot

```

## 3 functions in 1 panel: Non-log scale

```{r}
combined_plot_non <- ggplot(data2) +
  geom_bin2d(data = data2, aes(x = dbh, y = cr), bins = 200)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_pl, aes(x = x, y = y, color = "Power-law"), size = 0.8) +
  geom_line(data = df_gmm, aes(x = x, y = y, color = "gMM"), size = 0.8) +
  geom_line(data = df_wb, aes(x = x, y = y, color = "Weibull"), size = 0.8) +
  labs(title = "Community-level Model Fits for Power-law, gMM, and Weibull Models",
       x = "DBH (cm)",
       y = "CR (m)") +
  theme_minimal() +
  scale_color_manual(name = "Model", values = c("Power-law" = "blue", "gMM" = "green", "Weibull" = "red"))

combined_plot_non
```

# Plotting with density-based coloring

## Log scale
```{r}
dens <- with(data2, kde2d(log10(dbh), log10(cr), n = 300))
ix <- findInterval(log10(data2$dbh), dens$x)
iy <- findInterval(log10(data2$cr), dens$y)
data2$density <- dens$z[cbind(ix, iy)]
head(data2)

combined_plot <- ggplot(data = data2, aes(x = dbh, y = cr, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_pl, aes(x = x, y = y), color = "#FF5733", size = 0.8) +
  geom_line(data = df_gmm, aes(x = x, y = y), color = "#2ECC71", size = 0.8) +
  geom_line(data = df_wb, aes(x = x, y = y), color = "#0f92e9", size = 0.8) +
  labs(
       x = "DBH (cm)",
       y = "CR (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20),   
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),    
        axis.text.y = element_text(size = 16))

combined_plot
ggsave("cr_plot.png", plot = combined_plot, width = 8, height = 6, dpi = 300, bg= "white")
```

```{r}
combined_plot <- ggplot(data = data2, aes(x = dbh, y = cr, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_pl, aes(x = x, y = y), color = "#FF5733", size = 0.8) +  # Power-Law
  geom_line(data = df_gmm, aes(x = x, y = y), color = "#2ECC71", size = 0.8) +  # GMM
  geom_line(data = df_wb, aes(x = x, y = y), color = "#0f92e9", size = 0.8) +  # Weibull
  labs(
    x = "DBH (cm)",
    y = "CR (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20),   
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),    
        axis.text.y = element_text(size = 16),
        legend.position = "none") +  # Remove default legend
  
  annotate("segment", x = 100, xend = 130, y = 0.3, yend = 0.3, color = "#FF5733", size = 1) +  # Power-Law line
    annotate("text", x = 135, y = 0.3, label = "Power-Law", size = 5, hjust = 0) +  # Power-Law text
    
    annotate("segment", x = 100, xend = 130, y = 0.2, yend = 0.2, color = "#2ECC71", size = 1) +  # GMM line
    annotate("text", x = 135, y = 0.2, label = "gMM", size = 5, hjust = 0) +  # GMM text
    
    annotate("segment", x = 100, xend = 130, y = 0.125, yend = 0.125, color = "#0f92e9", size = 1) +  # Weibull line
    annotate("text", x = 135, y = 0.125, label = "Weibull", size = 5, hjust = 0)  # Weibull text
# Save the plot with annotations
ggsave("cr_plot_anno.png", plot = combined_plot, width = 8, height = 6, dpi = 300, bg = "white")
```

## Non-log scale
```{r}
dens <- with(data2, kde2d(dbh, cr, n = 300))
ix <- findInterval(data2$dbh, dens$x)
iy <- findInterval(data2$cr, dens$y)
data2$density <- dens$z[cbind(ix, iy)]
head(data2)

# Create the plot without log scales
combined_plot_non <- ggplot(data = data2, aes(x = dbh, y = cr, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_pl, aes(x = x, y = y), color = "blue", size = 0.8) +
  geom_line(data = df_gmm, aes(x = x, y = y), color = "green", size = 0.8) +
  geom_line(data = df_wb, aes(x = x, y = y), color = "red", size = 0.8) +
  labs(title = "Community-level Model Fits for Power-law, gMM, and Weibull Models",
       x = "DBH (cm)",
       y = "CR (m)") +
  theme_minimal()

combined_plot_non
```