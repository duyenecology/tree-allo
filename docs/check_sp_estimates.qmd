---
title: "Checking species-level estimates"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
```

```{r, include=FALSE}
library(targets)
library(here)
library(tidyverse)
library(scales)
options(width=150)
source("R/figs.R")
```

# H-DBH allometry

## Read in data

```{r}
tallo_reduced_nlr_df_h <- tar_read(tallo_reduced_nlr_df_ang_h)
tallo_reduced_nlr_df_h

summary(tallo_reduced_nlr_df_h)

species_data <- tallo_reduced_nlr_df_h |>
  select(tree_id, sp, dbh, h)

sub_datasets <- species_data |> 
  group_split(sp)

names(sub_datasets) <- unique(species_data$sp)

subset_species <- names(sub_datasets)[1:100]  # Select the first 100 species
subset_data <- sub_datasets[names(sub_datasets) %in% subset_species]
```

## Extracting sp-specific parameter

```{r}
sp_posterior_h_df <- tar_read(sp_posterior_h_df)
head(sp_posterior_h_df)
sp_posterior_h_df <- sp_posterior_h_df |> 
  rename(sp = Species)

```

# Function
```{r}
generate_plot <- function(sub_datasets, h_posterior_df) {
  combined_data <- data.frame()
  
  for (i in seq_along(sub_datasets)) {
    species_data <- sub_datasets[[i]]
    species_name <- names(sub_datasets)[i]
    
    # Get posterior parameters for the species
    species_post <- h_posterior_df |>
      filter(sp == species_name)
    
    if (nrow(species_post) == 0) {
      warning(paste("No posterior data for species:", species_name))
      next
    }
    
    # Extract parameters
    a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
    log_a <- log(a)
    b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))
    k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))
    
    dbh <- species_data$dbh
    
    # Compute the fitted height values
    fitted_log_y <- log_a + log(1 - exp(-b * (dbh ^ k)))
    fitted_height <- exp(fitted_log_y)
    
    # Create a dataframe for the fitted curve
    fitted_curve <- data.frame(
      DBH = dbh,
      H = fitted_height,
      sp = species_name,
      Source = "Fitted"
    )
    
    # Combine observed and fitted data
    combined_species_data <- species_data |>
      mutate(sp = species_name, Source = "Observed") |>
      select(DBH = dbh, H = h, sp, Source) |>
      bind_rows(fitted_curve)
    
    # Append to the combined dataset
    combined_data <- bind_rows(combined_data, combined_species_data)
  }
  
  p <- ggplot(combined_data, aes(x = DBH, y = H, color = Source)) +
    geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
    geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#72b6e3", linewidth = 0.6) +
    facet_wrap(~ sp, scales = "free", ncol = 4) +
    labs(
      x = "DBH (cm)",
      y = "Tree Height (m)"
    ) +
    my_theme()
  
  return(p)
}

generate_plot_log <- function(sub_datasets, h_posterior_df) {
  combined_data <- data.frame()
  
  for (i in seq_along(sub_datasets)) {
    species_data <- sub_datasets[[i]]
    species_name <- names(sub_datasets)[i]
    
    # Get posterior parameters for the species
    species_post <- h_posterior_df |>
      filter(sp == species_name)
    
    if (nrow(species_post) == 0) {
      warning(paste("No posterior data for species:", species_name))
      next
    }
    
    # Extract parameters
    a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
    log_a <- log(a)
    b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))
    k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))
    
    dbh <- species_data$dbh
    
    # Compute the fitted height values
    fitted_log_y <- log_a + log(1 - exp(-b * (dbh ^ k)))
    fitted_height <- exp(fitted_log_y)
    
    # Create a dataframe for the fitted curve
    fitted_curve <- data.frame(
      DBH = dbh,
      H = fitted_height,
      sp = species_name,
      Source = "Fitted"
    )
    
    # Combine observed and fitted data
    combined_species_data <- species_data |>
      mutate(sp = species_name, Source = "Observed") |>
      select(DBH = dbh, H = h, sp, Source) |>
      bind_rows(fitted_curve)
    
    # Append to the combined dataset
    combined_data <- bind_rows(combined_data, combined_species_data)
  }
  
  p <- ggplot(combined_data, aes(x = DBH, y = H, color = Source)) +
    geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
    geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#72b6e3", linewidth = 0.6) +
    facet_wrap(~ sp, scales = "free", ncol = 4) +
    labs(
      x = "DBH (cm)",
      y = "Tree Height (m)"
    ) +
    scale_x_log10() +
    scale_y_log10() +
    my_theme()
  
  return(p)
}
```

# Plotting

```{r, fig.width=14, fig.height=20}
# Split species into 13 groups
species_groups <- split(sub_datasets, cut(seq_along(sub_datasets), breaks = 15, labels = FALSE))

# Loop through each group and generate plots
for (i in seq_along(species_groups)) {
  # Get the current group of species
  group_data <- species_groups[[i]]
  
  # Generate the plot
  p <- generate_plot(group_data, sp_posterior_h_df)
  
  # Save the plot
  ggsave(
    filename = paste0("h_ang_sp_group_", i, ".png"),
    plot = p,
    width = 14,
    height = 45,
    units = "in",
    dpi = 300
  )
  
  # Generate the log-log plot
  p_log <- generate_plot_log(group_data, sp_posterior_h_df)
  
  # Save the log-log plot
  ggsave(
    filename = paste0("h_ang_sp_group_", i, "_log.png"),
    plot = p_log,
    width = 14,
    height = 40,
    units = "in",
    dpi = 300
  )
}
```

# CR-DBH

## ANG
```{r}
tallo_reduced_lr_df_ang_cr <- tar_read(tallo_reduced_lr_df_ang_cr)
tallo_reduced_lr_df_ang_cr
tallo_reduced_lr_df_ang_cr <- tallo_reduced_lr_df_ang_cr |>
   filter(division == "Angiosperm")
tallo_reduced_lr_df_ang_cr
length(unique(tallo_reduced_lr_df_ang_cr$sp))

ang_cr_pl <- tallo_reduced_lr_df_ang_cr |> 
  group_split(sp)

names(ang_cr_pl) <- unique(tallo_reduced_lr_df_ang_cr$sp)
ang_cr_pl_sp <- names(ang_cr_pl)

sp_posterior_cr_df <- tar_read(sp_posterior_cr_df)

sp_posterior_cr_df <- sp_posterior_cr_df |>
  rename(sp = Species)
head(sp_posterior_cr_df)

sp_posterior_cr_ang <- sp_posterior_cr_df |>
  filter(Division =="Angiosperm")
head(sp_posterior_cr_ang)
summary(sp_posterior_cr_ang)
```


```{r}
### POWER-LAW FUNCTION
generate_plot_cr <- function(sub_datasets, sp_posterior_df) {
  combined_data <- data.frame()
  
  for (i in seq_along(sub_datasets)) {
    species_data <- sub_datasets[[i]]
    species_name <- names(sub_datasets)[i]
    
    # Get posterior parameters for the species
    species_post <- sp_posterior_df |>
      filter(sp == species_name)
    
    if (nrow(species_post) == 0) {
      warning(paste("No posterior data for species:", species_name))
      next
    }
    
    # Extract parameters
    a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
    log_a <- log(a)
    b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))    
    
    dbh <- species_data$dbh
    
    # Compute the fitted CR values
    fitted_log_y <- log_a + b*log(dbh)
    fitted_cr <- exp(fitted_log_y)
    
    # Create a dataframe for the fitted curve
    fitted_curve <- data.frame(
      DBH = dbh,
      CR = fitted_cr,
      sp = species_name,
      Source = "Fitted"
    )
    
    # Combine observed and fitted data
    combined_species_data <- species_data |>
      mutate(sp = species_name, Source = "Observed") |>
      select(DBH = dbh, CR = cr, sp, Source) |>
      bind_rows(fitted_curve)
    
    # Append to the combined dataset
    combined_data <- bind_rows(combined_data, combined_species_data)
  }
  
  # Plot the combined data
  p <- ggplot(combined_data, aes(x = DBH, y = CR, color = Source)) +
    geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
    geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#72b6e3", linewidth = 0.6) +
    facet_wrap(~ sp, scales = "free", ncol = 4) +
    labs(
      x = "DBH (cm)",
      y = "Crown Radius (m)"
    ) +
    my_theme()
  
  return(p)
}

generate_plot_cr_log <- function(sub_datasets, sp_posterior_df) {
  combined_data <- data.frame()
  
  for (i in seq_along(sub_datasets)) {
    species_data <- sub_datasets[[i]]
    species_name <- names(sub_datasets)[i]
    
    # Get posterior parameters for the species
    species_post <- sp_posterior_df |>
      filter(sp == species_name)
    
    if (nrow(species_post) == 0) {
      warning(paste("No posterior data for species:", species_name))
      next
    }
    
    # Extract parameters
    a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
    log_a <- log(a)
    b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))    
    
    dbh <- species_data$dbh
    
    # Compute the fitted CR values
    fitted_log_y <- log_a + b*log(dbh)
    fitted_cr <- exp(fitted_log_y)
    
    # Create a dataframe for the fitted curve
    fitted_curve <- data.frame(
      DBH = dbh,
      CR = fitted_cr,
      sp = species_name,
      Source = "Fitted"
    )
    
    # Combine observed and fitted data
    combined_species_data <- species_data |>
      mutate(sp = species_name, Source = "Observed") |>
      select(DBH = dbh, CR = cr, sp, Source) |>
      bind_rows(fitted_curve)
    
    # Append to the combined dataset
    combined_data <- bind_rows(combined_data, combined_species_data)
  }
  
  # Plot the combined data in log-log scale
  p <- ggplot(combined_data, aes(x = DBH, y = CR, color = Source)) +
    geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
    geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#72b6e3", linewidth = 0.6) +
    facet_wrap(~ sp, scales = "free", ncol = 4) +
    labs(
      x = "DBH (cm)",
      y = "Crown Radius (m)"
    ) +
    scale_x_log10() +
    scale_y_log10() +
    my_theme()
  
  return(p)
}
```

```{r}
subset_species <- ang_cr_pl_sp[1:100]  # Select the first 100 species
subset_data <- ang_cr_pl[names(ang_cr_pl) %in% subset_species]

# Generate the plots
p <- generate_plot_cr(subset_data, sp_posterior_cr_ang)

# Save the plot
ggsave(
  filename = "cr_ang_pl.png",
  plot = p,
  width = 14,
  height = 45,
  units = "in",
  dpi = 300
)

# Generate and save log-log plot
p_log <- generate_plot_cr_log(subset_data, sp_posterior_cr_ang)

ggsave(
  filename = "cr_ang_pl_log.png",
  plot = p_log,
  width = 14,
  height = 45,
  units = "in",
  dpi = 300
)

```

## GYM

```{r}
tallo_reduced_nlr_df_gym_cr <- tar_read(tallo_reduced_nlr_df_gym_cr)
tallo_reduced_nlr_df_gym_cr
tallo_reduced_nlr_df_gym_cr <- tallo_reduced_nlr_df_gym_cr |>
   filter(division == "Gymnosperm")

tallo_reduced_nlr_df_gym_cr
length(unique(tallo_reduced_nlr_df_gym_cr$sp))

gym_cr_gmm <- tallo_reduced_nlr_df_gym_cr |> 
  group_split(sp)

names(gym_cr_gmm) <- unique(tallo_reduced_nlr_df_gym_cr$sp)
gym_cr_gmm_sp <- names(gym_cr_gmm)

sp_posterior_cr_df <- tar_read(sp_posterior_cr_df)

sp_posterior_cr_df <- sp_posterior_cr_df |>
  rename(sp = Species)
head(sp_posterior_cr_df)

sp_posterior_cr_gym <- sp_posterior_cr_df |>
  filter(Division =="Gymnosperm")
head(sp_posterior_cr_gym)
summary(sp_posterior_cr_gym)

```


```{r}
### gMM function
generate_plot_cr_gmm <- function(sub_datasets, sp_posterior_df) {
  combined_data <- data.frame()
  
  for (i in seq_along(sub_datasets)) {
    species_data <- sub_datasets[[i]]
    species_name <- names(sub_datasets)[i]
    
    # Get posterior parameters for the species
    species_post <- sp_posterior_df |>
      filter(sp == species_name)
    
    if (nrow(species_post) == 0) {
      warning(paste("No posterior data for species:", species_name))
      next
    }
    
    # Extract parameters
    a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
    log_a <- log(a)
    b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))    
    k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))

    dbh <- species_data$dbh
    
    # Compute the fitted CR values
    fitted_log_y <- log_a + b*log(dbh) + log(k + dbh^b)
    fitted_cr <- exp(fitted_log_y)
    
    # Create a dataframe for the fitted curve
    fitted_curve <- data.frame(
      DBH = dbh,
      CR = fitted_cr,
      sp = species_name,
      Source = "Fitted"
    )
    
    # Combine observed and fitted data
    combined_species_data <- species_data |>
      mutate(sp = species_name, Source = "Observed") |>
      select(DBH = dbh, CR = cr, sp, Source) |>
      bind_rows(fitted_curve)
    
    # Append to the combined dataset
    combined_data <- bind_rows(combined_data, combined_species_data)
  }
  
  # Plot the combined data
  p <- ggplot(combined_data, aes(x = DBH, y = CR, color = Source)) +
    geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
    geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#72b6e3", linewidth = 0.6) +
    facet_wrap(~ sp, scales = "free", ncol = 4) +
    labs(
      x = "DBH (cm)",
      y = "Crown Radius (m)"
    ) +
    my_theme()
  
  return(p)
}

generate_plot_cr_log_gmm <- function(sub_datasets, sp_posterior_df) {
  combined_data <- data.frame()
  
  for (i in seq_along(sub_datasets)) {
    species_data <- sub_datasets[[i]]
    species_name <- names(sub_datasets)[i]
    
    # Get posterior parameters for the species
    species_post <- sp_posterior_df |>
      filter(sp == species_name)
    
    if (nrow(species_post) == 0) {
      warning(paste("No posterior data for species:", species_name))
      next
    }
    
    # Extract parameters
    a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
    log_a <- log(a)
    b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))    
    k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))

    dbh <- species_data$dbh
    
    # Compute the fitted CR values
    fitted_log_y <- log_a + b*log(dbh) + log(k + dbh^b)
    fitted_cr <- exp(fitted_log_y)
    
    # Create a dataframe for the fitted curve
    fitted_curve <- data.frame(
      DBH = dbh,
      CR = fitted_cr,
      sp = species_name,
      Source = "Fitted"
    )
    
    # Combine observed and fitted data
    combined_species_data <- species_data |>
      mutate(sp = species_name, Source = "Observed") |>
      select(DBH = dbh, CR = cr, sp, Source) |>
      bind_rows(fitted_curve)
    
    # Append to the combined dataset
    combined_data <- bind_rows(combined_data, combined_species_data)
  }
  # Plot the combined data in log-log scale
  p <- ggplot(combined_data, aes(x = DBH, y = CR, color = Source)) +
    geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
    geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#72b6e3", linewidth = 0.6) +
    facet_wrap(~ sp, scales = "free", ncol = 4) +
    labs(
      x = "DBH (cm)",
      y = "Crown Radius (m)"
    ) +
    scale_x_log10() +
    scale_y_log10() +
    my_theme()
  
  return(p)
}
```

```{r}
subset_species <- gym_cr_gmm_sp[1:59]  # Select the first 100 species
subset_data <- gym_cr_gmm[names(gym_cr_gmm) %in% subset_species]

# Generate the plots
p <- generate_plot_cr_gmm(subset_data, sp_posterior_cr_gym)

# Save the plot
ggsave(
  filename = "cr_gym_gmm.png",
  plot = p,
  width = 14,
  height = 45,
  units = "in",
  dpi = 300
)

# Generate and save log-log plot
p_log <- generate_plot_cr_log_gmm(subset_data, sp_posterior_cr_ang)

ggsave(
  filename = "cr_gym_gmm_log.png",
  plot = p_log,
  width = 14,
  height = 45,
  units = "in",
  dpi = 300
)

```