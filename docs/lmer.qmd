---
title: "Relationships of tree architecture and wood density"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

# Load the packages
```{r}
library(readr)
library(tidyverse)
library(here)
library(lme4)
library(e1071)
library(car)
library(sjPlot)
library(gridExtra)
```

# Data preparation
```{r}
ov <- read_csv(here("data/overlap_20.csv"))
ov <- na.omit(ov)
ov$sp <- as.factor(ov$sp)
summary(ov)
```

- Checking the data
```{r}
# Histograms

hist_dbh <- ggplot(ov, aes(x = dbh)) +
  geom_histogram(fill = "lightblue", color = "black") +
  labs(title = "Histogram of DBH", x = "DBH", y = "Frequency")

hist_h <- ggplot(ov, aes(x = h)) +
  geom_histogram(fill = "lightgreen", color = "black") +
  labs(title = "Histogram of Height", x = "Height", y = "Frequency")

hist_cr <- ggplot(ov, aes(x = cr)) +
  geom_histogram(fill = "lightpink", color = "black") +
  labs(title = "Histogram of CR", x = "CR", y = "Frequency")

# Q-Q plots
qq_dbh <- ggplot(ov, aes(sample = dbh)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for DBH", x = "Theoretical Quantiles", y = "Sample Quantiles")

qq_h <- ggplot(ov, aes(sample = h)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for Height", x = "Theoretical Quantiles", y = "Sample Quantiles")

qq_cr <- ggplot(ov, aes(sample = cr)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for CR", x = "Theoretical Quantiles", y = "Sample Quantiles")

# # Combine plots
# combined_plots <- gridExtra::grid.arrange(hist_dbh, hist_h, hist_cr, qq_dbh, qq_h, qq_cr, ncol = 3)

# # Save the combined plots
# ggsave(
#   filename = here("figs/lmer/distribution_plots.png"),
#   plot = combined_plots,
#   width = 12,
#   height = 8
# )
```

- Transforming data
```{r}
ov$dbh_ln <- log(ov$dbh)
ov$h_ln <- log(ov$h)
ov$cr_ln <- log(ov$cr)
summary(ov)
```

- Checking data
```{r}
# Calculate mean values
mean_h <- mean(ov$h.ln)
mean_dbh <- mean(ov$dbh.ln)
mean_cr <- mean(ov$cr.ln)
mean_wd <- mean(ov$wd)

hist_h <- ggplot(ov, aes(x = h.ln)) +
  geom_histogram(fill = "lightblue", color = "black") +
  geom_vline(xintercept = mean_h, color = "red", linetype = "dashed", size = 1) +  # Add mean line
  labs(title = "Histogram of Tree Height (ln)", x = "Height (ln)", y = "Frequency")

hist_dbh <- ggplot(ov, aes(x = dbh.ln)) +
  geom_histogram(fill = "lightgreen", color = "black") +
  geom_vline(xintercept = mean_dbh, color = "red", linetype = "dashed", size = 1) +  # Add mean line
  labs(title = "Histogram of DBH (ln)", x = "DBH (ln)", y = "Frequency")

hist_cr <- ggplot(ov, aes(x = cr.ln)) +
  geom_histogram(fill = "lightpink", color = "black") +
  geom_vline(xintercept = mean_cr, color = "red", linetype = "dashed", size = 1) +  # Add mean line
  labs(title = "Histogram of CR (ln)", x = "CR (ln)", y = "Frequency")

hist_wd <- ggplot(ov, aes(x = wd)) +
  geom_histogram(fill = "orange", color = "black") +
  geom_vline(xintercept = mean_wd, color = "red", linetype = "dashed", size = 1) +  # Add mean line
  labs(title = "Histogram of WD", x = "WD", y = "Frequency")

combined_plot <- gridExtra::grid.arrange(hist_h, hist_dbh, hist_cr, hist_wd, ncol = 4)

ggsave(
  filename = here("figs/lmer/combined_histograms_ln_with_mean.png"),
  plot = combined_plot,
  width = 12,
  height = 6
)
```

- Normality qq-plot

```{r}
# Create Q-Q plots
qq_h.ln <- ggplot(ov, aes(sample = h.ln)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for Tree Height (ln)", x = "Theoretical Quantiles", y = "Sample Quantiles")

qq_dbh.ln <- ggplot(ov, aes(sample = dbh.ln)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for DBH (ln)", x = "Theoretical Quantiles", y = "Sample Quantiles")

qq_cr.ln <- ggplot(ov, aes(sample = cr.ln)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for CR (ln)", x = "Theoretical Quantiles", y = "Sample Quantiles")

qq_wd <- ggplot(ov, aes(sample = wd)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot for WD", x = "Theoretical Quantiles", y = "Sample Quantiles")


# Combine Q-Q plots into one grid
combined_qq_plots <- gridExtra::grid.arrange(qq_h.ln, qq_dbh.ln, qq_cr.ln, qq_wd, ncol = 2)

# Save the combined Q-Q plots
ggsave(
  filename = here("figs/lmer/combined_qq_ln_plots.png"),
  plot = combined_qq_plots,
  width = 12,
  height = 8
)
```

# Fitting lme4::lmer

```{r}
dhcmod1 <- lme4::lmer(dbh_ln ~ (h_ln + cr_ln) + (1 + (h_ln + cr_ln) | sp), data = ov2)
hdmod1 <- lme4::lmer(h_ln ~ dbh_ln + (1 + dbh_ln | sp), data = ov2)
cdmod1 <- lme4::lmer(cr_ln ~ dbh_ln + (1 + dbh_ln | sp), data = ov2)
```

- Issues:
> dhcmod1 <- lme4::lmer(dbh.ln ~ h.ln + cr.ln + (1 + h.ln + cr.ln | sp), data = ov)
Warning message:
In checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.00437759 (tol = 0.002, component 1)

```{r}
print(dhmod1)
print(dcmod1)
print(hdmod1)
print(cdmod1)
print(dhcmod1)
```

- Comparison of models (estimating DBH)

```{r}
# Compare AIC and BIC
aic_bic <- data.frame(
  Model = c("dhmod1", "dcmod1", "dhcmod1"),
  AIC = c(AIC(dhmod1), AIC(dcmod1), AIC(dhcmod1)),
  BIC = c(BIC(dhmod1), BIC(dcmod1), BIC(dhcmod1))
)
print(aic_bic)
```

- Key findings:
> print(aic_bic)
    Model       AIC      BIC
1  dhmod1 219829.56 219891.3
2  dcmod1 191989.70 192051.5
3 dhcmod1  88852.92  88955.9

The model with the lowest AIC and BIC values is generally considered the best-fit.
In this comparison, dhcmod1 has the lowest AIC and BIC values.
Therefore, dhcmod1 is the better-fitting model (estimation of DBH) according to these criteria.
These results imply that tree crown size might play a crucial role in accurately estimating DBH.


## Check the residual distribution

- Extract the residuals
```{r}
residuals_dhmod1 <- resid(dhmod1)
residuals_dcmod1 <- resid(dcmod1)
residuals_hdmod1 <- resid(hdmod1)
residuals_cdmod1 <- resid(cdmod1)
residuals_dhcmod1 <- resid(dhcmod1)
```

- Extract the  fitted values
```{r}
fitted_dhmod1 <- fitted(dhmod1)
fitted_dcmod1 <- fitted(dcmod1)
fitted_hdmod1 <- fitted(hdmod1)
fitted_cdmod1 <- fitted(cdmod1)
fitted_dhcmod1 <- fitted(dhcmod1)
```

- Histograming residuals
```{r}
hist_dhmod1_plot <- ggplot(data.frame(residuals = residuals_dhmod1), aes(x = residuals)) +
  geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
  labs(title = "Residuals for dhmod1") +
  theme_minimal()

hist_dcmod1_plot <- ggplot(data.frame(residuals = residuals_dcmod1), aes(x = residuals)) +
  geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
  labs(title = "Residuals for dcmod1") +
  theme_minimal()

hist_hdmod1_plot <- ggplot(data.frame(residuals = residuals_hdmod1), aes(x = residuals)) +
  geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
  labs(title = "Residuals for hdmod1") +
  theme_minimal()

hist_cdmod1_plot <- ggplot(data.frame(residuals = residuals_cdmod1), aes(x = residuals)) +
  geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
  labs(title = "Residuals for cdmod1") +
  theme_minimal()

hist_dhcmod1_plot <- ggplot(data.frame(residuals = residuals_dhcmod1), aes(x = residuals)) +
  geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
  labs(title = "Residuals for dhcmod1") +
  theme_minimal()

# Combine all plots with a common layout
combined_plots_re <- gridExtra::grid.arrange(
  hist_dhmod1_plot, hist_dcmod1_plot, hist_hdmod1_plot, hist_cdmod1_plot, hist_dhcmod1_plot,
  nrow = 2
)
# Save the combined plots
ggsave(
  filenam = here("figs/lmer/combined_residual_ln_histograms.png"),
  plot = combined_plots_re,
  width = 20,
  height = 8)
```

- Redidual dependent plot

```{r}
# Function to create residual dependent plots
create_residual_dependent_plot <- function(residuals, model_name) {
  ggplot(data.frame(Residuals = residuals), aes(x = seq_along(residuals), y = residuals)) +
    geom_point() +
    geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
    labs(title = paste("Residuals for", model_name), x = "Observation", y = "Residuals")
}

# List of model names and their corresponding residuals
model_residuals <- list(
  "dhmod1" = residuals_dhmod1,
  "dcmod1" = residuals_dcmod1,
  "hdmod1" = residuals_hdmod1,
  "cdmod1" = residuals_cdmod1,
  "dhcmod1" = residuals_dhcmod1
)

# Create individual residual dependent plots
plots <- lapply(names(model_residuals), function(model_name) {
  create_residual_dependent_plot(model_residuals[[model_name]], model_name)
})

# Arrange all plots in a grid
combined_plots_rd <- gridExtra::grid.arrange(grobs = plots, ncol = 3)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/combined_residual_dependent_plots.png"),
  plot = combined_plots_rd,
  width = 16,
  height = 12
)
```

- Scale - Location plot
```{r}
# Function to create Scale-Location (S-L) Plot
create_sl_plot <- function(residuals, fitted_values, model_name) {
  # Calculate square root of absolute residuals
  sqrt_abs_residuals <- sqrt(abs(residuals))

  # Create data frame
  df <- data.frame(Fitted_Values = fitted_values, Sqrt_Abs_Residuals = sqrt_abs_residuals)

  # Plot
  ggplot(df, aes(x = Fitted_Values, y = Sqrt_Abs_Residuals)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "red") +
    labs(title = paste("Scale-Location Plot for", model_name),
         x = "Fitted Values",
         y = "Square Root of Absolute Residuals") +
    theme_minimal()
}

# List of model names and their corresponding residuals and fitted values
model_data <- list(
  "dhmod1" = list(residuals = residuals_dhmod1, fitted_values = fitted_dhmod1),
  "dcmod1" = list(residuals = residuals_dcmod1, fitted_values = fitted_dcmod1),
  "hdmod1" = list(residuals = residuals_hdmod1, fitted_values = fitted_hdmod1),
  "cdmod1" = list(residuals = residuals_cdmod1, fitted_values = fitted_cdmod1),
  "dhcmod1" = list(residuals = residuals_dhcmod1, fitted_values = fitted_dhcmod1)
)

# Create individual S-L plots
plots <- lapply(names(model_data), function(model_name) {
  create_sl_plot(model_data[[model_name]]$residuals, model_data[[model_name]]$fitted_values, model_name)
})

# Arrange all plots in a grid
combined_plots_sl <- gridExtra::grid.arrange(grobs = plots, ncol = 3)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/combined_sl_plots.png"),
  plot = combined_plots_sl,
  width = 16,
  height = 12
)
```

```{r}
# Create diagnostic plots for each model
diag_plots_dcmod1 <- plot_model(dcmod1, type = "diag")
diag_plots_hdmod1 <- plot_model(hdmod1, type = "diag")
diag_plots_cdmod1 <- plot_model(cdmod1, type = "diag")
diag_plots_dhcmod1 <- plot_model(dhcmod1, type = "diag")

# Combine plots into a single grid
combined_plots <- gridExtra::grid.arrange(
  diag_plots_dcmod1[[1]],
  diag_plots_hdmod1[[1]],
  diag_plots_cdmod1[[1]],
  diag_plots_dhcmod1[[1]],
  nrow = 2
)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/diagnostic_plots_combined.png"),
  plot = combined_plots,
  width = 12,
  height = 8
)
```

- Normality qq-plot of residuals
```{r}
# Create Q-Q plots for the residuals of each model
qq_plots <- lapply(list(residuals_dcmod1, residuals_hdmod1, residuals_cdmod1, residuals_dhcmod1), function(residuals) {
  ggplot(data.frame(Residuals = residuals), aes(sample = residuals)) +
    geom_qq() +
    geom_qq_line() +
    labs(title = "Q-Q Plot of Residuals")
})

# Combine Q-Q plots into a single grid
combined_qq_plots <- grid.arrange(
  grobs = qq_plots,
  nrow = 2
)

# Save the combined Q-Q plots
ggsave(
  filename = here("figs/lmer/residuals_qq_plots_combined.png"),
  plot = combined_qq_plots,
  width = 12,
  height = 8
)
```

- Issues: Not so good, I am not sure if the residuals follow normal distribution (with positive kurtosis in histogram and outliers in QQ-plot).

## Extract group-level intercepts and slopes

- Using lme4::ranef and lme4::fixef functions
```{r}
# Combine all models into a list
models <- list(dhmod1 = dhmod1, dcmod1 = dcmod1, hdmod1 = hdmod1, cdmod1 = cdmod1, dhcmod1 = dhcmod1)

# Create an empty data frame to store the results
coefficients_df <- data.frame(
  Model = character(),
  sp = character(),
  Intercept = numeric(),
  Slope = numeric(),
  stringsAsFactors = FALSE
)

# Function to extract both random and fixed effects
extract_effects <- function(model, model_name) {
  random_effects <- ranef(model)$sp
  fixed_effects <- fixef(model)

  random_df <- data.frame(
    Model = model_name,
    sp = rownames(random_effects),
    Intercept = random_effects[, 1],
    Slope = random_effects[, 2]
  )

  fixed_df <- data.frame(
    Model = model_name,
    sp = "Fixed",
    Intercept = as.numeric(fixed_effects[1]),
    Slope = as.numeric(fixed_effects[2])
  )

  return(rbind(random_df, fixed_df))
}

# Iterate over each model to extract effects and add to coefficients_df
for (model_name in names(models)) {
  coefficients_df <- rbind(coefficients_df, extract_effects(models[[model_name]], model_name))
}
```

```{r}
head(coefficients_df)
head(ov)
```

- Join parameters and overlap_20.csv data
```{r}
ov2 <- merge(ov, coefficients_df, by = 'sp', all.x = TRUE)
head(ov2)
summary(ov2)
```

# Fitting linear model for group  level predictor (wood density) and parameters of first- level models
- Issues:
I am not sure if the variables of my sub dataset are following a normal distribution.
I checked skewness for all and tried several transformation methods but QQ-plot and Histagram do not show that my transformed data follow normal distribution.
So, now, I am trying to fit the linear model for log wood density (wd.ln) and the parameters of linear mixed models first. Then I will make tar_script for them and I am finding a suitable transform method as well.

## dhmod1

- Subset data for dhmod1
```{r}
dhmod1_data <- subset(ov2, Model == "dhmod1")
head(dhmod1_data)
```

- Checking distribution of parameters
```{r}
# Histogram for Intercept
intercept_hist_dh <- ggplot(dhmod1_data, aes(x = Intercept)) +
  geom_histogram(binwidth = 0.1, fill = "gray", color = "black") +
  labs(x = "Intercept", y = "Frequency", title = "Distribution of Intercept for dhmod1")

# Histogram for Slope
slope_hist_dh <- ggplot(dhmod1_data, aes(x = Slope)) +
  geom_histogram(binwidth = 0.1, fill = "orange", color = "black") +
  labs(x = "Slope", y = "Frequency", title = "Distribution of Slope for dhmod1")

# Histogram for Wood Density
wd_hist_dh <- ggplot(dhmod1_data, aes(x = wd)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +  # Adjust color and fill as desired
  labs(x = "Wood Density (g m⁻³)", y = "Frequency", title = "Distribution of Wood Density for dhmod1") +
  theme_minimal()

# Arrange all histograms into a grid
combined_hist_dh <- gridExtra::grid.arrange(intercept_hist_dh, slope_hist_dh, wd_hist_dh, nrow = 1)

# Save the combined histogram
ggsave(
  filename = here("figs/lmer/dhmod1_parameter_distribution.png"),
  plot = combined_hist_dh,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Normality qq-plot
```{r}
# Create QQ plot for Intercept
qq_plot_dh_i <- ggplot(data = dhmod1_data, aes(sample = Intercept)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Slope
qq_plot_dh_s <- ggplot(data = dhmod1_data, aes(sample = Slope)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Wood Density
qq_plot_dh_wd <- ggplot(data = dhmod1_data, aes(sample = wd)) +
  stat_qq() +
  stat_qq_line()

# Arrange all QQ plots into a grid
combine_qq_dh <- gridExtra::grid.arrange(qq_plot_dh_i, qq_plot_dh_s, qq_plot_dh_wd, nrow = 1)

# Save the combined QQ plot
ggsave(
  filename = here("figs/lmer/dhmod1_para_qq_plot.png"),
  plot = combine_qq_dh,
  width = 16,
  height = 6,
  dpi = 120
)
```

- Checking skewness
```{r}
# Calculate skewness for Intercept
skewness_intercept <- skewness(dhmod1_data$Intercept)
print(paste("Skewness of Intercept:", skewness_intercept))

# Calculate skewness for Slope
skewness_slope <- skewness(dhmod1_data$Slope)
print(paste("Skewness of Slope:", skewness_slope))
# Calculate skewness for Wood Density
skewness_wd <- skewness(dhmod1_data$wd)
print(paste("Skewness of Wood Density:", skewness_wd))
```

- Issues:
Intercept and wd of dhmod1_data do not follow normal distribution
[1] "Skewness of Intercept: -0.308043701635711"
[1] "Skewness of Slope: -0.0219872668781178" (it's ok i think)
[1] "Skewness of Wood Density: 0.512113500065508" (log)

- Transforming data

```{r}
dhmod1_data$Intercept.yj <- yjPower(dhmod1_data$Intercept, lambda = 1.39, jacobian.adjusted = FALSE)
dhmod1_data$Slope <- yjPower(dhmod1_data$Slope,lambda = 1.05,  jacobian.adjusted = FALSE)
dhmod1_data$wd.ln <- log(dhmod1_data$wd)
```

```{r}
# Check skewness of 'Intercept.yj' and 'wd.ln'
skewness_intercept_yj <- skewness(dhmod1_data$Intercept.yj)
skewness_wd_ln <- skewness(dhmod1_data$wd.ln)
# Print skewness values
print(paste("Skewness of Transformed Intercept (Yeo-Johnson):", skewness_intercept_yj))
print(paste("Skewness of Transformed wd (Natural Log):", skewness_wd_ln))
```

[1] "Skewness of Transformed Intercept (Yeo-Johnson): -0.00567449414355722"
[1] "Skewness of Transformed wd (Natural Log): -0.0021015611785854"

- Normality qq-plot
```{r}
# Create QQ plot for Intercept
qq_plot_dh_i.yj <- ggplot(data = dhmod1_data, aes(sample = Intercept.yj)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Slope
qq_plot_dh_s <- ggplot(data = dhmod1_data, aes(sample = Slope)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Wood Density
qq_plot_dh_wd.ln <- ggplot(data = dhmod1_data, aes(sample = wd.ln)) +
  stat_qq() +
  stat_qq_line()

# Arrange plots into a grid
combined_qq_plots_yj <- gridExtra::grid.arrange(qq_plot_dh_i.yj, qq_plot_dh_s, qq_plot_dh_wd.ln, nrow = 1)

# Save the combined QQ plots
ggsave(
  filename = "figs/lmer/combined_qq_yj_plots.png",
  plot = combined_qq_plots_yj,
  width = 16,
  height = 6,
  dpi = 120
)
```

- Histogram
```{r}
# Histogram for Intercept.yj
histogram_intercept_yj <- ggplot(dhmod1_data, aes(x = Intercept.yj)) +
  geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
  labs(title = "Histogram of Intercept.yj")

# Histogram for Slope.yj
histogram_slope <- ggplot(dhmod1_data, aes(x = Slope)) +
  geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
  labs(title = "Histogram of Slope")

# Histogram for wd.ln
histogram_wd_ln <- ggplot(dhmod1_data, aes(x = wd.ln)) +
  geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
  labs(title = "Histogram of wd.ln")

# Arrange histograms into a grid
combined_histograms <- gridExtra::grid.arrange(histogram_intercept_yj, histogram_slope, histogram_wd_ln, nrow = 1)

# Save the combined histograms
ggsave(
  filename = "figs/lmer/dhmod1_yj_combined_histograms.png",
  plot = combined_histograms,
  width = 16,
  height = 6,
  dpi = 120
)
```

- Fitting second- level model
```{r}
i_dhmod1 <- lm(Intercept ~ wd.ln, data = dhmod1_data)
s_dhmod1 <- lm(Slope ~ wd.ln, data = dhmod1_data)
summary(i_dhmod1)
summary(s_dhmod1)
```

- Plot models
```{r}
# Scatter plot for Intercept vs. Wood Density
intercept_plot_dh <- ggplot(dhmod1_data, aes(x = wd.ln, y = Intercept)) +
  geom_point(color = "gray", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Intercept", title = "Intercept vs. Wood Density for dhmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Scatter plot for Slope vs. Wood Density
slope_plot_dh <- ggplot(dhmod1_data, aes(x = wd.ln, y = Slope)) +
  geom_point(color = "orange", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Slope", title = "Slope vs. Wood Density for dhmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Arrange plots into a grid
combined_plot_dh <- gridExtra::grid.arrange(intercept_plot_dh, slope_plot_dh, nrow = 1)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/dhmod1_parameter_plots.png"),
  plot = combined_plot_dh,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Key findings:
There is a negative relationship between wood density and intercept but positive with slope of dhmod1 model.
Wood Density has a significant effect on both Intercept and Slope of dhmod1 model.

## dcmod1

- Subset data for dcmod1
```{r}
dcmod1_data <- subset(ov2, Model == "dcmod1")
head(dcmod1_data)
```

- Checking distribution of parameters
```{r}
# Histogram for Intercept
intercept_hist_dc <- ggplot(dcmod1_data, aes(x = Intercept)) +
  geom_histogram(binwidth = 0.1, fill = "gray", color = "black") +
  labs(x = "Intercept", y = "Frequency", title = "Distribution of Intercept for dhmod1")

# Histogram for Slope
slope_hist_dc <- ggplot(dcmod1_data, aes(x = Slope)) +
  geom_histogram(binwidth = 0.1, fill = "orange", color = "black") +
  labs(x = "Slope", y = "Frequency", title = "Distribution of Slope for dhmod1")

# Histogram for Wood Density (wd)
wd_hist_dc <- ggplot(dcmod1_data, aes(x = wd)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
  labs(x = "Wood Density", y = "Frequency", title = "Distribution of Wood Density for dcmod1")

# Arrange plots into a grid
combined_hist_dc <- gridExtra::grid.arrange(intercept_hist_dc, slope_hist_dc, wd_hist_dc, nrow = 1)

# Save the combined histogram
ggsave(
  filename = here("figs/lmer/dcmod1_parameter_distribution.png"),
  plot = combined_hist_dc,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Normality qq-plot
```{r}
# Create QQ plot for Intercept
qq_plot_dc_i <- ggplot(data = dcmod1_data, aes(sample = Intercept)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Slope
qq_plot_dc_s <- ggplot(data = dcmod1_data, aes(sample = Slope)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for wd
qq_plot_dc_wd <- ggplot(data = dcmod1_data, aes(sample = wd)) +
  stat_qq() +
  stat_qq_line()

# Arrange plots into a grid
combine_qq_dc <- gridExtra::grid.arrange(qq_plot_dc_i, qq_plot_dc_s, qq_plot_dc_wd, nrow = 1)

# Save the combined QQ plot
ggsave(
  filename = here("figs/lmer/dcmod1_para_qq_plot.png"),
  plot = combine_qq_dc,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Issues:
Parameters of dcmod1_data do not follow normal distribution?

[1] "Skewness of Intercept: -1.92651634512216"
[1] "Skewness of Slope: -0.503247269693186"
[1] "Skewness of Wood Density: 0.512113500065508" (log)

- Transforming data
```{r}
dcmod1_data$Intercept.yj <- yjPower(dcmod1_data$Intercept, lambda = 2.3, jacobian.adjusted = FALSE)
dcmod1_data$Slope.yj <- yjPower(dcmod1_data$Slope,lambda = 1.45,  jacobian.adjusted = FALSE)
dcmod1_data$wd.ln <- log(dcmod1_data$wd)
```

```{r}
# Check skewness of 'Intercept.yj' and 'wd.ln'
skewness_intercept_yj <- skewness(dcmod1_data$Intercept.yj)
skewness_wd_ln <- skewness(dcmod1_data$wd.ln)
skewness_slope_yj <- skewness(dcmod1_data$Slope.yj)
# Print skewness values
print(paste("Skewness of Transformed Intercept (Yeo-Johnson):", skewness_intercept_yj))
print(paste("Skewness of Transformed Slope:", skewness_slope_yj))
print(paste("Skewness of Transformed wd (Natural Log):", skewness_wd_ln))
```

[1] "Skewness of Transformed Intercept (Yeo-Johnson): -0.0344020665645285"
[1] "Skewness of Transformed Slope: 0.0656546901573137"
[1] "Skewness of Transformed wd (Natural Log): -0.0021015611785854"

- Fitting the second-level model

```{r}
i_dcmod1 <- lm(Intercept ~ wd.ln, data = dcmod1_data)
s_dcmod1 <- lm(Slope ~ wd.ln, data = dcmod1_data)
summary(i_dcmod1)
summary(s_dcmod1)
```

- Plot models
```{r}
# Scatter plot for Intercept vs. Wood Density
intercept_plot_dc <- ggplot(dcmod1_data, aes(x = wd.ln, y = Intercept)) +
  geom_point(color = "gray", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Intercept", title = "Intercept vs. Wood Density for dcmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Scatter plot for Slope vs. Wood Density
slope_plot_dc <- ggplot(dcmod1_data, aes(x = wd.ln, y = Slope)) +
  geom_point(color = "orange", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Slope", title = "Slope vs. Wood Density for dcmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Arrange plots into a grid
combined_plot_dc <- gridExtra::grid.arrange(intercept_plot_dc, slope_plot_dc, nrow = 1)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/dcmod1_parameter_plots.png"),
  plot = combined_plot_dc,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Key findings:
There is a negative relationship between wood density and the intercept but a positive relationship with the slope of the dcmod1 model.
Wood density has a significant effect on both the intercept and slope of the model.

## hdmod1

- Subset data for hdmod1
```{r}
hdmod1_data <- subset(ov2, Model == "hdmod1")
summary(hdmod1_data)
```

- Checking distribution of parameters
```{r}
# Histogram for Intercept
intercept_hist_hd <- ggplot(hdmod1_data, aes(x = Intercept)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
  labs(x = "Intercept", y = "Frequency", title = "Distribution of Intercept for hdmod1")

# Histogram for Slope
slope_hist_hd <- ggplot(hdmod1_data, aes(x = Slope)) +
  geom_histogram(binwidth = 0.1, fill = "lightgreen", color = "black") +
  labs(x = "Slope", y = "Frequency", title = "Distribution of Slope for hdmod1")

# Histogram for Wood Density
wd_hist_hd <- ggplot(hdmod1_data, aes(x = wd)) +
  geom_histogram(binwidth = 0.1, fill = "lightcoral", color = "black") +
  labs(x = "Wood Density", y = "Frequency", title = "Distribution of Wood Density for hdmod1")

# Arrange plots into a grid
combined_hist_hd <- gridExtra::grid.arrange(intercept_hist_hd, slope_hist_hd, wd_hist_hd, nrow = 1)

# Save the combined histogram
ggsave(
  filename = here("figs/lmer/hdmod1_parameter_distribution.png"),
  plot = combined_hist_hd,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Normality qq-plot
```{r}
# Create QQ plot for Intercept
qq_plot_hd_i <- ggplot(data = hdmod1_data, aes(sample = Intercept)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Slope
qq_plot_hd_s <- ggplot(data = hdmod1_data, aes(sample = Slope)) +
  stat_qq() +
  stat_qq_line()

# Create QQ plot for Wood Density
qq_plot_hd_wd <- ggplot(data = hdmod1_data, aes(sample = wd)) +
  stat_qq() +
  stat_qq_line()

# Arrange plots into a grid
combine_qq_hd <- gridExtra::grid.arrange(qq_plot_hd_i, qq_plot_hd_s, qq_plot_hd_wd, nrow = 1)

# Save the combined QQ plot
ggsave(
  filename = here("figs/lmer/hdmod1_para_qq_plot.png"),
  plot = combine_qq_hd,
  width = 16,
  height = 6,
  dpi = 120
)
```

- Checking skewness
```{r}
skewness_intercept <- skewness(hdmod1_data$Intercept)
print(paste("Skewness of Intercept:", skewness_intercept))

skewness_slope <- skewness(hdmod1_data$Slope)
print(paste("Skewness of Slope:", skewness_slope))

skewness_wd <- skewness(hdmod1_data$wd)
print(paste("Skewness of Wood Density:", skewness_wd))
```

- Issues:
The parameters of hdmod1 model do not follow normal distribution
[1] "Skewness of Intercept: 0.0118844338848712"
[1] "Skewness of Slope: -0.146462294861349"
[1] "Skewness of Wood Density: 0.512113500065508"

- Transforming data
```{r}
hdmod1_data$Slope.yj <- yjPower(hdmod1_data$Slope,lambda = 1.5,  jacobian.adjusted = FALSE)
hdmod1_data$wd.ln <- log(dcmod1_data$wd)
```

```{r}
skewness_wd_ln <- skewness(hdmod1_data$wd.ln)
skewness_slope_yj <- skewness(hdmod1_data$Slope.yj)
# Print skewness values
print(paste("Skewness of Transformed Intercept (Yeo-Johnson):", skewness_intercept_yj))
print(paste("Skewness of Transformed Slope:", skewness_slope_yj))
print(paste("Skewness of Transformed wd (Natural Log):", skewness_wd_ln))
```

[1] "Skewness of Transformed Intercept (Yeo-Johnson): -0.0344020665645285"
[1] "Skewness of Transformed Slope: 0.00458622401929467")
[1] "Skewness of Transformed wd (Natural Log): -0.0021015611785854"

- Fitting the second-level model
```{r}
i_hdmod1 <- lm(Intercept ~ wd.ln, data = hdmod1_data)
s_hdmod1 <- lm(Slope ~ wd.ln, data = hdmod1_data)
summary(i_hdmod1)
summary(s_hdmod1)
```

- Plot models
```{r}
# Scatter plot for Intercept vs. Wood Density
intercept_plot_hd <- ggplot(hdmod1_data, aes(x = wd.ln, y = Intercept)) +
  geom_point(color = "gray", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Intercept", title = "Intercept vs. Wood Density for hdmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Scatter plot for Slope vs. Wood Density
slope_plot_hd <- ggplot(hdmod1_data, aes(x = wd.ln, y = Slope)) +
  geom_point(color = "orange", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Slope", title = "Slope vs. Wood Density for hdmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Arrange plots into a grid
combined_plot_hd <- gridExtra::grid.arrange(intercept_plot_hd, slope_plot_hd, nrow = 1)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/hdmod1_parameter_plots.png"),
  plot = combined_plot_hd,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Key findings:
There is positive relationship between wood density and intercept but negative with slope of hdmod1 model.
Wood density has a significant impact on both the intercept and slope of the model.

## cdmod1

- Subset data for cdmod1
```{r}
cdmod1_data <- subset(ov2, Model == "cdmod1")
```

- Checking distribution of parameters
```{r}
# Histogram for Intercept
intercept_hist_cd <- ggplot(cdmod1_data, aes(x = Intercept)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
  labs(x = "Intercept", y = "Frequency", title = "Distribution of Intercept for cdmod1")

# Histogram for Slope
slope_hist_cd <- ggplot(cdmod1_data, aes(x = Slope)) +
  geom_histogram(binwidth = 0.1, fill = "lightgreen", color = "black") +
  labs(x = "Slope", y = "Frequency", title = "Distribution of Slope for cdmod1")

# Histogram for Wood Density
wd_hist_cd <- ggplot(cdmod1_data, aes(x = wd)) +
  geom_histogram(binwidth = 0.1, fill = "lightyellow", color = "black") +
  labs(x = "Wood Density", y = "Frequency", title = "Distribution of Wood Density for cdmod1")

# Arrange plots into a grid
combined_hist_cd <- gridExtra::grid.arrange(intercept_hist_cd, slope_hist_cd, wd_hist_cd, nrow = 1)

# Save the combined histogram
ggsave(
  filename = here("figs/lmer/cdmod1_parameter_distribution.png"),
  plot = combined_hist_cd,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Normality qq-plot
```{r}
# Normality QQ plot for Intercept
qq_plot_cd_intercept <- ggplot(cdmod1_data, aes(sample = Intercept)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Normal Q-Q Plot for Intercept")

# Normality QQ plot for Slope
qq_plot_cd_slope <- ggplot(cdmod1_data, aes(sample = Slope)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Normal Q-Q Plot for Slope")

# Normality QQ plot for Wood Density
qq_plot_cd_wd <- ggplot(cdmod1_data, aes(sample = wd)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Normal Q-Q Plot for Wood Density")

# Arrange plots into a grid
combined_qq_cd <- gridExtra::grid.arrange(qq_plot_cd_intercept, qq_plot_cd_slope, qq_plot_cd_wd, nrow = 1)

# Save the combined QQ plot
ggsave(
  filename = here("figs/lmer/cdmod1_parameter_qq_plot.png"),
  plot = combined_qq_cd,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Issues: Parameters of cdmod1_data do not follow normal distribution?

- Checking skewness
```{r}
# Calculate skewness for Intercept
skewness_intercept <- skewness(cdmod1_data$Intercept)
print(paste("Skewness of Intercept:", skewness_intercept))

# Calculate skewness for Slope
skewness_slope <- skewness(cdmod1_data$Slope)
print(paste("Skewness of Slope:", skewness_slope))

# Calculate skewness for Wood Density (wd)
skewness_wd <- skewness(cdmod1_data$wd)
print(paste("Skewness of Wood Density:", skewness_wd))
```

[1] "Skewness of Intercept: 0.537678950391731"
[1] "Skewness of Slope: -0.763657379988937"
[1] "Skewness of Wood Density: 0.512113500065508"

- Transforming data
```{r}
library(car)
cdmod1_data$Intercept.yj <- yjPower(cdmod1_data$Intercept, lambda = 0.42, jacobian.adjusted = FALSE)
cdmod1_data$Slope.yj <- yjPower(cdmod1_data$Slope,lambda = 2.4,  jacobian.adjusted = FALSE)
cdmod1_data$wd.ln <- log(cdmod1_data$wd)
```

```{r}
# Check skewness of 'Intercept.yj' and 'wd.ln'
skewness_intercept_yj <- skewness(cdmod1_data$Intercept.yj)
skewness_wd_ln <- skewness(cdmod1_data$wd.ln)
skewness_slope_yj <- skewness(cdmod1_data$Slope.yj)
# Print skewness values
print(paste("Skewness of Transformed Intercept (Yeo-Johnson):", skewness_intercept_yj))
print(paste("Skewness of Transformed Slope:", skewness_slope_yj))
print(paste("Skewness of Transformed wd (Natural Log):", skewness_wd_ln))
```


[1] "Skewness of Transformed Intercept (Yeo-Johnson): -0.000305219223815829"
[1] "Skewness of Transformed Slope: 0.00916408756428457"
[1] "Skewness of Transformed wd (Natural Log): -0.0021015611785854"


- Fitting second-level model
```{r}
i_cdmod1 <- lm(Intercept ~ wd.ln, data = cdmod1_data)
s_cdmod1 <- lm(Slope ~ wd.ln, data = cdmod1_data)
summary(i_cdmod1)
summary(s_cdmod1)
```

- Plot models
```{r}
# Scatter plot for Intercept vs. Wood Density
intercept_plot_cd <- ggplot(cdmod1_data, aes(x = wd.ln, y = Intercept)) +
  geom_point(color = "gray", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Intercept", title = "Intercept vs. Wood Density for cdmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Scatter plot for Slope vs. Wood Density
slope_plot_cd <- ggplot(cdmod1_data, aes(x = wd.ln, y = Slope)) +
  geom_point(color = "orange", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Slope", title = "Slope vs. Wood Density for cdmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Arrange plots into a grid
combined_plot_cd <- gridExtra::grid.arrange(intercept_plot_cd, slope_plot_cd, nrow = 1)

# Save the combined plot
ggsave(
  filename = here("figs/lmer/cdmod1_parameter_plots.png"),
  plot = combined_plot_cd,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Key findings:
There is positive relationship between wood density and intercept but negative with slope of cdmod1 model.
Wood density has a significant impact on both the intercept and slope of the model.

## dhcmod1

- Subset data for dhcmod1
```{r}
dhcmod1_data <- subset(ov2, Model == "dhcmod1")
```

- Checking distribution of parameters
```{r}
# Histogram for Intercept
intercept_hist_dhc <- ggplot(dhcmod1_data, aes(x = Intercept)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
  labs(x = "Intercept", y = "Frequency", title = "Distribution of Intercept for dhcmod1")

# Histogram for Slope
slope_hist_dhc <- ggplot(dhcmod1_data, aes(x = Slope)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
  labs(x = "Slope", y = "Frequency", title = "Distribution of Slope for dhcmod1")

# Histogram for Wood Density
wd_hist_dhc <- ggplot(dhcmod1_data, aes(x = wd)) +
  geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black") +
  labs(x = "Wood Density", y = "Frequency", title = "Distribution of Wood Density for dhcmod1")

# Arrange plots into a grid
combined_hist_dhc <- gridExtra::grid.arrange(intercept_hist_dhc, slope_hist_dhc, wd_hist_dhc, nrow = 1)

# Save the combined histogram
ggsave(
  filename = here("figs/lmer/dhcmod1_parameter_distribution.png"),
  plot = combined_hist_dhc,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Normality qq-plot

```{r}
# QQ Plot for Intercept
qq_plot_dhc_intercept <- ggplot(dhcmod1_data, aes(sample = Intercept)) +
  stat_qq() +
  stat_qq_line() +
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "QQ Plot for Intercept of dhcmod1")

# QQ Plot for Slope
qq_plot_dhc_slope <- ggplot(dhcmod1_data, aes(sample = Slope)) +
  stat_qq() +
  stat_qq_line() +
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "QQ Plot for Slope of dhcmod1")

# QQ Plot for Wood Density
qq_plot_dhc_wd <- ggplot(dhcmod1_data, aes(sample = wd)) +
  stat_qq() +
  stat_qq_line() +
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles", title = "QQ Plot for Wood Density of dhcmod1")

# Arrange plots into a grid
combined_qq_dhc <- gridExtra::grid.arrange(qq_plot_dhc_intercept, qq_plot_dhc_slope, qq_plot_dhc_wd, nrow = 1)

# Save the combined QQ plot
ggsave(
  filename = here("figs/lmer/dhcmod1_parameter_qq_plots.png"),
  plot = combined_qq_dhc,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Checking skewness
```{r}
# Check skewness of Intercept
skewness_intercept <- skewness(dhcmod1_data$Intercept)
print(paste("Skewness of Intercept:", skewness_intercept))

# Check skewness of Slope
skewness_slope <- skewness(dhcmod1_data$Slope)
print(paste("Skewness of Slope:", skewness_slope))

# Check skewness of Wood Density
skewness_wd <- skewness(dhcmod1_data$wd)
print(paste("Skewness of Wood Density:", skewness_wd))
```

Issues:
The varibles of dhcmod1_data do not follow normal distribution

[1] "Skewness of Intercept: -0.48944085463939"
[1] "Skewness of Slope: 0.392645198693742"
[1] "Skewness of Wood Density: 0.512113500065508"

- Transforming data

```{r}
dhcmod1_data$Intercept.yj <- yjPower(dhcmod1_data$Intercept, lambda = 1.85, jacobian.adjusted = FALSE)
dhcmod1_data$Slope.yj <- yjPower(dhcmod1_data$Slope,lambda = 0.000001,  jacobian.adjusted = FALSE)
dhcmod1_data$wd.ln <- log(dhcmod1_data$wd)
```

```{r}
# Check skewness of 'Intercept.yj' and 'wd.ln'
skewness_intercept_yj <- skewness(dhcmod1_data$Intercept.yj)
skewness_wd_ln <- skewness(dhcmod1_data$wd.ln)
skewness_slope_yj <- skewness(dhcmod1_data$Slope.yj)
# Print skewness values
print(paste("Skewness of Transformed Intercept (Yeo-Johnson):", skewness_intercept_yj))
print(paste("Skewness of Transformed Slope:", skewness_slope_yj))
print(paste("Skewness of Transformed wd (Natural Log):", skewness_wd_ln))
```

- Fitting second-level model
```{r}
i_dhcmod1 <- lm(Intercept ~ wd.ln, data = dhcmod1_data)
s_dhcmod1 <- lm(Slope ~ wd.ln, data = dhcmod1_data)
summary(i_dhcmod1)
summary(s_dhcmod1)
```

- Plot models
```{r}
# Scatter plot for Intercept vs. Wood Density
intercept_plot_dhc <- ggplot(dhcmod1_data, aes(x = wd.ln, y = Intercept)) +
  geom_point(color = "gray", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Intercept", title = "Intercept vs. Wood Density for dhcmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Scatter plot for Slope vs. Wood Density
slope_plot_dhc <- ggplot(dhcmod1_data, aes(x = wd.ln, y = Slope)) +
  geom_point(color = "orange", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", size = 1) +
  labs(x = "wd.ln", y = "Slope", title = "Slope vs. Wood Density for dhcmod1") +
  theme_minimal() +
  theme(plot.title = element_text(size = 14),
        axis.title = element_text(size = 12))

# Arrange plots into a grid
combined_plot_dhc <- gridExtra::grid.arrange(intercept_plot_dhc, slope_plot_dhc, nrow = 1)

# Save the combined plot
ggsave(
  filenam = here("figs/lmer/dhcmod1_parameter_plots.png"),
  plot = combined_plot_dhc,
  width = 12,
  height = 6,
  dpi = 120
)
```

- Key findings:
There is a negative relationship between wood density with both Intercept and  Slope of dhcmod1 model.
Wood density has a notable impact on both the intercept and slope of the dhcmod1 model.
