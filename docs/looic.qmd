---
title: "Comparing models"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/workspaces/tree-allometry")
```

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

# Load necessary libraries

```{r}
library(targets)
library(dplyr)
library(ggplot2)
library(flextable)
library(officer)
# Define and run the targets pipeline
# tar_make()
```

# Compare models using loo_tbl

```{r}
loo_tbl <- tar_read(loo_tbl)
loo_tbl
print(loo_tbl , n = Inf)

# Extract gMM1, PL1, and Weibull1 models
loo_tbl <- loo_tbl |>
  filter(grepl("gmm1|power_law1|weibull1", model))
print(loo_tbl)

# CR models
cr_models <- loo_tbl |>
  filter(grepl("_cr", model)) |>
  arrange(looic)

print(cr_models)

# H models
h_models <- loo_tbl |>
  filter(grepl("_h", model)) |>
  arrange(looic)

print(h_models)

# DBH models
dbh_models <- loo_tbl |>
  filter(grepl("dbh|dbh1|dbh2|dbh3", model)) |>
  arrange(looic)

# Print the filtered and sorted models
print(dbh_models)
```

# Function to calculate ΔLOOIC for a given table
```{r}
calculate_delta_looic <- function(df) {
  df <- df |>
    arrange(looic) |>
    mutate(ΔLOOIC = looic - min(looic))
  return(df)
}

# Calculate ΔLOOIC for CR models
cr_models_tbl <- loo_tbl |>
  filter(grepl("_cr", model)) |>
  mutate(Wood_Density = ifelse(grepl("nou", model), "Without", "With")) |>
  select(model, Wood_Density, elpd, p_loo, looic) |>
  calculate_delta_looic()

# Print the CR models table with ΔLOOIC
print(cr_models_tbl)

# Calculate ΔLOOIC for H models
h_models_tbl <- loo_tbl |>
  filter(grepl("_h", model)) |>
  mutate(Wood_Density = ifelse(grepl("nou", model), "Without", "With")) |>
  select(model, Wood_Density, elpd, p_loo, looic) |>
  calculate_delta_looic()

# Print the H models table with ΔLOOIC
print(h_models_tbl)

# Calculate ΔLOOIC for DBH models
dbh_models_tbl <- loo_tbl |>
  filter(grepl("dbh|dbh1|dbh2|dbh3", model)) |>
  mutate(Wood_Density = ifelse(grepl("nou", model), "Without", "With")) |>
  select(model, Wood_Density, elpd, p_loo, looic) |>
  calculate_delta_looic()

# Print the DBH models table with ΔLOOIC
print(dbh_models_tbl)

```

```{r}
# Define the custom format function for tables
format_table <- function(df, title) {
  formatted_df <- df |>
    rename(
      "Model" = model,
      "Wood Density" = Wood_Density,
      "ELPD" = elpd,
      "pLOO" = p_loo,
      "LOOIC" = looic,
      "ΔLOOIC" = ΔLOOIC
    ) |>
    mutate(across(c(ELPD, pLOO, LOOIC, `ΔLOOIC`), \(x) round(x, 2))) |>
    select(Model, `Wood Density`, ELPD, pLOO, LOOIC, `ΔLOOIC`) |>
    as.data.frame()
  
  # Print the table with a title
  print(paste0(title, "\n"))
  print(formatted_df)
  
  # Return the formatted dataframe
  return(formatted_df)
}

# Applying the function to CR, H, and DBH models
cr_models_tbl_formatted <- format_table(cr_models_tbl, "Crown Radius Models")
h_models_tbl_formatted <- format_table(h_models_tbl, "Height Models")
dbh_models_tbl_formatted <- format_table(dbh_models_tbl, "DBH Models")
```

# Power-law1, gMM1, Weibull1
```{r}
options(width = 100)
# Define the custom format function for tables, filtering specific models
format_table <- function(df, title) {
  # Filter the models based on specific types
  filtered_df <- df |>
    filter(grepl("power_law1|gmm1|weibull1", model, ignore.case = TRUE)) |>
    rename(
      "Model" = model,
      "Wood Density" = Wood_Density,
      "ELPD" = elpd,
      "pLOO" = p_loo,
      "LOOIC" = looic,
      "ΔLOOIC" = ΔLOOIC
    ) |>
    mutate(across(c(ELPD, pLOO, LOOIC, `ΔLOOIC`), \(x) round(x, 2))) |>
    select(Model, `Wood Density`, ELPD, pLOO, LOOIC, `ΔLOOIC`) |>
    as.data.frame()
  
  # Print the table with a title
  print(paste0(title, "\n"))
  print(filtered_df)
  
  # Return the formatted and filtered dataframe
  return(filtered_df)
}

# Applying the function to CR, H, and DBH models, filtering only the specified model types
cr_models_tbl_formatted <- format_table(cr_models_tbl, "Crown Radius Models")
h_models_tbl_formatted <- format_table(h_models_tbl, "Height Models")
dbh_models_tbl_formatted <- format_table(dbh_models_tbl, "DBH Models")
```

```{r}
# Combine all formatted tables into one dataframe
combined_tbl <- bind_rows(
  cr_models_tbl_formatted %>% mutate(Category = "Crown Radius"),
  h_models_tbl_formatted %>% mutate(Category = "Height"),
  dbh_models_tbl_formatted %>% mutate(Category = "DBH")
)

# Create a flextable from the combined dataframe
ft_combined <- flextable(combined_tbl)

# Customize the flextable appearance
ft_combined <- ft_combined |>
  merge_v(j = c("Category")) |>
  fix_border_issues() |>
  set_header_labels(
    Category = "Category",
    Model = "Model",
    Wood_Density = "Wood Density",
    ELPD = "ELPD",
    pLOO = "pLOO",
    LOOIC = "LOOIC",
    `ΔLOOIC` = "ΔLOOIC"
  )

# Print the combined flextable
ft_combined
```









# Changing the format (Model name)
```{r}
# Define the custom format function for tables with simplified model names
format_table <- function(df, title) {
  # Mapping of model types to simplified names
  model_map <- c(
    "power_law1" = "Power-law",
    "gmm1" = "gMM",
    "weibull1" = "Weibull"
  )
  
  # Replace model names with simplified names
  filtered_df <- df |>
    filter(grepl("power_law1|gmm1|weibull1", model, ignore.case = TRUE)) |>
    mutate(Model_Type = case_when(
      grepl("power_law1", model, ignore.case = TRUE) ~ "Power-law",
      grepl("gmm1", model, ignore.case = TRUE) ~ "gMM",
      grepl("weibull1", model, ignore.case = TRUE) ~ "Weibull"
    )) |>
    select(Model_Type, Wood_Density, elpd, p_loo, looic, ΔLOOIC) |>
    rename(
      "Model" = Model_Type,
      "ELPD" = elpd,
      "pLOO" = p_loo,
      "LOOIC" = looic,
      "ΔLOOIC" = ΔLOOIC
    ) |>
    mutate(across(c(ELPD, pLOO, LOOIC, `ΔLOOIC`), \(x) round(x, 2))) |>
    as.data.frame()
  
  # Print the table with a title
  print(paste0(title, "\n"))
  print(filtered_df)
  
  # Return the formatted and filtered dataframe
  return(filtered_df)
}

# Applying the function to CR, H, and DBH models with simplified names
cr_models_tbl_formatted <- format_table(cr_models_tbl, "Crown Radius Models")
h_models_tbl_formatted <- format_table(h_models_tbl, "Height Models")
dbh_models_tbl_formatted <- format_table(dbh_models_tbl, "DBH Models")
```

# Changing format of DBH model 
```{r}
library(dplyr)

# Define the custom format function for DBH models with specific functional forms
format_dbh_table <- function(df, title) {
  # Mapping of model types to detailed functional form descriptions
  model_description_map <- c(
    "dbh" = "DBH = a * CR^b * H^c",
    "dbh1" = "DBH = a * (CR * H)^b",
    "dbh2" = "DBH = a * CR^b",
    "dbh3" = "DBH = a * H^b"
  )
  
  # Extract the variable type from the model name and map to descriptions
  filtered_df <- df |>
    filter(grepl("power_law1", model, ignore.case = TRUE)) |>
    mutate(Model_Type = case_when(
      grepl("dbh1", model, ignore.case = TRUE) ~ model_description_map["dbh1"],
      grepl("dbh2", model, ignore.case = TRUE) ~ model_description_map["dbh2"],
      grepl("dbh3", model, ignore.case = TRUE) ~ model_description_map["dbh3"],
      TRUE ~ model_description_map["dbh"]
    )) |>
    select(Model_Type, Wood_Density, elpd, p_loo, looic, ΔLOOIC) |>
    rename(
      "Model" = Model_Type,
      "ELPD" = elpd,
      "pLOO" = p_loo,
      "LOOIC" = looic,
      "ΔLOOIC" = ΔLOOIC
    ) |>
    mutate(across(c(ELPD, pLOO, LOOIC, `ΔLOOIC`), \(x) round(x, 2))) |>
    as.data.frame()
  
  # Print the table with a title
  print(paste0(title, "\n"))
  print(filtered_df)
  
  # Return the formatted and filtered dataframe
  return(filtered_df)
}

# Applying the function to the DBH models with detailed descriptions
dbh_models_tbl_formatted <- format_dbh_table(dbh_models_tbl, "DBH Models")

options(width = 150)
dbh_models_tbl_formatted
```

# All models in 1 table 
```{r}
options(width = 500)
# Combining all formatted tables into one
all_models_combined <- bind_rows(
  cr_models_tbl_formatted |> mutate(Dependent_variable = "Crown Radius"),
  h_models_tbl_formatted |> mutate(Dependent_variable = "Height"),
  dbh_models_tbl_formatted |> mutate(Dependent_variable = "DBH")
)
# Print the combined table
print(all_models_combined)

```

# Assuming all_models_combined is already created and contains the combined data

```{r}

# Define a mapping of old model names to new simplified names
model_map <- c(
  "weibull1" = "Weibull",
  "gmm1" = "gMM",
  "power_law1" = "Power-law"
)

# Modify the 'Model' column to replace the names based on the mapping
all_models_combined$Model <- sapply(all_models_combined$Model, function(model) {
  for (pattern in names(model_map)) {
    if (grepl(pattern, model, ignore.case = TRUE)) {
      return(model_map[[pattern]])
    }
  }
  return(model)
})

# Reorder columns to move 'Dependent_variable' to the first column
all_models_combined <- all_models_combined |>
  select(Dependent_variable, everything())

# Print the modified dataframe
print(all_models_combined)

```

```{r}
# Define the function to create the combined table with formulas and sort from best to worst within each Dependent_Variable
create_combined_table <- function(cr_df, h_df, dbh_df) {
  # Define mappings for dependent variables, functional forms, and their formulas
  formula_map <- list(
    "Diameter at Breast Height" = list(
      "power_law1_dbh" = "DBH = a * CR^b * H^c",
      "power_law1_dbh1" = "DBH = a * (CR * H)^b",
      "power_law1_dbh2" = "DBH = a * CR^b",
      "power_law1_dbh3" = "DBH = a * H^b"
    )
  )
  
  # Combine all models into one dataframe and filter for specific model types
  combined_df <- bind_rows(
    cr_df |> mutate(Dependent_Variable = "Crown Radius"),
    h_df |> mutate(Dependent_Variable = "Height"),
    dbh_df |> mutate(Dependent_Variable = "Diameter at Breast Height")
  ) |>
    filter(grepl("power_law1|gmm1|weibull1", model, ignore.case = TRUE)) |>
    mutate(
      Functional_Form = case_when(
        grepl("gmm1", model, ignore.case = TRUE) ~ "gMM",
        grepl("weibull1", model, ignore.case = TRUE) ~ "Weibull",
        grepl("power_law1", model, ignore.case = TRUE) ~ "Power-law"
      ),
      Formula = case_when(
        Dependent_Variable == "Diameter at Breast Height" & grepl("power_law1_dbh", model, ignore.case = TRUE) ~ formula_map[["Diameter at Breast Height"]][["power_law1_dbh"]],
        Dependent_Variable == "Diameter at Breast Height" & grepl("power_law1_dbh1", model, ignore.case = TRUE) ~ formula_map[["Diameter at Breast Height"]][["power_law1_dbh1"]],
        Dependent_Variable == "Diameter at Breast Height" & grepl("power_law1_dbh2", model, ignore.case = TRUE) ~ formula_map[["Diameter at Breast Height"]][["power_law1_dbh2"]],
        Dependent_Variable == "Diameter at Breast Height" & grepl("power_law1_dbh3", model, ignore.case = TRUE) ~ formula_map[["Diameter at Breast Height"]][["power_law1_dbh3"]],
        TRUE ~ NA_character_
      ),
      Species_Level_Predictor = ifelse(grepl("nou", model, ignore.case = TRUE), "Without", "With")
    ) |>
    rename(
      "ELPD" = elpd,
      "pLOO" = p_loo,
      "LOOIC" = looic,
      "ΔLOOIC" = ΔLOOIC
    ) |>
    select(Dependent_Variable, Formula, Functional_Form, Species_Level_Predictor, ELPD, pLOO, LOOIC, ΔLOOIC) %>%
    mutate(across(c(ELPD, pLOO, LOOIC, `ΔLOOIC`), \(x) round(x, 2))) |>
    arrange(Dependent_Variable, LOOIC)
  
  # Move DBH to the end
  dbh_rows <- combined_df[combined_df$Dependent_Variable == "Diameter at Breast Height", ]
  other_rows <- combined_df[combined_df$Dependent_Variable != "Diameter at Breast Height", ]
  combined_df <- bind_rows(other_rows, dbh_rows)
  
  return(combined_df)
}

# Create the combined table
combined_models_tbl <- create_combined_table(cr_models_tbl, h_models_tbl, dbh_models_tbl)

# Create a flextable
ft <- flextable(combined_models_tbl)

# Merge cells for common Dependent_Variable
ft <- ft |>
  merge_v(j = c("Dependent_Variable")) |>
  fix_border_issues() |>
  set_header_labels(
    Dependent_Variable = "Dependent Variable",
    Formula = "Formula",
    Functional_Form = "Functional Form",
    Species_Level_Predictor = "Species-Level Predictor",
    ELPD = "ELPD",
    pLOO = "pLOO",
    LOOIC = "LOOIC",
    `ΔLOOIC` = "ΔLOOIC"
  )

# Print the flextable
ft
```