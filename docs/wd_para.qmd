---
title: "Relationship between species-specific H/CR allometry parameters with wood density in the best-fit hierarchical model (Weibull function)"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "/workspaces/tree-allometry")
```

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

# Load necessary libraries
```{r}
library(targets)
library(dplyr)
library(ggplot2)
library(stringr)
library(patchwork)
```

# Wood density data preparation
```{r}
options(width = 150)
tallo_wd_df_200 <- tar_read(tallo_wd_df_200)

data2 <- tallo_wd_df_200 |>
    filter(!is.na(dbh)) |>
    filter(!is.na(cr)) |>
    filter(!is.na(h)) |>
    filter(!is.na(wd_s))

wd_df <- data2 |>
    group_by(sp) |>
    summarize(wd = mean(wd)) |>
    mutate(wd_s = scale(wd) |> as.numeric())

wd_df
dim(wd_df)
wd_df <- wd_df |>
  mutate(sp_id = 1:n())

head(wd_df)
dim(wd_df)
```

# H-DBH

## Extract a, b, k

```{r}
# Load the necessary data
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
wd_s <- stan_data_nlr_h$u[, 2]
wb1_h_summary <- tar_read(fit_nlr_summary_weibull1_h)
wb1_h_summary

# Extract the beta parameters (species-specific) with 95% CI
beta <- wb1_h_summary |> filter(grepl("beta\\[", variable))

# Extract the beta parameters (species-specific) with 95% CI
beta <- wb1_h_summary |> filter(grepl("beta\\[", variable))

# Calculate mean and 90% CI for a, b, k
a_mean <- exp(beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q50))
a_lower <- exp(beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q2.5))
a_upper <- exp(beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q97.5))

b_mean <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q50)
b_lower <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q2.5)
b_upper <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q97.5)

k_mean <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q50)
k_lower <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q2.5)
k_upper <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q97.5)

# Extract community-level parameters and calculate fitted values
gamma <- wb1_h_summary |> filter(grepl("gamma", variable))
gamma

# Correct variable names
gamma_log_a_intercept_median <- gamma |> filter(variable == "gamma[1,1]") |> pull(q50)
gamma_log_a_wd_median <- gamma |> filter(variable == "gamma[2,1]") |> pull(q50)
gamma_b_intercept_median <- gamma |> filter(variable == "gamma[1,2]") |> pull(q50)
gamma_b_wd_median <- gamma |> filter(variable == "gamma[2,2]") |> pull(q50)
gamma_k_intercept_median <- gamma |> filter(variable == "gamma[1,3]") |> pull(q50)
gamma_k_wd_median <- gamma |> filter(variable == "gamma[2,3]") |> pull(q50)

# Compute community fitted values using median (q50)
log_community_fitted_a_median <- gamma_log_a_intercept_median + gamma_log_a_wd_median * wd_s
community_fitted_a_median <- exp(log_community_fitted_a_median)

log_community_fitted_b_median <- gamma_b_intercept_median + gamma_b_wd_median * wd_s
community_fitted_b_median <- exp(log_community_fitted_b_median)

log_community_fitted_k_median <- gamma_k_intercept_median + gamma_k_wd_median * wd_s
community_fitted_k_median <- exp(log_community_fitted_k_median)

# Calculate 90% credible intervals for community fitted values
gamma_log_a_intercept_lower <- gamma |> filter(variable == "gamma[1,1]") |> pull(q5)
gamma_log_a_wd_lower <- gamma |> filter(variable == "gamma[2,1]") |> pull(q5)

gamma_log_a_intercept_upper <- gamma |> filter(variable == "gamma[1,1]") |> pull(q95)
gamma_log_a_wd_upper <- gamma |> filter(variable == "gamma[2,1]") |> pull(q95)

gamma_b_intercept_lower <- gamma |> filter(variable == "gamma[1,2]") |> pull(q5)
gamma_b_wd_lower <- gamma |> filter(variable == "gamma[2,2]") |> pull(q5)

gamma_b_intercept_upper <- gamma |> filter(variable == "gamma[1,2]") |> pull(q95)
gamma_b_wd_upper <- gamma |> filter(variable == "gamma[2,2]") |> pull(q95)

gamma_k_intercept_lower <- gamma |> filter(variable == "gamma[1,3]") |> pull(q5)
gamma_k_wd_lower <- gamma |> filter(variable == "gamma[2,3]") |> pull(q5)

gamma_k_intercept_upper <- gamma |> filter(variable == "gamma[1,3]") |> pull(q95)
gamma_k_wd_upper <- gamma |> filter(variable == "gamma[2,3]") |> pull(q95)

# Compute lower and upper bounds for community fitted values
log_log_community_fitted_a_lower <- gamma_log_a_intercept_lower + gamma_log_a_wd_lower * wd_s
log_log_community_fitted_a_upper <- gamma_log_a_intercept_upper + gamma_log_a_wd_upper * wd_s
community_fitted_a_lower <- exp(log_log_community_fitted_a_lower)
community_fitted_a_upper <- exp(log_log_community_fitted_a_upper)
log_community_fitted_b_lower <- gamma_b_intercept_lower + gamma_b_wd_lower * wd_s
log_community_fitted_b_upper <- gamma_b_intercept_upper + gamma_b_wd_upper * wd_s
community_fitted_b_lower <- exp(log_community_fitted_b_lower)
community_fitted_b_upper <- exp(log_community_fitted_b_upper)
log_community_fitted_k_lower <- gamma_k_intercept_lower + gamma_k_wd_lower * wd_s
log_community_fitted_k_upper <- gamma_k_intercept_upper + gamma_k_wd_upper * wd_s
community_fitted_k_lower <- exp(log_community_fitted_k_lower)
community_fitted_k_upper <- exp(log_community_fitted_k_upper)

# Prepare data for plotting
sp_id <- as.factor(unique(stan_data_nlr_h$jj))
h_wd_data <- data.frame(
  sp_id = sp_id,
  wd_s = wd_s,
  a_mean = a_mean,
  a_lower = a_lower,
  a_upper = a_upper,
  b_mean = b_mean,
  b_lower = b_lower,
  b_upper = b_upper,
  k_mean = k_mean,
  k_lower = k_lower,
  k_upper = k_upper,
  community_fitted_a_median = community_fitted_a_median,
  community_fitted_b_median = community_fitted_b_median,
  community_fitted_k_median = community_fitted_k_median,
  community_fitted_a_lower = community_fitted_a_lower,
  community_fitted_a_upper = community_fitted_a_upper,
  community_fitted_b_lower = community_fitted_b_lower,
  community_fitted_b_upper = community_fitted_b_upper,
  community_fitted_k_lower = community_fitted_k_lower,
  community_fitted_k_upper = community_fitted_k_upper
)

head(h_wd_data)

h_wd_data$sp_id <- as.integer(as.character(h_wd_data$sp_id))
h_wd_data <- inner_join(h_wd_data, wd_df, by = "sp_id")
head(h_wd_data)
```

## Plotting 

```{r}
plot_h_a <- ggplot(h_wd_data, aes(x = wd, y = a_mean)) +
  geom_errorbar(aes(ymin = a_lower, ymax = a_upper), color = "lightgrey", width = 0.0001) +
  geom_point(color = "darkgrey", size = 1) +
  geom_ribbon(aes(ymin = community_fitted_a_lower, ymax = community_fitted_a_upper), fill = "grey80", alpha = 0.5) +
  geom_line(aes(y = community_fitted_a_median), color = "black", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Intercept, a") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )

plot_h_b <- ggplot(h_wd_data, aes(x = wd, y = b_mean)) +
  geom_errorbar(aes(ymin = b_lower, ymax = b_upper), color = "orange", width = 0.0001) +
  geom_point(color = "orange", size = 1) +
  geom_ribbon(aes(ymin = community_fitted_b_lower, ymax = community_fitted_b_upper), fill = "orange", alpha = 0.5) +
  geom_line(aes(y = community_fitted_b_median), color = "darkorange", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Exponent, b") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )

plot_h_k <- ggplot(h_wd_data, aes(x = wd, y = k_mean)) +
  geom_errorbar(aes(ymin = k_lower, ymax = k_upper), color = "blue", width = 0.0001) +
  geom_point(color = "blue", size = 1) +
  # geom_ribbon(aes(ymin = community_fitted_k_lower, ymax = community_fitted_k_upper), fill = "lightblue", alpha = 0.5) +
  geom_line(aes(y = community_fitted_k_median), color = "darkblue", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Inflection parameter, k") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )


# Print plots
plot_h_a
plot_h_b
plot_h_k



```


# CR-DBH

## Extract a, b, k
```{r}
# Load the necessary data
stan_data_nlr_cr <- tar_read(stan_data_nlr_cr)
str(stan_data_nlr_cr)

wd_s <- stan_data_nlr_cr$u[, 2]
wb1_cr_summary <- tar_read(fit_nlr_summary_weibull1_cr)
wb1_cr_summary

# Extract the beta parameters (species-specific) with 90% CI
beta <- wb1_cr_summary |> filter(grepl("beta\\[", variable))
beta

# Calculate mean and 90% CI for a, b, k
a_mean <- exp(beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q50))
a_lower <- exp(beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q5))
a_upper <- exp(beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q95))

b_mean <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q50)
b_lower <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q5)
b_upper <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q95)

k_mean <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q50)
k_lower <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q5)
k_upper <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q95)

# Extract community-level parameters and calculate fitted values
gamma <- wb1_cr_summary |> filter(grepl("gamma", variable))

gamma

gamma_log_a_intercept <- gamma |> filter(variable == "gamma[1,1]") |> pull(q50)
gamma_log_a_wd <- gamma |> filter(variable == "gamma[2,1]") |> pull(q50)
gamma_b_intercept <- gamma |> filter(variable == "gamma[1,2]") |> pull(q50)
gamma_b_wd <- gamma |> filter(variable == "gamma[2,2]") |> pull(q50)
gamma_k_intercept <- gamma |> filter(variable == "gamma[1,3]") |> pull(q50)
gamma_k_wd <- gamma |> filter(variable == "gamma[2,3]") |> pull(q50)

# Compute community fitted values
log_log_community_fitted_a <- gamma_log_a_intercept + gamma_log_a_wd * wd_s
community_fitted_a <- exp(exp(log_log_community_fitted_a))

log_community_fitted_b <- gamma_b_intercept + gamma_b_wd * wd_s
community_fitted_b <- exp(log_community_fitted_b)
log_community_fitted_k <- gamma_k_intercept + gamma_k_wd * wd_s
community_fitted_k <- exp(log_community_fitted_k)

# Calculate 90% credible intervals for community fitted values
gamma_log_a_intercept_lower <- gamma |> filter(variable == "gamma[1,1]") |> pull(q5)
gamma_log_a_wd_lower <- gamma |> filter(variable == "gamma[2,1]") |> pull(q5)

gamma_log_a_intercept_upper <- gamma |> filter(variable == "gamma[1,1]") |> pull(q95)
gamma_log_a_wd_upper <- gamma |> filter(variable == "gamma[2,1]") |> pull(q95)

gamma_b_intercept_lower <- gamma |> filter(variable == "gamma[1,2]") |> pull(q5)
gamma_b_wd_lower <- gamma |> filter(variable == "gamma[2,2]") |> pull(q5)

gamma_b_intercept_upper <- gamma |> filter(variable == "gamma[1,2]") |> pull(q95)
gamma_b_wd_upper <- gamma |> filter(variable == "gamma[2,2]") |> pull(q95)

gamma_k_intercept_lower <- gamma |> filter(variable == "gamma[1,3]") |> pull(q5)
gamma_k_wd_lower <- gamma |> filter(variable == "gamma[2,3]") |> pull(q5)

gamma_k_intercept_upper <- gamma |> filter(variable == "gamma[1,3]") |> pull(q95)
gamma_k_wd_upper <- gamma |> filter(variable == "gamma[2,3]") |> pull(q95)

# Compute lower and upper bounds for community fitted values
log_log_community_fitted_a_lower <- gamma_log_a_intercept_lower + gamma_log_a_wd_lower * wd_s
log_log_community_fitted_a_upper <- gamma_log_a_intercept_upper + gamma_log_a_wd_upper * wd_s
community_fitted_a_lower <- exp(exp(log_log_community_fitted_a_lower))
community_fitted_a_upper <- exp(exp(log_log_community_fitted_a_upper))
log_community_fitted_b_lower <- gamma_b_intercept_lower + gamma_b_wd_lower * wd_s
log_community_fitted_b_upper <- gamma_b_intercept_upper + gamma_b_wd_upper * wd_s
community_fitted_b_lower <- exp(log_community_fitted_b_lower)
community_fitted_b_upper <- exp(log_community_fitted_b_upper)
log_community_fitted_k_lower <- gamma_k_intercept_lower + gamma_k_wd_lower * wd_s
log_community_fitted_k_upper <- gamma_k_intercept_upper + gamma_k_wd_upper * wd_s
community_fitted_k_lower <- exp(log_community_fitted_k_lower)
community_fitted_k_upper <- exp(log_community_fitted_k_upper)

# Prepare data for plotting
sp_id <- as.factor(unique(stan_data_nlr_cr$jj))
cr_wd_data <- data.frame(
  sp_id = sp_id,
  wd_s = wd_s,
  a_mean = a_mean,
  a_lower = a_lower,
  a_upper = a_upper,
  b_mean = b_mean,
  b_lower = b_lower,
  b_upper = b_upper,
  k_mean = k_mean,
  k_lower = k_lower,
  k_upper = k_upper,
  community_fitted_a = community_fitted_a,
  community_fitted_b = community_fitted_b,
  community_fitted_k = community_fitted_k,
  community_fitted_a_lower = community_fitted_a_lower,
  community_fitted_a_upper = community_fitted_a_upper,
  community_fitted_b_lower = community_fitted_b_lower,
  community_fitted_b_upper = community_fitted_b_upper,
  community_fitted_k_lower = community_fitted_k_lower,
  community_fitted_k_upper = community_fitted_k_upper
)
head(cr_wd_data)

# Join with wood density data
cr_wd_data$sp_id <- as.integer(as.character(cr_wd_data$sp_id))
cr_wd_data <- inner_join(cr_wd_data, wd_df, by = "sp_id")
head(cr_wd_data)

```

## Plotting

```{r}
plot_cr_a <- ggplot(cr_wd_data, aes(x = wd, y = a_mean)) +
  geom_errorbar(aes(ymin = a_lower, ymax = a_upper), color = "lightgrey", width = 0.0001) +
  geom_point(color = "darkgrey", size = 1) +
  # geom_ribbon(aes(ymin = community_fitted_a_lower, ymax = community_fitted_a_upper), fill = "grey80", alpha = 0.5) +
  geom_line(aes(y = community_fitted_a), color = "black", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Intercept, a") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )

plot_cr_b <- ggplot(cr_wd_data, aes(x = wd, y = b_mean)) +
  geom_errorbar(aes(ymin = b_lower, ymax = b_upper), color = "orange", width = 0.0001) +
  geom_point(color = "orange", size = 1) +
  # geom_ribbon(aes(ymin = community_fitted_b_lower, ymax = community_fitted_b_upper), fill = "orange", alpha = 0.5) +
  geom_point(color = "orange", size = 2) +
  geom_line(aes(y = community_fitted_b), color = "darkorange", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Exponent, b") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )

plot_cr_k <- ggplot(cr_wd_data, aes(x = wd, y = k_mean)) +
  geom_errorbar(aes(ymin = k_lower, ymax = k_upper), color = "blue", width = 0.0001) +
  geom_point(color = "blue", size = 1) +
  # geom_ribbon(aes(ymin = community_fitted_k_lower, ymax = community_fitted_k_upper), fill = "lightblue", alpha = 0.5) +
  geom_line(aes(y = community_fitted_k), color = "darkblue", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Inflection parameter, k") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )

# Print plots
plot_cr_a
plot_cr_b
plot_cr_k
```





## Combine the figures

```{r}

wd_plots <- (plot_h_a + labs(x = NULL, tag = "(a)") |
                   plot_h_b + labs(x = NULL, tag = "(b)") |
                   plot_h_k + labs(x = NULL, tag = "(c)")) / 
                  (plot_cr_a + labs(tag = "(d)") |
                   plot_cr_b + labs(tag = "(e)") |
                   plot_cr_k + labs(tag = "(f)")) +
  plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)"))) &
  theme(plot.tag = element_text(face = "bold"))

wd_plots

ggsave("wd_para_plot.png", plot = wd_plots, width = 8, height = 6, dpi = 300, bg = "white")

wd_plots <- (plot_h_a + labs(x = NULL, tag = "(a)") |
                   plot_h_b + labs(x = NULL, tag = "(b)") |
                   plot_h_k + labs(x = NULL, tag = "(c)")) / 
                  (plot_cr_a + labs(tag = "(d)") |
                   plot_cr_b + labs(tag = "(e)") |
                   plot_cr_k + labs(tag = "(f)")) +
  plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)"))) &
  theme(
    plot.tag = element_text(face = "bold", size = 28),  # Increase tag size
    axis.title.x = element_text(size = 24),             # Increase x-axis title size
    axis.title.y = element_text(size = 24),             # Increase y-axis title size
    axis.text.x = element_text(size = 24),              # Increase x-axis number size
    axis.text.y = element_text(size = 24)               # Increase y-axis number size
  )

wd_plots

# Save the plot with the updated theme and larger dimensions
ggsave("wd_para_plot_large_axes.png", plot = wd_plots, width = 28, height = 18, dpi = 300, bg = "white")


# Combine the top row of plots without removing x-axis labels
wd_plots_abc <- (plot_h_a + labs(tag = "(a)") |
                 plot_h_b + labs(tag = "(b)") |
                 plot_h_k + labs(tag = "(c)")) +
  plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)"))) &
  theme(
    plot.tag = element_text(face = "bold", size = 28), 
    axis.title.x = element_text(size = 28),           
    axis.title.y = element_text(size = 28),           
    axis.text.x = element_text(size = 24),            
    axis.text.y = element_text(size = 24)             
  )

# Save the top row as a separate figure
ggsave("wd_para_plot_abc.png", plot = wd_plots_abc, width = 26, height = 9, dpi = 300, bg = "white")

# Combine the bottom row of plots
wd_plots_def <- (plot_cr_a + labs(tag = "(d)") |
                 plot_cr_b + labs(tag = "(e)") |
                 plot_cr_k + labs(tag = "(f)")) +
  plot_annotation(tag_levels = list(c("(d)", "(e)", "(f)"))) &
  theme(
    plot.tag = element_text(face = "bold", size = 28), 
    axis.title.x = element_text(size = 28),           
    axis.title.y = element_text(size = 28),           
    axis.text.x = element_text(size = 24),            
    axis.text.y = element_text(size = 24)             
  )

# Save the bottom row as a separate figure
ggsave("wd_para_plot_def.png", plot = wd_plots_def, width = 26, height = 9, dpi = 300, bg = "white")
```



# CR-DBH (Power-law)

# Load necessary libraries

```{r}
library(targets)
library(dplyr)
library(ggplot2)
library(stringr)
library(patchwork)
```


# Wood density data preparation

```{r}
options(width = 150)
tallo_wd_df_200 <- tar_read(tallo_wd_df_200)

data2 <- tallo_wd_df_200 |>
    filter(!is.na(dbh)) |>
    filter(!is.na(cr)) |>
    filter(!is.na(h)) |>
    filter(!is.na(wd_s))

wd_df <- data2 |>
    group_by(sp) |>
    summarize(wd = mean(wd)) |>
    mutate(wd_s = scale(wd) |> as.numeric())

wd_df
dim(wd_df)
wd_df <- wd_df |>
  mutate(sp_id = 1:n())

head(wd_df)
dim(wd_df)
```


## Extract a, b

```{r}
# Load the necessary data
stan_data_lr_cr <- tar_read(stan_data_lr_cr)
str(stan_data_lr_cr)

wd_s <- stan_data_lr_cr$u[, 2]

pl_cr_summary <- tar_read(fit_lr2_summary_power_law1_cr)
pl_cr_summary

# Extract the beta parameters (species-specific) with 95% CI
beta <- pl_cr_summary |> filter(grepl("beta\\[", variable))
beta

# Calculate mean and 90% CI for a, b, k
a_median <- beta |> filter(str_detect(variable, "beta\\[1,")) |> pull(q50)
a_lower <- beta |> filter(str_detect(variable, "beta\\[1,")) |> pull(q2.5)
a_upper <- beta |> filter(str_detect(variable, "beta\\[1,")) |> pull(q97.5)

b_median <- beta |> filter(str_detect(variable, "beta\\[2,")) |> pull(q50)
b_lower <- beta |> filter(str_detect(variable, "beta\\[2,")) |> pull(q2.5)
b_upper <- beta |> filter(str_detect(variable, "beta\\[2,")) |> pull(q97.5)

# Extract community-level parameters and calculate fitted values
gamma <- pl_cr_summary |> filter(grepl("gamma", variable))

gamma_log_a_intercept <- gamma |> filter(variable == "gamma[1,1]") |> pull(q50)
gamma_a_slope_wd <- gamma |> filter(variable == "gamma[1,2]") |> pull(q50)

gamma_b_intercept <- gamma |> filter(variable == "gamma[2,1]") |> pull(q50)
gamma_b_wd <- gamma |> filter(variable == "gamma[2,2]") |> pull(q50)

# Compute community fitted values
community_fitted_log_a <- gamma_log_a_intercept + gamma_a_slope_wd * wd_s
community_fitted_a <- exp(community_fitted_log_a)

community_fitted_b <- gamma_b_intercept + gamma_b_wd * wd_s

# Calculate 95% credible intervals for community fitted values
gamma_log_a_intercept_lower <- gamma |> filter(variable == "gamma[1,1]") |> pull(q2.5)
gamma_log_a_wd_lower <- gamma |> filter(variable == "gamma[1,2]") |> pull(q2.5)

gamma_log_a_intercept_upper <- gamma |> filter(variable == "gamma[1,1]") |> pull(q97.5)
gamma_log_a_wd_upper <- gamma |> filter(variable == "gamma[1,2]") |> pull(q97.5)

gamma_b_intercept_lower <- gamma |> filter(variable == "gamma[2,1]") |> pull(q2.5)
gamma_b_wd_lower <- gamma |> filter(variable == "gamma[2,2]") |> pull(q97.5)

gamma_b_intercept_upper <- gamma |> filter(variable == "gamma[1,2]") |> pull(q97.5)
gamma_b_wd_upper <- gamma |> filter(variable == "gamma[2,2]") |> pull(q97.5)

# Compute lower and upper bounds for community fitted values
# log_community_fitted_a_lower <- gamma_log_a_intercept_lower + gamma_log_a_wd_lower * wd_s
# log_community_fitted_a_upper <- gamma_log_a_intercept_upper + gamma_log_a_wd_upper * wd_s

# community_fitted_a_lower <- exp(log_community_fitted_a_lower)
# community_fitted_a_upper <- exp(log_community_fitted_a_upper)

community_fitted_a_lower <- gamma_log_a_intercept_lower + gamma_log_a_wd_lower * wd_s
community_fitted_a_upper <- gamma_log_a_intercept_upper + gamma_log_a_wd_upper * wd_s

# community_fitted_a_lower <- exp(log_community_fitted_a_lower)
# community_fitted_a_upper <- exp(log_community_fitted_a_upper)


community_fitted_b_lower <- gamma_b_intercept_lower + gamma_b_wd_lower * wd_s
community_fitted_b_upper <- gamma_b_intercept_upper + gamma_b_wd_upper * wd_s


# Prepare data for plotting
sp_id <- as.factor(unique(stan_data_lr_cr$jj))
cr_wd_data <- data.frame(
  sp_id = sp_id,
  wd_s = wd_s,
  a_median = a_median,
  a_lower = a_lower,
  a_upper = a_upper,
  b_median = b_median,
  b_lower = b_lower,
  b_upper = b_upper,
  community_fitted_a = community_fitted_a,
  community_fitted_b = community_fitted_b,
  community_fitted_a_lower = community_fitted_a_lower,
  community_fitted_a_upper = community_fitted_a_upper,
  community_fitted_b_lower = community_fitted_b_lower,
  community_fitted_b_upper = community_fitted_b_upper
)
head(cr_wd_data)

# Join with wood density data
cr_wd_data$sp_id <- as.integer(as.character(cr_wd_data$sp_id))
cr_wd_data <- inner_join(cr_wd_data, wd_df, by = "sp_id")
head(cr_wd_data)

```

## Plotting

```{r}
plot_cr_a <- ggplot(cr_wd_data, aes(x = wd, y = a_median)) +
  geom_errorbar(aes(ymin = a_lower, ymax = a_upper), color = "lightgrey", width = 0.0001) +
  geom_point(color = "darkgrey", size = 1) +
  geom_ribbon(aes(ymin = community_fitted_a_lower, ymax = community_fitted_a_upper), fill = "grey80", alpha = 0.5) +
  geom_line(aes(y = community_fitted_a), color = "black", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Amplitude parameter, a") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )

plot_cr_b <- ggplot(cr_wd_data, aes(x = wd, y = b_median)) +
  geom_errorbar(aes(ymin = b_lower, ymax = b_upper), color = "orange", width = 0.0001) +
  geom_point(color = "orange", size = 1) +
  # geom_ribbon(aes(ymin = community_fitted_b_lower, ymax = community_fitted_b_upper), fill = "orange", alpha = 0.5) +
  geom_point(color = "orange", size = 2) +
  geom_line(aes(y = community_fitted_b), color = "darkorange", linewidth = 1.2) +
  labs(x = "Wood Density (g cm⁻³)", y = "Exponent, b") +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5)
  )



# Print plots
plot_cr_a
plot_cr_b
```


# Updating the code

```{r}
library(targets)
library(dplyr)
library(ggplot2)
library(stringr)
library(patchwork)
library(Rmpfr)
```


# Wood density data preparation
```{r}
options(width = 150)
tallo_wd_df_200 <- tar_read(tallo_wd_df_200)

data2 <- tallo_wd_df_200 |>
    filter(!is.na(dbh)) |>
    filter(!is.na(cr)) |>
    filter(!is.na(h)) |>
    filter(!is.na(wd_s))

wd_df <- data2 |>
    group_by(sp) |>
    summarize(wd = mean(wd)) |>
    mutate(wd_s = scale(wd) |> as.numeric())

wd_df
dim(wd_df)
wd_df <- wd_df |>
  mutate(sp_id = 1:n())

head(wd_df)
dim(wd_df)
```

```{r}
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
str(stan_data_nlr_h)
wd_s <- stan_data_nlr_h$u[, 2]
wb1_h_summary <- tar_read(fit_nlr_summary_weibull1_h)
wb1_h_summary


wb1_h <- tar_read(fit_nlr_draws_weibull1_h)
wb1_h

# Extract the necessary variables from the wb1_h_summary
gamma_1_1 <- wb1_h_summary |> filter(variable == "gamma[1,1]") |> pull(mean)
gamma_2_1 <- wb1_h_summary |> filter(variable == "gamma[2,1]") |> pull(mean)
gamma_1_2 <- wb1_h_summary |> filter(variable == "gamma[1,2]") |> pull(mean)
gamma_2_2 <- wb1_h_summary |> filter(variable == "gamma[2,2]") |> pull(mean)
gamma_1_3 <- wb1_h_summary |> filter(variable == "gamma[1,3]") |> pull(mean)
gamma_2_3 <- wb1_h_summary |> filter(variable == "gamma[2,3]") |> pull(mean)

# Compute the predicted values using these gammas
pred_a <- exp(gamma_1_1 + gamma_2_1 * wd_s)
pred_b <- gamma_1_2 + gamma_2_2 * wd_s
pred_k <- gamma_1_3 + gamma_2_3 * wd_s

# Combine into a matrix for easier manipulation
pred_matrix <- cbind(pred_a, pred_b, pred_k)


head(pred_matrix)

for (n in 1:length(predicted_log_y)) {
  predicted_log_y[n] <- pred_a[stan_data_nlr_h$jj[n]] + 
                        log1mexp(-pred_b[stan_data_nlr_h$jj[n]] * 
                        (stan_data_nlr_h$x[n] ^ pred_k[stan_data_nlr_h$jj[n]]))
}

# Prepare data for plotting
h_wd_data <- data.frame(
  sp_id = stan_data_nlr_h$jj,  # species ID for each observation
  wd_s = wd_s[stan_data_nlr_h$jj],  # wood density corresponding to each observation's species
  predicted_log_y = predicted_log_y,
  observed_log_y = stan_data_nlr_h$log_y
)

# Check the data
head(h_wd_data)
```




# REVISING

```{r}
library(targets)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(patchwork)
library(cowplot)
```


# Wood density data preparation

```{r}
options(width = 150)
tallo_wd_df_200 <- tar_read(tallo_wd_df_200)

data2 <- tallo_wd_df_200 |>
  filter(!is.na(dbh)) |>
  filter(!is.na(cr)) |>
  filter(!is.na(h)) |>
  filter(!is.na(wd_s))

wd_df <- data2 |>
  group_by(sp) |>
  summarize(wd = mean(wd)) |>
  mutate(wd_s = scale(wd) |> as.numeric())

wd_df <- wd_df |>
  mutate(sp_id = 1:n())

head(wd_df)
```

```{r}
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
str(stan_data_nlr_h)
wd_s <- stan_data_nlr_h$u[, 2]
length(wd_s)

wb1_h <- tar_read(fit_nlr_draws_weibull1_h)
wb1_h

gamma_params <- wb1_h |>
  select(starts_with("gamma"))
gamma_params

beta_params <- wb1_h |>
  select(starts_with("beta["))
beta_params
```


```{r}
# Step 1: Reshape the beta_params tibble into long format to separate the parameters
beta_long <- beta_params |>
  pivot_longer(
    cols = everything(),
    names_to = c("species", "parameter"),
    names_pattern = "beta\\[(\\d+),(\\d+)\\]",
    names_transform = list(species = as.integer, parameter = as.integer),
    values_to = "value"
  ) |>
  mutate(parameter = case_when(
    parameter == 1 ~ "log_a",
    parameter == 2 ~ "b",
    parameter == 3 ~ "k"
  ),
  value = log(value))  # Log-transform the beta values to match the scale of gamma

# Step 2: Join with wood density data
# We join the reshaped beta parameters with the wood density (wd_s) information
plot_data <- beta_long |>
  left_join(wd_df, by = c("species" = "sp_id"))
plot_data

# Step 3: Summarize the posterior distributions for plotting
summary_stats <- plot_data |>
  group_by(species, parameter, wd_s) |>
  summarize(
    median = median(value),
    lower = quantile(value, 0.025),  # 2.5th percentile for lower bound of 95% CI
    upper = quantile(value, 0.975),  # 97.5th percentile for upper bound of 95% CI
    .groups = "drop"
  )

# Step 4: Generate the "pile of lines" plot using gamma parameters
gamma_log_a <- gamma_params |>
  select(`gamma[1,1]`, `gamma[2,1]`)

wd_seq <- seq(min(wd_df$wd_s), max(wd_df$wd_s), length.out = 100)

lines_data <- do.call(rbind, lapply(1:nrow(gamma_log_a), function(i) {
  data.frame(
    wd_s = wd_seq,
    log_log_a = gamma_log_a$`gamma[1,1]`[i] + gamma_log_a$`gamma[2,1]`[i] * wd_seq,
    draw = i
  )
}))

median_intercept <- median(gamma_log_a$`gamma[1,1]`)
median_slope <- median(gamma_log_a$`gamma[2,1]`)

fit_line <- data.frame(
  wd_s = wd_seq,
  log_log_a = median_intercept + median_slope * wd_seq
)

# Step 5: Plot the "pile of lines", median fit line, and species-specific points with CIs
ggplot() +
  geom_line(data = lines_data, aes(x = wd_s, y = log_log_a, group = draw), alpha = 0.1, color = "blue") +  # Pile of lines
  geom_line(data = fit_line, aes(x = wd_s, y = log_log_a), color = "red", size = 1) +  # Median fit line
  geom_point(data = summary_stats |> filter(parameter == "log_a"), aes(x = wd_s, y = median), color = "green") +  # Species-specific points
  geom_errorbar(data = summary_stats |> filter(parameter == "log_a"), aes(x = wd_s, ymin = lower, ymax = upper), width = 0.02, color = "green") +  # 95% CIs
  theme_minimal() +
  labs(
    x = "Scaled Wood Density (WD)",
    y = "Log(log(a))",
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  )
```


