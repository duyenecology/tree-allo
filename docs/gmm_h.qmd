---
title: "Example for gMM DBH-H"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

# Load necessary libraries
```{r}
library(targets)
library(ggplot2)
library(dplyr)
library(stringr)
library(reshape2)
```

# Data preparation
```{r}
# Load MCMC results and Stan data
gmm_h <- tar_read(fit_nlr3_mcmc_gmm_h)
stan_nlr_data_h <- tar_read(stan_data_nlr_h)
str(stan_nlr_data_h)
```

# Extract relevant data
```{r}
log_y <- stan_nlr_data_h$log_y
x <- stan_nlr_data_h$x
sp <- as.factor(stan_nlr_data_h$jj)

# Extract beta parameters
beta <- gmm_h$summary(variable = "beta")

log_a2 <- beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(mean)
b2 <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(mean)
k1 <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(mean)

# Verify the lengths of the extracted parameters
print(length(log_a2))
print(length(b2))
print(length(k1))
print(length(sp))

# Compute fitted values for H using the gMM formula
fitted_log_y_h <- sapply(1:length(log_a2), function(i) {
  log_a2[i] + b2[i] * log(x) - log(k1[i] + x^b2[i])
})

# Calculate community-level fitted line by averaging the species-level coefficients
community_log_a2 <- mean(log_a2)
community_b2 <- mean(b2)
community_k1 <- mean(k1)
community_fitted_log_y_h <- community_log_a2 + community_b2 * log(x) - log(community_k1 + x^community_b2)
community_fitted_H <- exp(community_fitted_log_y_h)

# Create a data frame for plotting
data_h <- data.frame(H = exp(log_y), DBH = x, sp = sp)
head(daha_h)

# Add species-specific fitted values to the data frame
for (i in 1:length(log_a2)) {
  data_h[[paste0("fitted_H_sp_", i)]] <- exp(fitted_log_y_h[, i])
}

data_long <- melt(data_h, id.vars = c("H", "DBH", "sp"), measure.vars = grep("fitted_H_sp_", names(data_h), value = TRUE))


```

# Plot observed H vs DBH with fitted lines for each species and community-level line
```{r}
gmm_h_plot4 <- ggplot(data_h, aes(x = DBH, y = H)) +
  geom_point(alpha = 0.5, color = "grey") +
  geom_line(data = data_long, aes(x = DBH, y = value, group = variable), color = "#4682B4", alpha = 0.3) + # SteelBlue color for species fits
  geom_line(aes(y = community_fitted_H), color = "white", linewidth = 1.2) +
  labs(title = "Scatter Plot of H vs DBH with Fitted Lines for Each Species and Community-Level Line",
       x = "DBH (cm)",
       y = "H (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal()

# Save the plot
ggsave("figs/beta4_plot_H_vs_DBH.png", plot = gmm_h_plot4, width = 8, height = 6, units = "in", dpi = 300, bg = "white")

# Display the plot
print(gmm_h_plot4)

```



```{r}
library(dplyr)
library(readr)
library(targets)
library(stringr)
library(cmdstanr)
library(bayesplot)
```

```{r}
gmm_h <- tar_read(fit_nlr7_mcmc_gmm_h)
gamma_trace <- gmm_h$draws("gamma")
mcmc_trace(gamma_trace)


tallo_wd_200_df <- read_csv("data/tallo_wd_200.csv")
tallo_wd_200_df
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
str(stan_data_nlr_h)

beta <- gmm_h$summary(variable = "beta")
str(beta)
beta
```


# Covariance between beta parameters
```{r}
# Extract beta samples
beta_samples <- gmm_h$draws(variables = "beta", format = "draws_matrix")
str(beta_samples)
beta_samples

# Extract beta1, beta2, and beta3 separately
beta1_samples <- beta_samples[, grep("beta\\[\\d+,1\\]", colnames(beta_samples))]
beta2_samples <- beta_samples[, grep("beta\\[\\d+,2\\]", colnames(beta_samples))]
beta3_samples <- beta_samples[, grep("beta\\[\\d+,3\\]", colnames(beta_samples))]

str(beta1_samples)
str(beta2_samples)
str(beta3_samples)

# Combine the beta samples into a single data frame
combined_beta_samples <- cbind(beta1_samples, beta2_samples, beta3_samples)
str(combined_beta_samples)

# Convert the combined samples to a matrix
combined_beta_matrix <- as.matrix(combined_beta_samples)

# Compute the covariance matrix for the combined beta parameters
cov_matrix <- cov(combined_beta_matrix)
head(cov_matrix)

# Print the covariance matrix
str(cov_matrix)

# Calculate summary statistics for the covariance matrix (excluding diagonal)
cov_values <- cov_matrix[lower.tri(cov_matrix)]
summary(cov_values)

# Calculate the correlation matrix
cor_matrix <- cov2cor(cov_matrix)

# Summary statistics for the correlation values (excluding diagonal)
cor_values <- cor_matrix[lower.tri(cor_matrix, diag = FALSE)]
summary(cor_values)

threshold <- 0.7
strong_correlations <- sum(abs(cor_values) > threshold)

# Calculate the percentage of strong correlations
total_pairs <- length(cor_values)
percentage_strong <- (strong_correlations / total_pairs) * 100
percentage_strong

```

```{r}
summary(cor_values)
hist(cov_values)

hist(cov_values, breaks=50, main="Histogram of Covariance Values", xlab="Covariance Values", col="blue")
```




