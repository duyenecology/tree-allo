---
title: "AGB estimation"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)

```

```{r include=FALSE}
library(tidyverse)
library(here)
library(targets)
library(knitr)
library(scales)
library(patchwork)
library(cowplot)
options(width=200)

```


# Loading data

```{r}
# sp_posterior_df <- tar_read(sp_posterior_agb_df)
# head(sp_posterior_df, n = 6)

sp_posterior_df <- tar_read(test_agb_post)
head(sp_posterior_df, n = 6)


tallo_wd_df0 <- tar_read(tallo_wd_df0)

tallo_wd_df0
summary(tallo_wd_df0)

# Remove sp < 20 obs
tallo_wd_df <- tallo_wd_df0 |>
  filter(!is.na(wd)) |>
  mutate(log_dbh = log(dbh),
         log_h = log(h),
         log_cr = log(cr),
         log_wd = log(wd)) |>
  filter(!is.na(log_dbh), !is.na(log_cr), !is.na(log_h), !is.na(log_wd)) |>
  select(tree_id, division, sp, dbh, h, cr, wd, log_dbh, log_h, log_cr, log_wd) |>
  group_by(sp) |>
  filter(n() >= 20) |>
  ungroup()

tallo_wd_df
  
# common_sp <- intersect(tallo_wd_df$sp, sp_posterior_df$sp)
# tallo_wd_df <- tallo_wd_df |> filter(sp %in% common_sp)
# sp_posterior_df <- sp_posterior_df |> filter(sp %in% common_sp)
  

tallo_wd_ang <- tallo_wd_df |>
  filter(division == "Angiosperm")
tallo_wd_ang

tallo_wd_gym <- tallo_wd_df |>
  filter(division == "Gymnosperm")
tallo_wd_gym

sp_posterior_ang <- sp_posterior_df |>
  filter(Division == "Angiosperm")

sp_posterior_gym <- sp_posterior_df |>
  filter(Division == "Gymnosperm")

```


# Parameter extraction

## Angiosperm

```{r}
calculate_agb <- function(tallo_wd_df, sp_posterior_df) {
  h_wb_df <- sp_posterior_df |>
    filter(Dependent_variable == "Tree Height") |>
    dplyr::select(sp, a, b, k, Division) |>
    distinct(sp, .keep_all = TRUE) |>
    arrange(sp)

  h_pl_df <- sp_posterior_df |>
    filter(Dependent_variable == "Tree Height", is.na(k)) |>
    dplyr::select(sp, a, b, Division) |>
    distinct(sp, .keep_all = TRUE) |>
    arrange(sp)

  dbh_df <- sp_posterior_df |>
    filter(Dependent_variable == "DBH") |>
    dplyr::select(sp, a, b, c, Division) |>
    distinct(sp, .keep_all = TRUE) |>
    arrange(sp)

  dbh1_df <- sp_posterior_df |>
    filter(Dependent_variable == "DBH1") |>
    dplyr::select(sp, a, b, Division) |>
    distinct(sp, .keep_all = TRUE) |>
    arrange(sp)

  dbh2_df <- sp_posterior_df |>
    filter(Dependent_variable == "DBH2") |>
    dplyr::select(sp, a, b, Division) |>
    distinct(sp, .keep_all = TRUE) |>
    arrange(sp)

  dbh3_df <- sp_posterior_df |>
    filter(Dependent_variable == "DBH3") |>
    dplyr::select(sp, a, b, Division) |>
    distinct(sp, .keep_all = TRUE) |>
    arrange(sp)
    
  # Join the posterior data with tallo_wd_df data and calculate AGB
  agb_df <- tallo_wd_df |>
    left_join(h_wb_df |> rename(a_h_wb = a, b_h_wb = b, k_h_wb = k), by = "sp") |> 
    left_join(h_pl_df |> rename(a_h_pl = a, b_h_pl = b), by = "sp") |> 
    left_join(dbh_df |> rename(a_dbh = a, b_dbh = b, c_dbh = c), by = "sp") |>
    left_join(dbh1_df |> rename(a_dbh1 = a, b_dbh1 = b), by = "sp") |> 
    left_join(dbh2_df |> rename(a_dbh2 = a, b_dbh2 = b), by = "sp") |> 
    left_join(dbh3_df |> rename(a_dbh3 = a, b_dbh3 = b), by = "sp")

  # Calculate the log_AGB based on various models
  agb_df <- agb_df |>
    mutate(
      a_h_wb = as.numeric(gsub(" .*", "", a_h_wb)),
      b_h_wb = as.numeric(gsub(" .*", "", b_h_wb)),
      k_h_wb = as.numeric(gsub(" .*", "", k_h_wb)),
      a_h_pl = as.numeric(gsub(" .*", "", a_h_pl)),
      b_h_pl = as.numeric(gsub(" .*", "", b_h_pl)),
      a_dbh = as.numeric(gsub(" .*", "", a_dbh)),
      b_dbh = as.numeric(gsub(" .*", "", b_dbh)),
      c_dbh = as.numeric(gsub(" .*", "", c_dbh)),
      a_dbh1 = as.numeric(gsub(" .*", "", a_dbh1)),
      b_dbh1 = as.numeric(gsub(" .*", "", b_dbh1)),
      a_dbh2 = as.numeric(gsub(" .*", "", a_dbh2)),
      b_dbh2 = as.numeric(gsub(" .*", "", b_dbh2)),
      a_dbh3 = as.numeric(gsub(" .*", "", a_dbh3)),
      b_dbh3 = as.numeric(gsub(" .*", "", b_dbh3))
    ) |>
    mutate(
      log_AGB_bl = log(0.0559) + log_wd + 2 * log_dbh + log_h,
      
      height_wb = a_h_wb * (1 - exp(-b_h_wb * dbh^k_h_wb)),    # Weibull-based height estimation
      log_AGB_wb_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_wb),  # Biomass from Weibull height
      
      height_pl = a_h_pl * dbh^b_h_pl,  # Power-law height estimation
      log_AGB_pl_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_pl),  # Biomass from Power-law height
      
      dbh_pl = a_dbh * (cr^b_dbh) * (h^c_dbh),  # Power-law DBH estimation using CR and H
      log_AGB_pl_dbh = log(0.0559) + log_wd + 2 * log(dbh_pl) + log_h,  # Biomass from Power-law DBH
      
      dbh_pl1 = a_dbh1 * (cr * h)^b_dbh1,  # Power-law DBH estimation using CR*H
      log_AGB_pl_dbh1 = log(0.0559) + log_wd + 2 * log(dbh_pl1) + log_h,  # Biomass from Power-law DBH1
      
      dbh_pl2 = a_dbh2 * (cr^b_dbh2),  # Power-law DBH estimation using CR only
      log_AGB_pl_dbh2 = log(0.0559) + log_wd + 2 * log(dbh_pl2) + log_h,  # Biomass from Power-law DBH2
      
      dbh_pl3 = a_dbh3 * (h^b_dbh3),  # Power-law DBH estimation using H only
      log_AGB_pl_dbh3 = log(0.0559) + log_wd + 2 * log(dbh_pl3) + log_h  # Biomass from Power-law DBH3
    )
}

agb_ang <- calculate_agb(tallo_wd_ang, sp_posterior_ang)

agb_gym <- calculate_agb(tallo_wd_gym, sp_posterior_gym)

```

# Box plot

```{r}
#ANG
agb_ang_long <- agb_ang |>
  tidyr::pivot_longer(cols = starts_with("log_AGB"), names_to = "Scenario", values_to = "AGB")


ggplot(agb_ang_long, aes(x = Scenario, y = AGB)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Angiosperm",
    x = "Senarios",
    y = "log predicted AGB (kg)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# GYM
agb_gym_long <- agb_gym |>
  tidyr::pivot_longer(cols = starts_with("log_AGB"), names_to = "Scenario", values_to = "AGB")


ggplot(agb_gym_long, aes(x = Scenario, y = AGB)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Gymnosperm",
    x = "Senarios",
    y = "log predicted AGB (kg)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

# Performance metrics

```{r}
# combine_metrics <- function(agb_df) {
#   agb_df |>
#     summarize(
#       rmse_wb_h = sqrt(mean((log_AGB_bl - log_AGB_wb_h)^2, na.rm = TRUE)),
#       bias_wb_h = mean(log_AGB_wb_h - log_AGB_bl, na.rm = TRUE),

#       rmse_pl_h = sqrt(mean((log_AGB_bl - log_AGB_pl_h)^2, na.rm = TRUE)),
#       bias_pl_h = mean(log_AGB_pl_h - log_AGB_bl, na.rm = TRUE),

#       rmse_pl_dbh = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh)^2, na.rm = TRUE)),
#       bias_pl_dbh = mean(log_AGB_pl_dbh - log_AGB_bl, na.rm = TRUE),

#       rmse_pl_dbh1 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh1)^2, na.rm = TRUE)),
#       bias_pl_dbh1 = mean(log_AGB_pl_dbh1 - log_AGB_bl, na.rm = TRUE),

#       rmse_pl_dbh2 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh2)^2, na.rm = TRUE)),
#       bias_pl_dbh2 = mean(log_AGB_pl_dbh2 - log_AGB_bl, na.rm = TRUE),

#       rmse_pl_dbh3 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh3)^2, na.rm = TRUE)),
#       bias_pl_dbh3 = mean(log_AGB_pl_dbh3 - log_AGB_bl, na.rm = TRUE)
#     )
# }

combine_metrics <- function(agb_df) {
  agb_df |>
    summarize(
      # Weibull-based height metrics
      mae_wb_h = mean(abs(log_AGB_bl - log_AGB_wb_h), na.rm = TRUE),
      rmse_wb_h = sqrt(mean((log_AGB_bl - log_AGB_wb_h)^2, na.rm = TRUE)),
      bias_wb_h = mean(log_AGB_wb_h - log_AGB_bl, na.rm = TRUE),
      r2_wb_h = 1 - sum((log_AGB_wb_h - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),
      
      # Power-law height metrics
      mae_pl_h = mean(abs(log_AGB_bl - log_AGB_pl_h), na.rm = TRUE),
      rmse_pl_h = sqrt(mean((log_AGB_bl - log_AGB_pl_h)^2, na.rm = TRUE)),
      bias_pl_h = mean(log_AGB_pl_h - log_AGB_bl, na.rm = TRUE),
      r2_pl_h = 1 - sum((log_AGB_pl_h - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH metrics
      mae_pl_dbh = mean(abs(log_AGB_bl - log_AGB_pl_dbh), na.rm = TRUE),
      rmse_pl_dbh = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh)^2, na.rm = TRUE)),
      bias_pl_dbh = mean(log_AGB_pl_dbh - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh = 1 - sum((log_AGB_pl_dbh - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH1 metrics
      mae_pl_dbh1 = mean(abs(log_AGB_bl - log_AGB_pl_dbh1), na.rm = TRUE),
      rmse_pl_dbh1 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh1)^2, na.rm = TRUE)),
      bias_pl_dbh1 = mean(log_AGB_pl_dbh1 - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh1 = 1 - sum((log_AGB_pl_dbh1 - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH2 metrics
      mae_pl_dbh2 = mean(abs(log_AGB_bl - log_AGB_pl_dbh2), na.rm = TRUE),
      rmse_pl_dbh2 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh2)^2, na.rm = TRUE)),
      bias_pl_dbh2 = mean(log_AGB_pl_dbh2 - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh2 = 1 - sum((log_AGB_pl_dbh2 - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH3 metrics
      mae_pl_dbh3 = mean(abs(log_AGB_bl - log_AGB_pl_dbh3), na.rm = TRUE),
      rmse_pl_dbh3 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh3)^2, na.rm = TRUE)),
      bias_pl_dbh3 = mean(log_AGB_pl_dbh3 - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh3 = 1 - sum((log_AGB_pl_dbh3 - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)
    )
}

# ANG 
metrics_ang <- combine_metrics(agb_ang)
head(metrics_ang)


metrics_ang_long <- metrics_ang |>
  pivot_longer(cols = everything(), names_to = "Metric_Model", values_to = "Value") |>
  separate(Metric_Model, into = c("Metric", "Model"), sep = "_", extra = "merge") |>
  filter(Metric != "bias")  # Exclude the bias metric

ggplot(metrics_ang_long, aes(x = Model, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "Angiosperm",
    x = "Senarios",
    y = "Metric Value") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2")


# GYM

metrics_gym <- combine_metrics(agb_gym)
head(metrics_gym)


metrics_gym_long <- metrics_gym |>
  pivot_longer(cols = everything(), names_to = "Metric_Model", values_to = "Value") |>
  separate(Metric_Model, into = c("Metric", "Model"), sep = "_", extra = "merge") |>
  filter(Metric != "bias")  # Exclude the bias metric

ggplot(metrics_gym_long, aes(x = Model, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "Gymnosperm",
    x = "Senarios",
    y = "Metric Value") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2")

```

# Predicted vs. baseline AGB plots

```{r}
plot_agb <- function(agb_df, metrics_df, model_colors, division_label) {
  create_plot <- function(data, baseline, predicted, rmse, bias, model_name, tag_label, x_axis_label = NULL) {
      ggplot(data, aes(x = exp(baseline), y = exp(predicted))) +
        geom_point(alpha = 0.5, color = "grey", size = 0.3) +
        geom_smooth(method = "lm", se = FALSE, color = model_colors[model_name], size = 0.5) +
        geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black", size = 0.5) +
        scale_x_log10(
          breaks = c(0.1, 10, 1000, 100000),
          labels = function(x) ifelse(x == 0.1, "0.1", scales::label_number(accuracy = 1)(x))
        ) +
        scale_y_log10(
          breaks = c(0.1, 10, 1000, 100000),
          limits = c(NA, 100000), 
          labels = function(x) ifelse(x == 0.1, "0.1", scales::label_number(accuracy = 1)(x))
        ) +
        labs(tag = tag_label, 
            x = x_axis_label, 
            y = switch(model_name,
                        "h_wb" = expression(Predicted~AGB[H*"\u00A0"*"-"*"\u00A0"*WB]~"(kg)"),
                        "h_pl" = expression(Predicted~AGB[H*"\u00A0"*"-"*"\u00A0"*PL]~"(kg)"),
                        "dbh_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*CR*"\u002B"*H]~"(kg)"),
                        "dbh1_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*CR*"\u00D7"*H]~"(kg)"),
                        "dbh2_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*CR]~"(kg)"),
                        "dbh3_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*H]~"(kg)"))) +
        # Reduce size of RMSE and Bias annotations
        annotate("text", x = 0.9, y = 1e5, label = paste("RMSE =", format(round(rmse, 2), nsmall = 2), "Mg"), hjust = 0, size = 2.5) +
        annotate("text", x = 0.9, y = 3e4, label = paste("Bias =", format(round(bias * 100, 2), nsmall = 2), "%"), hjust = 0, size = 2.5) +
        theme_minimal() +
        theme(plot.margin = margin(5, 15, 5, 5)) +
        theme(axis.title = element_text(size = 9), 
              plot.tag = element_text(face = "bold", size = 10), 
              axis.text = element_text(size = 8))  # Reduce the axis text size
  }
    model_colors <- c(
      "h_wb" = "#D55E00",
      "h_pl" = "#0072B2",
      "dbh_pl" = "#E69F00",
      "dbh1_pl" = "#F0E442",
      "dbh2_pl" = "#009E73",
      "dbh3_pl" = "#56B4E9"
    )

    p1 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_wb_h, 
                      metrics_df$rmse_wb_h, metrics_df$bias_wb_h, "h_wb", "(a)")

    p2 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_h, 
                      metrics_df$rmse_pl_h, metrics_df$bias_pl_h, "h_pl", "(b)")

    p3 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh, 
                      metrics_df$rmse_pl_dbh, metrics_df$bias_pl_dbh, "dbh_pl", "(c)")

    p4 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh1, 
                      metrics_df$rmse_pl_dbh1, metrics_df$bias_pl_dbh1, "dbh1_pl", "(d)")

    p5 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh2, 
                      metrics_df$rmse_pl_dbh2, metrics_df$bias_pl_dbh2, "dbh2_pl", "(e)",
                      x_axis_label = expression(AGB[obs]~"(kg)"))

    p6 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh3, 
                      metrics_df$rmse_pl_dbh3, metrics_df$bias_pl_dbh3, "dbh3_pl", "(f)",
                      x_axis_label = expression(AGB[obs]~"(kg)"))

    # Combine plots
    plot <- (p1 | p2 | p3 | p4 | p5 | p6) + 
      plot_layout(ncol = 2, nrow = 3) + 
      plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)")))
    
    plot_with_label <- ggdraw() +
    draw_plot(plot, x = 0, y = 0, width = 1, height = 0.9) +  
    draw_label(division_label, x = 0.5, y = 0.92, fontface = 'bold', size = 10)
  

  return(plot_with_label)
}
```


```{r}
# Plot for Angiosperms
plot_ang <- plot_agb(agb_ang, metrics_ang, model_colors, "Angiosperm")
plot_ang
```

```{r, height = 20, width = 10}
# Plot for Gymnosperms
plot_gym <- plot_agb(agb_gym, metrics_gym, model_colors, "Gymnosperm")
plot_gym
```


# CHECKING FUNCTION

```{r}
tallo_wd_df0 <- tar_read(tallo_wd_df0)

tallo_wd_df <- tallo_wd_df0 |>
  filter(!is.na(wd)) |>
  mutate(log_dbh = log(dbh),
          log_h = log(h),
          log_cr = log(cr),
          log_wd = log(wd)) |>
  filter(!is.na(log_dbh), !is.na(log_cr), !is.na(log_h), !is.na(log_wd)) |>
  dplyr::select(tree_id, division, sp, dbh, h, cr, wd, log_dbh, log_h, log_cr, log_wd) |>
  group_by(sp) |>
  filter(n() >= 20) |>
  ungroup()

tallo_wd_df

# Wood density for Angiosperms
wd_df_ang <- tallo_wd_df |>
  filter(division == "Angiosperm") |>
  group_by(sp) |>
  summarize(wd = mean(wd, na.rm = TRUE)) |>
  mutate(sp_id = row_number())
wd_df_ang

# Wood density for Gymnosperms
wd_df_gym <- tallo_wd_df |>
  filter(division == "Gymnosperm") |>
  group_by(sp) |>
  summarize(wd = mean(wd, na.rm = TRUE)) |>
  mutate(sp_id = row_number())

wd_df_gym

```



```{r}
# Read the datasets
tallo_wd_df0 <- tar_read(tallo_wd_df0)

tallo_reduced_nlr_df_ang_h <- tar_read(tallo_reduced_nlr_df_ang_h)
tallo_reduced_lr_df_ang_h <- tar_read(tallo_reduced_lr_df_ang_h)
# tallo_reduced_lr_df_ang_cr <- tar_read(tallo_reduced_lr_df_ang_cr)
tallo_reduced_lr_df_ang_dbh <- tar_read(tallo_reduced_lr_df_ang_dbh)
tallo_reduced_lr_df_ang_dbh1 <- tar_read(tallo_reduced_lr_df_ang_dbh1)
tallo_reduced_lr_df_ang_dbh2 <- tar_read(tallo_reduced_lr_df_ang_dbh2)
tallo_reduced_lr_df_ang_dbh3 <- tar_read(tallo_reduced_lr_df_ang_dbh3)

tallo_reduced_nlr_df_gym_h <- tar_read(tallo_reduced_nlr_df_gym_h)
tallo_reduced_lr_df_gym_h <- tar_read(tallo_reduced_lr_df_gym_h)
# tallo_reduced_nlr_df_gym_cr <- tar_read(tallo_reduced_nlr_df_gym_cr)
tallo_reduced_lr_df_gym_dbh <- tar_read(tallo_reduced_lr_df_gym_dbh)
tallo_reduced_lr_df_gym_dbh1 <- tar_read(tallo_reduced_lr_df_gym_dbh1)
tallo_reduced_lr_df_gym_dbh2 <- tar_read(tallo_reduced_lr_df_gym_dbh2)
tallo_reduced_lr_df_gym_dbh3 <- tar_read(tallo_reduced_lr_df_gym_dbh3)


# ANG
fit_nlr_nou_summary_weibull_ang_h <- tar_read(fit_nlr_nou_summary_weibull_ang_h)
fit_lr_nou_summary_pl_ang_h <- tar_read(fit_lr_nou_summary_pl_ang_h)
# fit_lr_nou_summary_pl_ang_cr <- tar_read(fit_lr_nou_summary_pl_ang_cr)
fit_lr_nou_summary_pl_ang_dbh <- tar_read(fit_lr_nou_summary_pl_ang_dbh)
fit_lr_nou_summary_pl_ang_dbh1 <- tar_read(fit_lr_nou_summary_pl_ang_dbh1)
fit_lr_nou_summary_pl_ang_dbh2 <- tar_read(fit_lr_nou_summary_pl_ang_dbh2)
fit_lr_nou_summary_pl_ang_dbh3 <- tar_read(fit_lr_nou_summary_pl_ang_dbh3)

stan_data_nlr_ang_h <- tar_read(stan_data_nlr_ang_h)
stan_data_lr_ang_h <- tar_read(stan_data_lr_ang_h)
# stan_data_lr_ang_cr <- tar_read(stan_data_lr_ang_cr)
stan_data_lr_ang_dbh <- tar_read(stan_data_lr_ang_dbh)
stan_data_lr_ang_dbh1 <- tar_read(stan_data_lr_ang_dbh1)
stan_data_lr_ang_dbh2 <- tar_read(stan_data_lr_ang_dbh2)
stan_data_lr_ang_dbh3 <- tar_read(stan_data_lr_ang_dbh3)

str(stan_data_nlr_ang_h)
str(stan_data_lr_ang_h)

str(stan_data_lr_ang_dbh)
str(stan_data_lr_ang_dbh1)
str(stan_data_lr_ang_dbh2)
str(stan_data_lr_ang_dbh3)

# GYM
fit_nlr_nou_summary_weibull_gym_h <- tar_read(fit_nlr_nou_summary_weibull_gym_h)
fit_lr_nou_summary_pl_gym_h <- tar_read(fit_lr_nou_summary_pl_gym_h)
# fit_nlr_nou_summary_gmm_gym_cr <- tar_read(fit_nlr_nou_summary_gmm_gym_cr)
fit_lr_nou_summary_pl_gym_dbh <- tar_read(fit_lr_nou_summary_pl_gym_dbh)
fit_lr_nou_summary_pl_gym_dbh1 <- tar_read(fit_lr_nou_summary_pl_gym_dbh1)
fit_lr_nou_summary_pl_gym_dbh2 <- tar_read(fit_lr_nou_summary_pl_gym_dbh2)
fit_lr_nou_summary_pl_gym_dbh3 <- tar_read(fit_lr_nou_summary_pl_gym_dbh3)


stan_data_nlr_gym_h <- tar_read(stan_data_nlr_gym_h)
stan_data_lr_gym_h <- tar_read(stan_data_lr_gym_h)
# stan_data_nlr_gym_cr <- tar_read(stan_data_nlr_gym_cr)
stan_data_lr_gym_dbh <- tar_read(stan_data_lr_gym_dbh)
stan_data_lr_gym_dbh1 <- tar_read(stan_data_lr_gym_dbh1)
stan_data_lr_gym_dbh2 <- tar_read(stan_data_lr_gym_dbh2)
stan_data_lr_gym_dbh3 <- tar_read(stan_data_lr_gym_dbh3)

str(stan_data_nlr_gym_h)
str(stan_data_lr_gym_h)
str(stan_data_lr_gym_dbh)
str(stan_data_lr_gym_dbh1)
str(stan_data_lr_gym_dbh2)
str(stan_data_lr_gym_dbh3)

```

```{r}
filter_species <- function(dataset, division) {
  dataset |> 
    filter(division == division, !is.na(dbh), !is.na(cr), !is.na(h)) |> 
    group_by(sp) |> 
    summarise(count = n()) |> 
    filter(count >= 20) |> 
    pull(sp)
}
create_species_model_df <- function(beta_data, dependent_variable, functional_form, sp_list) {
  if (functional_form == "Weibull" || functional_form == "gMM") {
    a_median <- exp(beta_data |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q50))
    a_upper <- exp(beta_data |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q97.5))
    a_lower <- exp(beta_data |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(q2.5))

    b_median <- beta_data |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q50)
    b_upper <- beta_data |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q97.5)
    b_lower <- beta_data |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(q2.5)

    k_median <- beta_data |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q50)
    k_upper <- beta_data |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q97.5)
    k_lower <- beta_data |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(q2.5)

    ci_95 <- data.frame(
      sp = sp_list,
      a = paste0(round(a_median, 2), " (", round(a_lower, 2), ", ", round(a_upper, 2), ")"),
      b = paste0(round(b_median, 2), " (", round(b_lower, 2), ", ", round(b_upper, 2), ")"),
      k = paste0(round(k_median, 2), " (", round(k_lower, 2), ", ", round(k_upper, 2), ")"),
      Dependent_variable = dependent_variable,
      stringsAsFactors = FALSE
    )
  } else if (functional_form == "Power-Law") {
    a_median <- exp(beta_data |> filter(str_detect(variable, "beta\\[1,\\d+\\]")) |> pull(q50))
    a_upper <- exp(beta_data |> filter(str_detect(variable, "beta\\[1,\\d+\\]")) |> pull(q97.5))
    a_lower <- exp(beta_data |> filter(str_detect(variable, "beta\\[1,\\d+\\]")) |> pull(q2.5))

    b_median <- beta_data |> filter(str_detect(variable, "beta\\[2,\\d+\\]")) |> pull(q50)
    b_upper <- beta_data |> filter(str_detect(variable, "beta\\[2,\\d+\\]")) |> pull(q97.5)
    b_lower <- beta_data |> filter(str_detect(variable, "beta\\[2,\\d+\\]")) |> pull(q2.5)

    c_median <- beta_data |> filter(str_detect(variable, "beta\\[3,\\d+\\]")) |> pull(q50)
    c_upper <- beta_data |> filter(str_detect(variable, "beta\\[3,\\d+\\]")) |> pull(q97.5)
    c_lower <- beta_data |> filter(str_detect(variable, "beta\\[3,\\d+\\]")) |> pull(q2.5)

    ci_95 <- data.frame(
      sp = sp_list,
      a = paste0(round(a_median, 2), " (", round(a_lower, 2), ", ", round(a_upper, 2), ")"),
      b = paste0(round(b_median, 2), " (", round(b_lower, 2), ", ", round(b_upper, 2), ")"),
      c = paste0(round(c_median, 2), " (", round(c_lower, 2), ", ", round(c_upper, 2), ")"),
      Dependent_variable = dependent_variable,
      stringsAsFactors = FALSE
    )
  }

  return(ci_95)
}
# Function to process datasets and align species IDs with Stan data
process_dataset <- function(dataset, stan_data, division_filter) {
  # Filter the dataset by division
  dataset <- dataset |> filter(division == division_filter)
  
  # Prepare species data
  sp_data <- dataset |>
    group_by(sp) |>
    summarise(wd = mean(wd, na.rm = TRUE)) |>
    arrange(sp) |>
    mutate(sp_id = row_number()) |>
    mutate(wd_s = scale(wd) |> as.numeric()) |>
    select(sp_id, sp, wd, wd_s)
  
  # Verify Stan data structure
  if (!all(c("jj", "u") %in% names(stan_data))) {
    stop("Stan data must contain 'jj' and 'u'.")
  }
  
  # Handle `nlr` structure: `u` has rows indexed by `jj`
  if (nrow(stan_data$u) >= max(stan_data$jj, na.rm = TRUE)) {
    stan_processed <- data.frame(
      sp_id = as.factor(stan_data$jj),
      wd_s = stan_data$u[stan_data$jj, 2]  # Extract `wd_s` for species indices
    )
  } 
  # Handle `lr` structure: `u` has two rows (variables) and columns for species
  else if (nrow(stan_data$u) == 2) {
    stan_processed <- data.frame(
      sp_id = 1:ncol(stan_data$u),
      wd_s = stan_data$u[2, ]  # Use the second row for `wd_s`
    )
  } 
  # Error handling for unexpected structures
  else {
    stop("Unexpected structure for 'u' in Stan data.")
  }
  
  # Add species names and calculate tree counts
  stan_processed <- stan_processed |>
    group_by(sp_id, wd_s) |>
    summarise(tree_count = n(), .groups = "drop") |>
    mutate(sp_id = as.integer(as.character(sp_id))) |>
    left_join(sp_data, by = "sp_id")
  
  return(list(sp_data = sp_data, stan_processed = stan_processed))
}
```

```{r}
ang_dbh_species <- filter_species(tallo_reduced_lr_df_ang_dbh, "Angiosperm")
gym_dbh_species <- filter_species(tallo_reduced_lr_df_gym_dbh, "Gymnosperm")

ang_dbh1_species <- filter_species(tallo_reduced_lr_df_ang_dbh1, "Angiosperm")
gym_dbh1_species <- filter_species(tallo_reduced_lr_df_gym_dbh1, "Gymnosperm")

ang_dbh2_species <- filter_species(tallo_reduced_lr_df_ang_dbh2, "Angiosperm")
gym_dbh2_species <- filter_species(tallo_reduced_lr_df_gym_dbh2, "Gymnosperm")

ang_dbh3_species <- filter_species(tallo_reduced_lr_df_ang_dbh3, "Angiosperm")
gym_dbh3_species <- filter_species(tallo_reduced_lr_df_gym_dbh3, "Gymnosperm")


h_ang_wb <- process_dataset(tallo_reduced_nlr_df_ang_h, stan_data_nlr_ang_h, "Angiosperm")
h_ang_wb

h_ang_pl <- process_dataset(tallo_reduced_lr_df_ang_h, stan_data_lr_ang_h, "Angiosperm")
h_ang_pl

cr_ang_pl <- process_dataset(tallo_reduced_lr_df_ang_cr, stan_data_lr_ang_cr, "Angiosperm")
cr_ang_pl


dbh_ang <- process_dataset(tallo_reduced_lr_df_ang_dbh |> filter(sp %in% ang_dbh_species), stan_data_lr_ang_dbh, "Angiosperm")
dbh_ang

dbh1_ang <- process_dataset(tallo_reduced_lr_df_ang_dbh1 |> filter(sp %in% ang_dbh1_species), stan_data_lr_ang_dbh1, "Angiosperm")
dbh1_ang


dbh2_ang <- process_dataset(tallo_reduced_lr_df_ang_dbh2 |> filter(sp %in% ang_dbh2_species), stan_data_lr_ang_dbh2, "Angiosperm")
dbh2_ang

dbh3_ang <- process_dataset(tallo_reduced_lr_df_ang_dbh3 |> filter(sp %in% ang_dbh3_species), stan_data_lr_ang_dbh3, "Angiosperm")
dbh3_ang

###

h_gym_wb <- process_dataset(tallo_reduced_nlr_df_gym_h, stan_data_nlr_gym_h, "Gymnosperm")
h_gym_wb

h_gym_pl <- process_dataset(tallo_reduced_lr_df_gym_h, stan_data_lr_ang_h, "Gymnosperm")
h_gym_pl

cr_gym_gmm <- process_dataset(tallo_reduced_nlr_df_gym_cr, stan_data_nlr_gym_cr, "Gymnosperm")
cr_gym_gmm

dbh_gym <- process_dataset(tallo_reduced_lr_df_gym_dbh |> filter(sp %in% gym_dbh_species), stan_data_lr_gym_dbh, "Gymnosperm")
dbh_gym

dbh1_gym <- process_dataset(tallo_reduced_lr_df_gym_dbh1 |> filter(sp %in% gym_dbh1_species), stan_data_lr_gym_dbh1, "Gymnosperm")
dbh1_gym

dbh2_gym <- process_dataset(tallo_reduced_lr_df_gym_dbh2 |> filter(sp %in% gym_dbh2_species), stan_data_lr_gym_dbh2, "Gymnosperm")
dbh2_gym

dbh3_gym <- process_dataset(tallo_reduced_lr_df_gym_dbh3 |> filter(sp %in% gym_dbh3_species), stan_data_lr_gym_dbh3, "Gymnosperm")
dbh3_gym



```


```{r}
# ANG
h_ang_wb_df <- create_species_model_df(fit_nlr_nou_summary_weibull_ang_h, "Tree Height", "Weibull", h_ang_wb$sp)
head(h_ang_wb_df)
summary(h_ang_wb_df)

h_ang_pl_df <- create_species_model_df(fit_lr_nou_summary_pl_ang_h, "Tree Height", "Power-Law", h_ang_pl$sp)
head(h_ang_pl_df)
summary(h_ang_pl_df)

cr_ang_pl_df <- create_species_model_df(fit_lr_nou_summary_pl_ang_cr, "Crown Radius", "Power-Law", cr_ang_pl$sp)
head(cr_ang_pl_df)
summary(cr_ang_pl_df)


dbh_ang_df <- create_species_model_df(fit_lr_nou_summary_pl_ang_dbh, "DBH", "Power-Law", dbh_ang$sp)
head(dbh_ang_df)
summary(dbh_ang_df)

dbh1_ang_df <- create_species_model_df(fit_lr_nou_summary_pl_ang_dbh1, "DBH1", "Power-Law", dbh1_ang$sp)
head(dbh1_ang_df)
summary(dbh1_ang_df)


dbh2_ang_df <- create_species_model_df(fit_lr_nou_summary_pl_ang_dbh2, "DBH2", "Power-Law", dbh2_ang$sp)
head(dbh2_ang_df)
summary(dbh2_ang_df)


dbh3_ang_df <- create_species_model_df(fit_lr_nou_summary_pl_ang_dbh3, "DBH3", "Power-Law", dbh3_ang$sp)
head(dbh3_ang_df)
summary(dbh3_ang_df)

# GYM

h_gym_wb_df <- create_species_model_df(fit_nlr_nou_summary_weibull_gym_h, "Tree Height", "Weibull", h_gym_wb$sp)
head(h_gym_wb_df)
summary(h_gym_wb_df)

h_gym_pl_df <- create_species_model_df(fit_lr_nou_summary_pl_gym_h, "Tree Height", "Power-Law", h_gym_pl$sp)
head(h_df_gym)
summary(h_df_gym)


cr_gym_gmm_df <- create_species_model_df(fit_nlr_nou_summary_gmm_gym_cr, "Crown Radius", "gMM", cr_gym_gmm$sp)
head(cr_gym_gmm_df)
summary(cr_gym_gmm_df)


dbh_gym_df <- create_species_model_df(fit_lr_nou_summary_pl_gym_dbh, "DBH", "Power-Law", dbh_gym$sp)
head(dbh_gym_df)
summary(dbh_gym_df)

dbh1_gym_df <- create_species_model_df(fit_lr_nou_summary_pl_gym_dbh1, "DBH1", "Power-Law", dbh1_gym$sp)
head(dbh1_gym_df)
summary(dbh1_gym_df)


dbh2_gym_df <- create_species_model_df(fit_lr_nou_summary_pl_gym_dbh2, "DBH2", "Power-Law", dbh2_gym$sp)
head(dbh2_gym_df)
summary(dbh2_gym_df)


dbh3_gym_df <- create_species_model_df(fit_lr_nou_summary_pl_gym_dbh3, "DBH3", "Power-Law", dbh3_gym$sp)
head(dbh3_gym_df)
summary(dbh3_gym_df)

```



```{r}
# sp_posterior_agb_ang <- bind_rows(
#   h_ang_wb_df |> mutate(Division = "Angiosperm"),
#   h_ang_pl_df |> mutate(Division = "Angiosperm"),
#   cr_ang_pl_df |> mutate(Division = "Angiosperm"),
#   dbh_ang_df |> mutate(Division = "Angiosperm"),
#   dbh1_ang_df |> mutate(Division = "Angiosperm"),
#   dbh2_ang_df |> mutate(Division = "Angiosperm"),
#   dbh3_ang_df |> mutate(Division = "Angiosperm")
# )

# sp_posterior_agb_gym <- bind_rows(
#   h_gym_wb_df |> mutate(Division = "Gymnosperm"),
#   h_gym_pl_df |> mutate(Division = "Gymnosperm"),
#   cr_gym_gmm_df |> mutate(Division = "Gymnosperm"),
#   dbh_gym_df |> mutate(Division = "Gymnosperm"),
#   dbh1_gym_df |> mutate(Division = "Gymnosperm"),
#   dbh2_gym_df |> mutate(Division = "Gymnosperm"),
#   dbh3_gym_df |> mutate(Division = "Gymnosperm")
# )

# head(sp_posterior_agb_ang)
# head(sp_posterior_agb_gym)

```

## ANGIOSPERM
```{r}
head(sp_posterior_agb_ang)
summary(sp_posterior_agb_ang)
```

## CHECK PARAMETER IN DF AND CACULATE AGB

```{r}
h_ang_wb_df <- h_ang_wb_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(h_ang_wb_df)

h_ang_pl_df <- h_ang_pl_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(h_ang_pl_df)

dbh_ang_df <- dbh_ang_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh_ang_df)

dbh1_ang_df <- dbh1_ang_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh1_ang_df)

dbh2_ang_df <- dbh2_ang_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh2_ang_df)

dbh3_ang_df <- dbh3_ang_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh3_ang_df)

colnames(h_ang_wb_df)
colnames(h_ang_pl_df)
colnames(dbh_ang_df)
colnames(dbh1_ang_df)
colnames(dbh2_ang_df)
colnames(dbh3_ang_df)

tallo_wd_df0 <- tar_read(tallo_wd_df0)

tallo_wd_df0
summary(tallo_wd_df0)

# Remove sp < 20 obs
tallo_wd_df <- tallo_wd_df0 |>
  filter(!is.na(wd)) |>
  mutate(log_dbh = log(dbh),
         log_h = log(h),
         log_cr = log(cr),
         log_wd = log(wd)) |>
  filter(!is.na(log_dbh), !is.na(log_cr), !is.na(log_h), !is.na(log_wd)) |>
  select(tree_id, division, sp, dbh, h, cr, wd, log_dbh, log_h, log_cr, log_wd) |>
  group_by(sp) |>
  filter(n() >= 20) |>
  ungroup()

tallo_wd_ang <- tallo_wd_df |>
  filter(division == "Angiosperm")
tallo_wd_ang

common_sp_ang <- Reduce(intersect, list(
  tallo_wd_df$sp,
  h_ang_wb_df$sp,
  h_ang_pl_df$sp,
  dbh_ang_df$sp,
  dbh1_ang_df$sp,
  dbh2_ang_df$sp,
  dbh3_ang_df$sp
))

filtered_tallo_wd_df <- tallo_wd_df |> dplyr::filter(sp %in% common_sp_ang)
filtered_h_ang_wb_df <- h_ang_wb_df |> dplyr::filter(sp %in% common_sp_ang)
filtered_h_ang_pl_df <- h_ang_pl_df |> dplyr::filter(sp %in% common_sp_ang)
filtered_dbh_ang_df <- dbh_ang_df |> dplyr::filter(sp %in% common_sp_ang)
filtered_dbh1_ang_df <- dbh1_ang_df |> dplyr::filter(sp %in% common_sp_ang)
filtered_dbh2_ang_df <- dbh2_ang_df |> dplyr::filter(sp %in% common_sp_ang)
filtered_dbh3_ang_df <- dbh3_ang_df |> dplyr::filter(sp %in% common_sp_ang)

ang_agb_df <- filtered_tallo_wd_df |>
  dplyr::left_join(
    filtered_h_ang_wb_df |>
      dplyr::rename(a_h_wb_ang = a, b_h_wb_ang = b, k_h_wb_ang = k),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_h_ang_pl_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_h_pl_ang = a, b_h_pl_ang = b, c_h_pl_ang = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh_ang_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh_ang = a, b_dbh_ang = b, c_dbh_ang = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh1_ang_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh1_ang = a, b_dbh1_ang = b, c_dbh1_ang = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh2_ang_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh2_ang = a, b_dbh2_ang = b, c_dbh2_ang = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh3_ang_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh3_ang = a, b_dbh3_ang = b, c_dbh3_ang = c),
    by = "sp"
  )

head(ang_agb_df)



ang_agb_df <- ang_agb_df |>
  mutate(
    # Extract numeric values for all coefficient columns
    a_h_wb_ang = as.numeric(gsub(" .*", "", a_h_wb_ang)),
    b_h_wb_ang = as.numeric(gsub(" .*", "", b_h_wb_ang)),
    k_h_wb_ang = as.numeric(gsub(" .*", "", k_h_wb_ang)),
    a_h_pl_ang = as.numeric(gsub(" .*", "", a_h_pl_ang)),
    b_h_pl_ang = as.numeric(gsub(" .*", "", b_h_pl_ang)),
    a_dbh_ang = as.numeric(gsub(" .*", "", a_dbh_ang)),
    b_dbh_ang = as.numeric(gsub(" .*", "", b_dbh_ang)),
    c_dbh_ang = as.numeric(gsub(" .*", "", c_dbh_ang)),
    a_dbh1_ang = as.numeric(gsub(" .*", "", a_dbh1_ang)),
    b_dbh1_ang = as.numeric(gsub(" .*", "", b_dbh1_ang)),
    a_dbh2_ang = as.numeric(gsub(" .*", "", a_dbh2_ang)),
    b_dbh2_ang = as.numeric(gsub(" .*", "", b_dbh2_ang)),
    a_dbh3_ang = as.numeric(gsub(" .*", "", a_dbh3_ang)),
    b_dbh3_ang = as.numeric(gsub(" .*", "", b_dbh3_ang))
  ) |>
  mutate(
    # Calculate biomass and related variables
    log_AGB_bl = log(0.0559) + log_wd + 2 * log_dbh + log_h,
    
    # Weibull-based height and biomass
    height_wb = a_h_wb_ang * (1 - exp(-b_h_wb_ang * dbh^k_h_wb_ang)),
    log_AGB_wb_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_wb),
    
    # Power-law height and biomass
    height_pl = a_h_pl_ang * dbh^b_h_pl_ang,
    log_AGB_pl_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_pl),
    
    # Power-law DBH estimations and biomass
    dbh_pl = a_dbh_ang * (cr^b_dbh_ang) * (h^c_dbh_ang),
    log_AGB_pl_dbh = log(0.0559) + log_wd + 2 * log(dbh_pl) + log_h,
    
    dbh_pl1 = a_dbh1_ang * (cr * h)^b_dbh1_ang,
    log_AGB_pl_dbh1 = log(0.0559) + log_wd + 2 * log(dbh_pl1) + log_h,
    
    dbh_pl2 = a_dbh2_ang * (cr^b_dbh2_ang),
    log_AGB_pl_dbh2 = log(0.0559) + log_wd + 2 * log(dbh_pl2) + log_h,
    
    dbh_pl3 = a_dbh3_ang * (h^b_dbh3_ang),
    log_AGB_pl_dbh3 = log(0.0559) + log_wd + 2 * log(dbh_pl3) + log_h
  )


agb_ang_long <- ang_agb_df |>
  tidyr::pivot_longer(cols = starts_with("log_AGB"), names_to = "Scenario", values_to = "AGB")

ggplot(agb_ang_long, aes(x = Scenario, y = AGB)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Angiosperm",
    x = "Senarios",
    y = "log predicted AGB (kg)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


combine_metrics <- function(agb_df) {
  agb_df |>
    summarize(
      # Weibull-based height metrics
      mae_wb_h = mean(abs(log_AGB_bl - log_AGB_wb_h), na.rm = TRUE),
      rmse_wb_h = sqrt(mean((log_AGB_bl - log_AGB_wb_h)^2, na.rm = TRUE)),
      bias_wb_h = mean(log_AGB_wb_h - log_AGB_bl, na.rm = TRUE),
      r2_wb_h = 1 - sum((log_AGB_wb_h - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),
      
      # Power-law height metrics
      mae_pl_h = mean(abs(log_AGB_bl - log_AGB_pl_h), na.rm = TRUE),
      rmse_pl_h = sqrt(mean((log_AGB_bl - log_AGB_pl_h)^2, na.rm = TRUE)),
      bias_pl_h = mean(log_AGB_pl_h - log_AGB_bl, na.rm = TRUE),
      r2_pl_h = 1 - sum((log_AGB_pl_h - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH metrics
      mae_pl_dbh = mean(abs(log_AGB_bl - log_AGB_pl_dbh), na.rm = TRUE),
      rmse_pl_dbh = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh)^2, na.rm = TRUE)),
      bias_pl_dbh = mean(log_AGB_pl_dbh - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh = 1 - sum((log_AGB_pl_dbh - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH1 metrics
      mae_pl_dbh1 = mean(abs(log_AGB_bl - log_AGB_pl_dbh1), na.rm = TRUE),
      rmse_pl_dbh1 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh1)^2, na.rm = TRUE)),
      bias_pl_dbh1 = mean(log_AGB_pl_dbh1 - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh1 = 1 - sum((log_AGB_pl_dbh1 - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH2 metrics
      mae_pl_dbh2 = mean(abs(log_AGB_bl - log_AGB_pl_dbh2), na.rm = TRUE),
      rmse_pl_dbh2 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh2)^2, na.rm = TRUE)),
      bias_pl_dbh2 = mean(log_AGB_pl_dbh2 - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh2 = 1 - sum((log_AGB_pl_dbh2 - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE),

      # Power-law DBH3 metrics
      mae_pl_dbh3 = mean(abs(log_AGB_bl - log_AGB_pl_dbh3), na.rm = TRUE),
      rmse_pl_dbh3 = sqrt(mean((log_AGB_bl - log_AGB_pl_dbh3)^2, na.rm = TRUE)),
      bias_pl_dbh3 = mean(log_AGB_pl_dbh3 - log_AGB_bl, na.rm = TRUE),
      r2_pl_dbh3 = 1 - sum((log_AGB_pl_dbh3 - log_AGB_bl)^2, na.rm = TRUE) / sum((log_AGB_bl - mean(log_AGB_bl, na.rm = TRUE))^2, na.rm = TRUE)
    )
}

metrics_ang1 <- combine_metrics(ang_agb_df)
head(metrics_ang)

metrics_ang_long <- metrics_ang |>
  pivot_longer(cols = everything(), names_to = "Metric_Model", values_to = "Value") |>
  separate(Metric_Model, into = c("Metric", "Model"), sep = "_", extra = "merge") |>
  filter(Metric != "bias")  # Exclude the bias metric

ggplot(metrics_ang_long, aes(x = Model, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "Angiosperm",
    x = "Senarios",
    y = "Metric Value") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set2")


plot_agb <- function(agb_df, metrics_df, model_colors, division_label) {
  create_plot <- function(data, baseline, predicted, rmse, bias, model_name, tag_label, x_axis_label = NULL) {
      ggplot(data, aes(x = exp(baseline), y = exp(predicted))) +
        geom_point(alpha = 0.5, color = "grey", size = 0.3) +
        geom_smooth(method = "lm", se = FALSE, color = model_colors[model_name], size = 0.5) +
        geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black", size = 0.5) +
        scale_x_log10(
          breaks = c(0.1, 10, 1000, 100000),
          labels = function(x) ifelse(x == 0.1, "0.1", scales::label_number(accuracy = 1)(x))
        ) +
        scale_y_log10(
          breaks = c(0.1, 10, 1000, 100000),
          limits = c(NA, 100000), 
          labels = function(x) ifelse(x == 0.1, "0.1", scales::label_number(accuracy = 1)(x))
        ) +
        labs(tag = tag_label, 
            x = x_axis_label, 
            y = switch(model_name,
                        "h_wb" = expression(Predicted~AGB[H*"\u00A0"*"-"*"\u00A0"*WB]~"(kg)"),
                        "h_pl" = expression(Predicted~AGB[H*"\u00A0"*"-"*"\u00A0"*PL]~"(kg)"),
                        "dbh_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*CR*"\u002B"*H]~"(kg)"),
                        "dbh1_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*CR*"\u00D7"*H]~"(kg)"),
                        "dbh2_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*CR]~"(kg)"),
                        "dbh3_pl" = expression(Predicted~AGB[DBH*phantom()*"\u223C"*phantom()*H]~"(kg)"))) +
        # Reduce size of RMSE and Bias annotations
        annotate("text", x = 0.9, y = 1e5, label = paste("RMSE =", format(round(rmse, 2), nsmall = 2), "Mg"), hjust = 0, size = 2.5) +
        annotate("text", x = 0.9, y = 3e4, label = paste("Bias =", format(round(bias * 100, 2), nsmall = 2), "%"), hjust = 0, size = 2.5) +
        theme_minimal() +
        theme(plot.margin = margin(5, 15, 5, 5)) +
        theme(axis.title = element_text(size = 9), 
              plot.tag = element_text(face = "bold", size = 10), 
              axis.text = element_text(size = 8))  # Reduce the axis text size
  }
    model_colors <- c(
      "h_wb" = "#D55E00",
      "h_pl" = "#0072B2",
      "dbh_pl" = "#E69F00",
      "dbh1_pl" = "#F0E442",
      "dbh2_pl" = "#009E73",
      "dbh3_pl" = "#56B4E9"
    )

    p1 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_wb_h, 
                      metrics_df$rmse_wb_h, metrics_df$bias_wb_h, "h_wb", "(a)")

    p2 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_h, 
                      metrics_df$rmse_pl_h, metrics_df$bias_pl_h, "h_pl", "(b)")

    p3 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh, 
                      metrics_df$rmse_pl_dbh, metrics_df$bias_pl_dbh, "dbh_pl", "(c)")

    p4 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh1, 
                      metrics_df$rmse_pl_dbh1, metrics_df$bias_pl_dbh1, "dbh1_pl", "(d)")

    p5 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh2, 
                      metrics_df$rmse_pl_dbh2, metrics_df$bias_pl_dbh2, "dbh2_pl", "(e)",
                      x_axis_label = expression(AGB[obs]~"(kg)"))

    p6 <- create_plot(agb_df, agb_df$log_AGB_bl, agb_df$log_AGB_pl_dbh3, 
                      metrics_df$rmse_pl_dbh3, metrics_df$bias_pl_dbh3, "dbh3_pl", "(f)",
                      x_axis_label = expression(AGB[obs]~"(kg)"))

    # Combine plots
    plot <- (p1 | p2 | p3 | p4 | p5 | p6) + 
      plot_layout(ncol = 2, nrow = 3) + 
      plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)")))
    
    plot_with_label <- ggdraw() +
    draw_plot(plot, x = 0, y = 0, width = 1, height = 0.9) +  
    draw_label(division_label, x = 0.5, y = 0.92, fontface = 'bold', size = 10)
  

  return(plot_with_label)
}

plot_ang <- plot_agb(ang_agb_df, metrics_ang, model_colors, "Angiosperm")
plot_ang

ggsave("test_ang.png", plot = plot_ang, width = 120, height = 130, units = "mm")
```

## GYMNOSPERM

```{r}
## GYMNOSPERM DATA FRAME PROCESSING

# Process the Gymnosperm height dataset (h_gym_wb_df)
h_gym_wb_df <- h_gym_wb_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(h_gym_wb_df)

# Process the Gymnosperm height power-law dataset (h_gym_pl_df)
h_gym_pl_df <- h_gym_pl_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(h_gym_pl_df)

# Process the Gymnosperm DBH dataset (dbh_gym_df)
dbh_gym_df <- dbh_gym_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh_gym_df)

# Process the Gymnosperm DBH1 dataset (dbh1_gym_df)
dbh1_gym_df <- dbh1_gym_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh1_gym_df)

# Process the Gymnosperm DBH2 dataset (dbh2_gym_df)
dbh2_gym_df <- dbh2_gym_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh2_gym_df)

# Process the Gymnosperm DBH3 dataset (dbh3_gym_df)
dbh3_gym_df <- dbh3_gym_df |>
  dplyr::select(-sp.sp_id, -sp.wd_s, -sp.wd) |>
  dplyr::rename(sp = sp.sp)
head(dbh3_gym_df)





# Filter the dataset for gymnosperms
tallo_wd_gym <- tallo_wd_df |>
  filter(division == "Gymnosperm")

common_sp_gym <- Reduce(intersect, list(
  tallo_wd_df$sp,
  h_gym_wb_df$sp,
  h_gym_pl_df$sp,
  dbh_gym_df$sp,
  dbh1_gym_df$sp,
  dbh2_gym_df$sp,
  dbh3_gym_df$sp
))
common_sp_gym

filtered_tallo_wd_df_gym <- tallo_wd_df |>
  filter(sp %in% common_sp_gym)
filtered_h_gym_wb_df <- h_gym_wb_df |>
  filter(sp %in% common_sp_gym)
filtered_h_gym_pl_df <- h_gym_pl_df |>
  filter(sp %in% common_sp_gym)
filtered_dbh_gym_df <- dbh_gym_df |>
  filter(sp %in% common_sp_gym)
filtered_dbh1_gym_df <- dbh1_gym_df |>
  filter(sp %in% common_sp_gym)
filtered_dbh2_gym_df <- dbh2_gym_df |>
  filter(sp %in% common_sp_gym)
filtered_dbh3_gym_df <- dbh3_gym_df |>
  filter(sp %in% common_sp_gym)

gym_agb_df <- filtered_tallo_wd_df_gym |>
  dplyr::left_join(
    filtered_h_gym_wb_df |>
      dplyr::rename(a_h_wb_gym = a, b_h_wb_gym = b, k_h_wb_gym = k),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_h_gym_pl_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_h_pl_gym = a, b_h_pl_gym = b, c_h_pl_gym = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh_gym_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh_gym = a, b_dbh_gym = b, c_dbh_gym = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh1_gym_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh1_gym = a, b_dbh1_gym = b, c_dbh1_gym = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh2_gym_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh2_gym = a, b_dbh2_gym = b, c_dbh2_gym = c),
    by = "sp"
  ) |>
  dplyr::left_join(
    filtered_dbh3_gym_df |>
      dplyr::select(sp, a, b, c) |>
      dplyr::rename(a_dbh3_gym = a, b_dbh3_gym = b, c_dbh3_gym = c),
    by = "sp"
  )

# View the joined dataset
head(gym_agb_df)

# Convert coefficients to numeric values
gym_agb_df <- gym_agb_df |>
  mutate(
    a_h_wb_gym = as.numeric(gsub(" .*", "", a_h_wb_gym)),
    b_h_wb_gym = as.numeric(gsub(" .*", "", b_h_wb_gym)),
    k_h_wb_gym = as.numeric(gsub(" .*", "", k_h_wb_gym)),
    a_h_pl_gym = as.numeric(gsub(" .*", "", a_h_pl_gym)),
    b_h_pl_gym = as.numeric(gsub(" .*", "", b_h_pl_gym)),
    a_dbh_gym = as.numeric(gsub(" .*", "", a_dbh_gym)),
    b_dbh_gym = as.numeric(gsub(" .*", "", b_dbh_gym)),
    c_dbh_gym = as.numeric(gsub(" .*", "", c_dbh_gym)),
    a_dbh1_gym = as.numeric(gsub(" .*", "", a_dbh1_gym)),
    b_dbh1_gym = as.numeric(gsub(" .*", "", b_dbh1_gym)),
    a_dbh2_gym = as.numeric(gsub(" .*", "", a_dbh2_gym)),
    b_dbh2_gym = as.numeric(gsub(" .*", "", b_dbh2_gym)),
    a_dbh3_gym = as.numeric(gsub(" .*", "", a_dbh3_gym)),
    b_dbh3_gym = as.numeric(gsub(" .*", "", b_dbh3_gym))
  ) |>
  mutate(
    log_AGB_bl = log(0.0559) + log_wd + 2 * log_dbh + log_h,
    
    # Weibull-based height and biomass
    height_wb = a_h_wb_gym * (1 - exp(-b_h_wb_gym * dbh^k_h_wb_gym)),
    log_AGB_wb_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_wb),
    
    # Power-law height and biomass
    height_pl = a_h_pl_gym * dbh^b_h_pl_gym,
    log_AGB_pl_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_pl),
    
    # Power-law DBH estimations and biomass
    dbh_pl = a_dbh_gym * (cr^b_dbh_gym) * (h^c_dbh_gym),
    log_AGB_pl_dbh = log(0.0559) + log_wd + 2 * log(dbh_pl) + log_h,
    
    dbh_pl1 = a_dbh1_gym * (cr * h)^b_dbh1_gym,
    log_AGB_pl_dbh1 = log(0.0559) + log_wd + 2 * log(dbh_pl1) + log_h,
    
    dbh_pl2 = a_dbh2_gym * (cr^b_dbh2_gym),
    log_AGB_pl_dbh2 = log(0.0559) + log_wd + 2 * log(dbh_pl2) + log_h,
    
    dbh_pl3 = a_dbh3_gym * (h^b_dbh3_gym),
    log_AGB_pl_dbh3 = log(0.0559) + log_wd + 2 * log(dbh_pl3) + log_h
  )

# Reshape data for visualization
agb_gym_long <- gym_agb_df |>
  tidyr::pivot_longer(cols = starts_with("log_AGB"), names_to = "Scenario", values_to = "AGB")

# Visualize the data using boxplots
ggplot(agb_gym_long, aes(x = Scenario, y = AGB)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Gymnosperm",
    x = "Scenarios",
    y = "log predicted AGB (kg)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

metrics_gym <- combine_metrics(gym_agb_df)
head(metrics_gym)

plot_gym <- plot_agb(gym_agb_df, metrics_gym, model_colors, "Gymnosperm")


ggsave("test_gym.png", plot = plot_ang, width = 120, height = 130, units = "mm")

```

# CHECKING GYM WB

```{r}
tallo_wd_df <- tallo_wd_df0 |>
  filter(!is.na(wd)) |>
  mutate(log_dbh = log(dbh),
          log_h = log(h),
          log_cr = log(cr),
          log_wd = log(wd)) |>
  filter(!is.na(log_dbh), !is.na(log_cr), !is.na(log_h), !is.na(log_wd)) |>
  dplyr::select(tree_id, division, sp, dbh, h, cr, wd, log_dbh, log_h, log_cr, log_wd) |>
  group_by(sp) |>
  filter(n() >= 20) |>
  ungroup()

tallo_wd_ang <- tallo_wd_df |>
  filter(division == "Angiosperm")

tallo_wd_gym <- tallo_wd_df |>
  filter(division == "Gymnosperm")

sp_posterior_agb_df1 <- tar_read(sp_posterior_agb_df1)
head(sp_posterior_agb_df1)

sp_posterior_ang <- sp_posterior_agb_df1 |>
  filter(Division == "Angiosperm")

sp_posterior_gym <- sp_posterior_agb_df1 |>
  filter(Division == "Gymnosperm")
head(sp_posterior_gym)

filter_common_species <- function(tallo_wd_df, posterior_df) {
  common_species <- intersect(tallo_wd_df$sp, posterior_df$sp)
  tallo_wd_df_filtered <- tallo_wd_df |>
    filter(sp %in% common_species)
  posterior_df_filtered <- posterior_df |>
    filter(sp %in% common_species)
  return(list(tallo_wd_df_filtered, posterior_df_filtered))
}
# Filter common species for Angiosperms and Gymnosperms
filtered_ang <- filter_common_species(tallo_wd_ang, sp_posterior_ang)
filtered_gym <- filter_common_species(tallo_wd_gym, sp_posterior_gym)

tallo_wd_ang <- filtered_ang[[1]]
sp_posterior_ang <- filtered_ang[[2]]

tallo_wd_gym <- filtered_gym[[1]]
sp_posterior_gym <- filtered_gym[[2]]


```

#  CHECKING FUNCTION "generate_agb_estimation_com1"

```{r}
options(with = 200)
tallo_wd_df0 <- tar_read(tallo_wd_df0)
tallo_wd_df0


tallo_wd_df <- tallo_wd_df0 |>
  filter(!is.na(wd)) |>
  mutate(log_dbh = log(dbh),
          log_h = log(h),
          log_cr = log(cr),
          log_wd = log(wd)) |>
  filter(!is.na(log_dbh), !is.na(log_cr), !is.na(log_h), !is.na(log_wd)) |>
  dplyr::select(tree_id, division, sp, dbh, h, cr, wd, log_dbh, log_h, log_cr, log_wd) |>
  group_by(sp) |>
  filter(n() >= 20) |>
  ungroup()

tallo_wd_df
# Split the tallo_wd_df data by Division
tallo_wd_ang <- tallo_wd_df |>
  filter(division == "Angiosperm")
tallo_wd_ang

tallo_wd_gym <- tallo_wd_df |>
  filter(division == "Gymnosperm")
tallo_wd_gym

sp_posterior_agb_df1 <- tar_read(sp_posterior_agb_df1)
head(sp_posterior_agb_df1)

# Splitting the posterior data into Angiosperms and Gymnosperms
sp_posterior_ang <- sp_posterior_agb_df1 |> filter(Division == "Angiosperm")
head(sp_posterior_ang)

sp_posterior_gym <- sp_posterior_agb_df1 |> filter(Division == "Gymnosperm")
head(sp_posterior_gym)

```


```{r}
filter_common_species <- function(tallo_wd_df, sp_posterior_agb_df1) {
  h_wb_df <- sp_posterior_agb_df1 |>
  filter(Dependent_variable == "Tree Height", !is.na(a), !is.na(b),!is.na(k)) |>
    dplyr::select(sp, a, b, k) |>
    distinct()

  h_pl_df <- sp_posterior_agb_df1 |>
    filter(Dependent_variable == "Tree Height", is.na(k)) |>
    dplyr::select(sp, a, b) |>
    distinct()

  dbh_df <- sp_posterior_agb_df1 |>
    filter(Dependent_variable == "DBH", !is.na(a), !is.na(b), !is.na(c)) |>
    dplyr::select(sp, a, b, c) |>
    distinct()

  dbh1_df <- sp_posterior_agb_df1 |>
    filter(Dependent_variable == "DBH1") |>
    dplyr::select(sp, a, b) |>
    distinct()

  dbh2_df <- sp_posterior_agb_df1 |>
    filter(Dependent_variable == "DBH2") |>
    dplyr::select(sp, a, b) |>
    distinct()

  dbh3_df <- sp_posterior_agb_df1 |>
    filter(Dependent_variable == "DBH3") |>
    dplyr::select(sp, a, b) |>
    distinct()

  common_species <- Reduce(intersect, list(
    tallo_wd_df$sp,
    h_wb_df$sp,
    h_pl_df$sp,
    dbh_df$sp,
    dbh1_df$sp,
    dbh2_df$sp,
    dbh3_df$sp
  ))

  list(
    filtered_tallo_wd_df = tallo_wd_df |> filter(sp %in% common_species),
    filtered_h_wb_df = h_wb_df |> filter(sp %in% common_species),
    filtered_h_pl_df = h_pl_df |> filter(sp %in% common_species),
    filtered_dbh_df = dbh_df |> filter(sp %in% common_species),
    filtered_dbh1_df = dbh1_df |> filter(sp %in% common_species),
    filtered_dbh2_df = dbh2_df |> filter(sp %in% common_species),
    filtered_dbh3_df = dbh3_df |> filter(sp %in% common_species)
  )
}

# Filter common species for Angiosperms and Gymnosperms
filtered_ang <- filter_common_species(tallo_wd_ang, sp_posterior_ang)
filtered_gym <- filter_common_species(tallo_wd_gym, sp_posterior_gym)


head(filtered_gym$filtered_h_pl_df)

# Function to join posterior data and estimate AGB
calculate_agb <- function(filtered_data) {
  tallo_wd_df <- filtered_data$filtered_tallo_wd_df
  agb_df <- tallo_wd_df |>
    left_join(
      filtered_data$filtered_h_wb_df |> rename(a_h_wb = a, b_h_wb = b, k_h_wb = k),
      by = "sp"
    ) |>
    left_join(
      filtered_data$filtered_h_pl_df |> rename(a_h_pl = a, b_h_pl = b),
      by = "sp"
    ) |>
    left_join(
      filtered_data$filtered_dbh_df |> rename(a_dbh = a, b_dbh = b, c_dbh = c),
      by = "sp"
    ) |>
    left_join(
      filtered_data$filtered_dbh1_df |> rename(a_dbh1 = a, b_dbh1 = b),
      by = "sp"
    ) |>
    left_join(
      filtered_data$filtered_dbh2_df |> rename(a_dbh2 = a, b_dbh2 = b),
      by = "sp"
    ) |>
    left_join(
      filtered_data$filtered_dbh3_df |> rename(a_dbh3 = a, b_dbh3 = b),
      by = "sp"
    )

  # Calculate the log_AGB based on various models
  agb_df <- agb_df |>
    mutate(
    a_h_wb = as.numeric(gsub(" \\(.*\\)", "", a_h_wb)),
    b_h_wb = as.numeric(gsub(" \\(.*\\)", "", b_h_wb)),
    k_h_wb = as.numeric(gsub(" \\(.*\\)", "", k_h_wb)),
    a_h_pl = as.numeric(gsub(" \\(.*\\)", "", a_h_pl)),
    b_h_pl = as.numeric(gsub(" \\(.*\\)", "", b_h_pl)),
    a_dbh = as.numeric(gsub(" \\(.*\\)", "", a_dbh)),
    b_dbh = as.numeric(gsub(" \\(.*\\)", "", b_dbh)),
    c_dbh = as.numeric(gsub(" \\(.*\\)", "", c_dbh)),
    a_dbh1 = as.numeric(gsub(" \\(.*\\)", "", a_dbh1)),
    b_dbh1 = as.numeric(gsub(" \\(.*\\)", "", b_dbh1)),
    a_dbh2 = as.numeric(gsub(" \\(.*\\)", "", a_dbh2)),
    b_dbh2 = as.numeric(gsub(" \\(.*\\)", "", b_dbh2)),
    a_dbh3 = as.numeric(gsub(" \\(.*\\)", "", a_dbh3)),
    b_dbh3 = as.numeric(gsub(" \\(.*\\)", "", b_dbh3))
    ) |>
    mutate(
      log_AGB_bl = log(0.0559) + log_wd + 2 * log_dbh + log_h,
      
      height_wb = a_h_wb * (1 - exp(-b_h_wb * dbh^k_h_wb)),    # Weibull-based height estimation
      log_AGB_wb_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_wb),  # Biomass from Weibull height
      
      height_pl = a_h_pl * dbh^b_h_pl,  # Power-law height estimation
      log_AGB_pl_h = log(0.0559) + log_wd + 2 * log_dbh + log(height_pl),  # Biomass from Power-law height
      
      dbh_pl = a_dbh * (cr^b_dbh) * (h^c_dbh),  # Power-law DBH estimation using CR and H
      log_AGB_pl_dbh = log(0.0559) + log_wd + 2 * log(dbh_pl) + log_h,  # Biomass from Power-law DBH
      
      dbh_pl1 = a_dbh1 * (cr * h)^b_dbh1,  # Power-law DBH estimation using CR*H
      log_AGB_pl_dbh1 = log(0.0559) + log_wd + 2 * log(dbh_pl1) + log_h,  # Biomass from Power-law DBH1
      
      dbh_pl2 = a_dbh2 * (cr^b_dbh2),  # Power-law DBH estimation using CR only
      log_AGB_pl_dbh2 = log(0.0559) + log_wd + 2 * log(dbh_pl2) + log_h,  # Biomass from Power-law DBH2
      
      dbh_pl3 = a_dbh3 * (h^b_dbh3),  # Power-law DBH estimation using H only
      log_AGB_pl_dbh3 = log(0.0559) + log_wd + 2 * log(dbh_pl3) + log_h  # Biomass from Power-law DBH3
    )

  return(agb_df)
}

# Calculate AGB for Angiosperms and Gymnosperms
agb_ang <- calculate_agb(filtered_ang)
agb_ang
agb_gym <- calculate_agb(filtered_gym)
agb_gym

# Find columns that have all NA values
na_columns <- colSums(is.na(agb_ang)) == nrow(agb_ang)
na_column_names <- names(na_columns[na_columns])

# Display the column names with all NA values
print(na_column_names)

```

# Checking AGB data

```{r}

```