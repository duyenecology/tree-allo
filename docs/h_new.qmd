---
title: "Comparing H models"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)

```

```{r, include=FALSE}
library(targets)
library(tidyverse)
library(scales)
library(MASS)
options(width = 200)
```

# Read in data

```{r}
tallo_wd_df0 <- tar_read(tallo_wd_df0)
tallo_wd_df0
tallo_wd_df0 <- tallo_wd_df0 |> 
                dplyr::filter(!is.na(h)) |>
                dplyr::group_by(sp) |>
                dplyr::filter(n() > 20) |>
                dplyr::ungroup()

ang_df <- tallo_wd_df0 |> filter(division == "Angiosperm")
ang_df

gym_df <- tallo_wd_df0 |> filter(division == "Gymnosperm")
gym_df


```

```{r}
tallo_wd_df_h <- tar_read(tallo_wd_df_h)
tallo_wd_df_h

ang_df <- tallo_wd_df_h |> filter(division == "Angiosperm")
ang_df

gym_df <- tallo_wd_df_h |> filter(division == "Gymnosperm")
gym_df

tallo_reduced_lr_df_ang_h <- tar_read(tallo_reduced_lr_df_ang_h)
tallo_reduced_lr_df_ang_h

ang_data <- tallo_reduced_lr_df_ang_h |> filter(division == "Angiosperm")

gym_data <- tallo_reduced_lr_df_ang_h |> filter(division == "Gymnosperm")


tallo_reduced_lr_df_gym_h

tallo_reduced_nlr_df_ang_h <- tar_read(tallo_reduced_nlr_df_ang_h)
tallo_reduced_nlr_df_ang_h

tallo_reduced_nlr_df_gym_h

```

# Power-law

## Ang

```{r}
# Data
fit_lr_nou_data_ang_h <- tar_read(fit_lr_nou_data_ang_h)
str(fit_lr_nou_data_ang_h)

pl_ang_h <- tar_read(fit_lr_nou_summary_pl_ang_h)
pl_ang_h

gamma_ang_pl <- pl_ang_h |> filter(grepl("gamma", variable))
gamma_ang_pl

community_log_a_ang_pl <- gamma_ang_pl |> filter(variable == "gamma[1]") |> pull(q50)
community_b_ang_pl <- gamma_ang_pl |> filter(variable == "gamma[2]") |> pull(q50)

log_x_range_ang <- fit_lr_nou_data_ang_h$log_x[,2] |> range()

log_x_seq_ang <- seq(log_x_range_ang[1], log_x_range_ang[2], length.out = 100)

fitted_log_y_seq_ang <- community_log_a_ang_pl + community_b_ang_pl * log_x_seq_ang

y_pred_ang <- exp(fitted_log_y_seq_ang)

df_ang_pl <- tibble(y = y_pred_ang, x = exp(log_x_seq_ang))

df_ang_pl

ggplot() +
  geom_bin2d(data = ang_df, aes(x = dbh, y = h), bins = 100)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_ang_pl, aes(x = x, y = y))
```


## Gym

```{r}
# Data
fit_lr_nou_data_gym_h <- tar_read(fit_lr_nou_data_gym_h)
str(fit_lr_nou_data_gym_h)

pl_gym_h <- tar_read(fit_lr_nou_summary_pl_gym_h)
pl_gym_h

gamma_gym_pl <- pl_gym_h |> filter(grepl("gamma", variable))
gamma_gym_pl

community_log_a_gym_pl <- gamma_gym_pl |> filter(variable == "gamma[1]") |> pull(q50)
community_b_gym_pl <- gamma_gym_pl |> filter(variable == "gamma[2]") |> pull(q50)

log_x_range_gym <- fit_lr_nou_data_gym_h$log_x[,2] |> range()

log_x_seq_gym <- seq(log_x_range_gym[1], log_x_range_gym[2], length.out = 100)

fitted_log_y_seq_gym <- community_log_a_gym_pl + community_b_gym_pl * log_x_seq_gym

y_pred_gym <- exp(fitted_log_y_seq_gym)

df_gym_pl <- tibble(y = y_pred_gym, x = exp(log_x_seq_gym))

df_gym_pl

ggplot() +
  geom_bin2d(data = gym_df, aes(x = dbh, y = h), bins = 100) +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_gym_pl, aes(x = x, y = y))
```

# gMM

## Ang

```{r}
# Data
fit_nlr_nou_data_ang_h <- tar_read(fit_nlr_nou_data_ang_h)
str(fit_nlr_nou_data_ang_h)

x_nlr_range_ang <- range(fit_nlr_nou_data_ang_h$x)
x_nlr_seq_ang <- seq(x_nlr_range_ang[1], x_nlr_range_ang[2], length.out = 100)


gmm_ang_h <- tar_read(fit_nlr_nou_summary_gmm_ang_h)
gmm_ang_h

gamma_ang_gmm <- gmm_ang_h |> filter(grepl("gamma(?!_hat)", variable, perl = TRUE))
gamma_ang_gmm

community_log_a_ang_gmm <- gamma_ang_gmm |> filter(variable == "gamma[1]") |> pull(q50)

community_b_ang_gmm <- gamma_ang_gmm |> filter(variable == "gamma[2]") |> pull(q50)

community_k_ang_gmm <- gamma_ang_gmm |> filter(variable == "gamma[3]") |> pull(q50)

community_fitted_log_y_h_gmm_seq <- community_log_a_ang_gmm + community_b_ang_gmm * log(x_nlr_seq_ang) - log(community_k_ang_gmm + x_nlr_seq_ang^community_b_ang_gmm)

y_ang_gmm_pred <- exp(community_fitted_log_y_h_gmm_seq)

df_ang_gmm <- tibble(y = y_ang_gmm_pred, x = x_nlr_seq_ang)
df_ang_gmm

ggplot() +
  geom_bin2d(data = ang_df, aes(x = dbh, y = h), bins = 100)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_ang_gmm, aes(x = x, y = y))
```

## Gym

```{r}
# Data
fit_nlr_nou_data_gym_h <- tar_read(fit_nlr_nou_data_gym_h)
str(fit_nlr_nou_data_gym_h)

x_nlr_range_gym <- range(fit_nlr_nou_data_gym_h$x)
x_nlr_seq_gym <- seq(x_nlr_range_gym[1], x_nlr_range_gym[2], length.out = 100)

gmm_gym_h <- tar_read(fit_nlr_nou_summary_gmm_gym_h)
gmm_gym_h

gamma_gym_gmm <- gmm_gym_h |> filter(grepl("gamma(?!_hat)", variable, perl = TRUE))
gamma_gym_gmm

community_log_a_gym_gmm <- gamma_gym_gmm |> filter(variable == "gamma[1]") |> pull(q50)
community_b_gym_gmm <- gamma_gym_gmm |> filter(variable == "gamma[2]") |> pull(q50)
community_k_gym_gmm <- gamma_gym_gmm |> filter(variable == "gamma[3]") |> pull(q50)

community_fitted_log_y_h_gym_gmm_seq <- community_log_a_gym_gmm + community_b_gym_gmm * log(x_nlr_seq_gym) - log(community_k_gym_gmm + x_nlr_seq_gym^community_b_gym_gmm)

y_gym_gmm_pred <- exp(community_fitted_log_y_h_gym_gmm_seq)

df_gym_gmm <- tibble(y = y_gym_gmm_pred, x = x_nlr_seq_gym)
df_gym_gmm

ggplot() +
  geom_bin2d(data = gym_df, aes(x = dbh, y = h), bins = 100)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_gym_gmm, aes(x = x, y = y))

```

# Weibull

## Ang

```{r}
# Data
fit_nlr_nou_data_ang_h <- tar_read(fit_nlr_nou_data_ang_h)
str(fit_nlr_nou_data_ang_h)

x_nlr_range_ang <- range(fit_nlr_nou_data_ang_h$x)
x_nlr_seq_ang <- seq(x_nlr_range_ang[1], x_nlr_range_ang[2], length.out = 100)

# weibull_ang_h <- tar_read(fit_nlr_nou_summary_weibull_biome_ang_h)
# weibull_ang_h

weibull_ang_h <- tar_read(fit_nlr_nou_summary_weibull_ang_h)
weibull_ang_h


gamma_ang_wb <- weibull_ang_h |> filter(grepl("gamma", variable))
gamma_ang_wb


community_log_a_ang_wb <- gamma_ang_wb |> filter(variable == "gamma[1]") |> pull(q50)

community_b_ang_wb <- gamma_ang_wb |> filter(variable == "gamma[2]") |> pull(q50)

community_k_ang_wb <- gamma_ang_wb |> filter(variable == "gamma[3]") |> pull(q50)


community_fitted_log_y_h_wb_ang_seq <- community_log_a_ang_wb + log(1 - exp(-community_b_ang_wb * (x_nlr_seq_ang ^ community_k_ang_wb)))

y_ang_wb_pred <- exp(community_fitted_log_y_h_wb_ang_seq)

df_ang_wb <- tibble(y = y_ang_wb_pred, x = x_nlr_seq_ang)

df_ang_wb

ggplot() +
  geom_bin2d(data = ang_df, aes(x = dbh, y = h), bins = 100)  +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_ang_wb, aes(x = x, y = y))

```

## Gym

```{r}
# Data
fit_nlr_nou_data_gym_h <- tar_read(fit_nlr_nou_data_gym_h)
str(fit_nlr_nou_data_gym_h)

x_nlr_range_gym <- range(fit_nlr_nou_data_gym_h$x)
x_nlr_seq_gym <- seq(x_nlr_range_gym[1], x_nlr_range_gym[2], length.out = 100)

# Weibull model summary
weibull_gym_h <- tar_read(fit_nlr_nou_summary_weibull_gym_h)
weibull_gym_h

# Extract community-level parameters
gamma_gym_wb <- weibull_gym_h |> filter(grepl("gamma", variable))
gamma_gym_wb

community_log_a_gym_wb <- gamma_gym_wb |> filter(variable == "gamma[1]") |> pull(q50)
community_b_gym_wb <- gamma_gym_wb |> filter(variable == "gamma[2]") |> pull(q50)
community_k_gym_wb <- gamma_gym_wb |> filter(variable == "gamma[3]") |> pull(q50)

# Calculate fitted values for Weibull model
community_fitted_log_y_h_wb_gym_seq <- community_log_a_gym_wb + log(1 - exp(-community_b_gym_wb * (x_nlr_seq_gym ^ community_k_gym_wb)))

y_gym_wb_pred <- exp(community_fitted_log_y_h_wb_gym_seq)

df_gym_wb <- tibble(y = y_gym_wb_pred, x = x_nlr_seq_gym)

df_gym_wb

# Plot with gym data
ggplot() +
  geom_bin2d(data = gym_df, aes(x = dbh, y = h), bins = 100) +
  scale_fill_viridis_c(option = "D") +
  geom_line(data = df_gym_wb, aes(x = x, y = y))

```


# Plotting with density-based coloring

## Ang

```{r}
dens <- with(ang_df, kde2d(log10(dbh), log10(h), n = 300))
ix <- findInterval(log10(ang_df$dbh), dens$x)
iy <- findInterval(log10(ang_df$h), dens$y)
ang_df$density <- dens$z[cbind(ix, iy)]
head(ang_df)

p_ang_den <- ggplot(data = ang_df, aes(x = dbh, y = h, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_ang_pl, aes(x = x, y = y), color = "#FF5733", size = 0.8) +
  geom_line(data = df_ang_gmm, aes(x = x, y = y), color = "#2ECC71", size = 0.8) +
  geom_line(data = df_ang_wb, aes(x = x, y = y), color = "#0f92e9", size = 0.8) +
  labs(
       x = "DBH_ang (cm)",
       y = "H_ang (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20),   
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),    
        axis.text.y = element_text(size = 16))

p_ang_den

ggsave("figs/p_ang_den.png", plot = p_ang_den, width = 8, height = 6, dpi = 300, bg = "white")

```

## Gym

```{r}
dens <- with(gym_df, kde2d(log10(dbh), log10(h), n = 300))
ix <- findInterval(log10(gym_df$dbh), dens$x)
iy <- findInterval(log10(gym_df$h), dens$y)
gym_df$density <- dens$z[cbind(ix, iy)]

p_gym_den <- ggplot(data = gym_df, aes(x = dbh, y = h, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_gym_pl, aes(x = x, y = y), color = "#FF5733", size = 0.8) +
  geom_line(data = df_gym_gmm, aes(x = x, y = y), color = "#2ECC71", size = 0.8) +
  geom_line(data = df_gym_wb, aes(x = x, y = y), color = "#0f92e9", size = 0.8) +
  labs(x = "DBH_gym (cm)", y = "H_gym (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20),   
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),    
        axis.text.y = element_text(size = 16))

p_gym_den

ggsave("figs/p_gym_den.png", plot = p_gym_den, width = 8, height = 6, dpi = 300, bg = "white")

```


# Plotting with density-based coloring non-log scale

## Ang

```{r}
dens <- with(ang_df, kde2d(dbh, h, n = 300))
ix <- findInterval(ang_df$dbh, dens$x)
iy <- findInterval(ang_df$h, dens$y)
ang_df$density <- dens$z[cbind(ix, iy)]
head(ang_df)

p_ang_den_non <- ggplot(data = ang_df, aes(x = dbh, y = h, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_ang_pl, aes(x = x, y = y), color = "#FF5733", size = 0.8) +
  geom_line(data = df_ang_gmm, aes(x = x, y = y), color = "#2ECC71", size = 0.8) +
  geom_line(data = df_ang_wb, aes(x = x, y = y), color = "#0f92e9", size = 0.8) +
  labs(
       x = "DBH_ang (cm)",
       y = "H_ang (m)") +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20),   
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),    
        axis.text.y = element_text(size = 16))

p_ang_den_non

ggsave("figs/p_ang_non_den.png", plot = p_ang_den_non, width = 8, height = 6, dpi = 300, bg = "white")

```

## Gym

```{r}
dens <- with(gym_df, kde2d(dbh, h, n = 300))
ix <- findInterval(gym_df$dbh, dens$x)
iy <- findInterval(gym_df$h, dens$y)
gym_df$density <- dens$z[cbind(ix, iy)]

p_gym_den_non <- ggplot(data = gym_df, aes(x = dbh, y = h, color = density)) +
  geom_point(size = 0.5, alpha = 0.8) +
  scale_color_gradientn(colors = c("black", "purple", "orange", "yellow"), name = "Density") +
  geom_line(data = df_gym_pl, aes(x = x, y = y), color = "#FF5733", size = 0.8) +
  geom_line(data = df_gym_gmm, aes(x = x, y = y), color = "#2ECC71", size = 0.8) +
  geom_line(data = df_gym_wb, aes(x = x, y = y), color = "#0f92e9", size = 0.8) +
  labs(x = "DBH_gym (cm)", y = "H_gym (m)") +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20),   
        axis.title.y = element_text(size = 20),
        axis.text.x = element_text(size = 16),    
        axis.text.y = element_text(size = 16))

p_gym_den_non

ggsave("figs/p_gym_non_den.png", plot = p_gym_den_non, width = 8, height = 6, dpi = 300, bg = "white")
```
