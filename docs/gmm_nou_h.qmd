---
title: "Checking gmm_nou_h model"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

# Load the required packages

```{r}
library(dplyr)
library(readr)
library(targets)
library(stringr)
library(cmdstanr)
library(tidyverse)
library(reshape2)
```

# Data preparation
```{r}
tallo_wd_200_df <- read_csv("data/tallo_wd_200.csv")
tallo_wd_200_df
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
str(stan_data_nlr_h)

gmm_nou_h <- tar_read(fit_nlr7_mcmc_gmm_nou_h)
gmm_nou_h
# beta <- gmm_nou_h$summary(variable = "beta")
# str(beta)
# beta

```

# Species with low ESS of gmm_nou_h model
```{r}
# # Filter beta parameters with small ess_bulk
# small_ess_beta <- beta |>
#   filter(ess_bulk < 300) |>
#   arrange(ess_bulk) |>
#   mutate(species_id = as.integer(str_extract(variable, "\\d+")))

# # Print the filtered beta parameters
# print(small_ess_beta)

# # Count the number of individuals per species
# species_count <- tallo_wd_200_df |>
#  filter(!is.na(wd)) |>
#   group_by(sp) |>
#   summarise(num_individuals = n())

# # Print the species count
# print(species_count)

# # Create a mapping from species_id to species name and number of individuals
# species_map <- tallo_wd_200_df |>
#   filter(!is.na(wd)) |>
#   mutate(species_id = as.integer(as.factor(sp))) |>
#   group_by(species_id, sp) |>
#   summarise(num_individuals = n(), .groups = 'drop')

# species_map

# # Join the filtered beta parameters with the species count
# small_ess_species <- small_ess_beta |>
#   left_join(species_map, by = "species_id")

# # Print the result
# options(width = 200)
# print(small_ess_species)

# # Extract the unique species and their number of individuals
# unique_species_count <- small_ess_species |>
#   select(sp, num_individuals, species_id) |>
#   distinct()

# # Print the unique species and their number of individuals
# print(unique_species_count, n = Inf)
```


# Covariance between beta parameters
```{r}
# Extract beta samples
beta_samples <- gmm_nou_h$draws(variables = "beta", format = "draws_matrix")
str(beta_samples)
beta_samples

# Extract beta1, beta2, and beta3 separately
beta1_samples <- beta_samples[, grep("beta\\[\\d+,1\\]", colnames(beta_samples))]
beta2_samples <- beta_samples[, grep("beta\\[\\d+,2\\]", colnames(beta_samples))]
beta3_samples <- beta_samples[, grep("beta\\[\\d+,3\\]", colnames(beta_samples))]

str(beta1_samples)
str(beta2_samples)
str(beta3_samples)

# Combine the beta samples into a single data frame
combined_beta_samples <- cbind(beta1_samples, beta2_samples, beta3_samples)
str(combined_beta_samples)

# Convert the combined samples to a matrix
combined_beta_matrix <- as.matrix(combined_beta_samples)

# Compute the covariance matrix for the combined beta parameters
cov_matrix <- cov(combined_beta_matrix)
head(cov_matrix)

# Print the covariance matrix
str(cov_matrix)

# Calculate summary statistics for the covariance matrix (excluding diagonal)
cov_values <- cov_matrix[lower.tri(cov_matrix)]
summary(cov_values)

# Calculate the correlation matrix
cor_matrix <- cov2cor(cov_matrix)

# Summary statistics for the correlation values (excluding diagonal)
cor_values <- cor_matrix[lower.tri(cor_matrix, diag = FALSE)]
summary(cor_values)
head(cor_values)

threshold <- 0.7
strong_correlations <- sum(abs(cor_values) > threshold)

# Calculate the percentage of strong correlations
total_pairs <- length(cor_values)
percentage_strong <- (strong_correlations / total_pairs) * 100
percentage_strong

```

```{r}
summary(cor_values)
hist(cov_values)

hist(cov_values, breaks=50, main="Histogram of Covariance Values", xlab="Covariance Values", col="blue")
```

Key findings: 
The summary of covariance values shows a wide range, with a minimum of -1142.68 and a maximum of 1070.34. The mean is close to zero (0.5014), indicating that while there are some extreme values, the average covariance is relatively low. The median is also close to zero (0.0002), suggesting that the majority of covariances are small.

# Species with low ESS of gmm_nou_h model

```{r}
log_y <- stan_data_nlr_h$log_y
x <- stan_data_nlr_h$x
sp <- as.factor(stan_data_nlr_h$jj)

beta <- gmm_nou_h$summary(variable = "beta")

log_a2 <- beta |> filter(str_detect(variable, "beta\\[\\d+,1\\]")) |> pull(mean)
b2 <- beta |> filter(str_detect(variable, "beta\\[\\d+,2\\]")) |> pull(mean)
k1 <- beta |> filter(str_detect(variable, "beta\\[\\d+,3\\]")) |> pull(mean)

```

```{r}
# Filter beta parameters with small ESS
small_ess_beta <- beta |>
  filter(ess_bulk < 300) |>
  arrange(ess_bulk) |>
  mutate(species_id = as.integer(str_extract(variable, "\\d+")))

# Print the filtered beta parameters
print(small_ess_beta)

# Count the number of individuals per species
species_count <- tallo_wd_200_df |>
 filter(!is.na(wd)) |>
  group_by(sp) |>
  summarise(num_individuals = n())

# Print the species count
print(species_count)

# Create a mapping from species_id to species name and number of individuals
species_map <- tallo_wd_200_df |>
  filter(!is.na(wd)) |>
  mutate(species_id = as.integer(as.factor(sp))) |>
  group_by(species_id, sp) |>
  summarise(num_individuals = n(), .groups = 'drop')

species_map

# Join the filtered beta parameters with the species count
small_ess_species <- small_ess_beta |>
  left_join(species_map, by = "species_id")

# Print the result
options(width = 200)
print(small_ess_species)

# Extract the unique species and their number of individuals
unique_species_count <- small_ess_species |>
  select(sp, num_individuals, species_id) |>
  distinct()

# Print the unique species and their number of individuals
print(unique_species_count, n = Inf)
unique_species_count <- as.data.frame(unique_species_count)
# Save as a CSV file
write.csv(unique_species_count, "data/gmm_nou_h_lowESS.csv", row.names = FALSE)

small_ess_species

# Extract parameters only for species with low ESS
low_ess_species_ids <- small_ess_species$species_id
log_a2_low_ess <- log_a2[low_ess_species_ids]
b2_low_ess <- b2[low_ess_species_ids]
k1_low_ess <- k1[low_ess_species_ids]


# Compute fitted values for H using the gMM formula for species with low ESS
fitted_log_y_h_low_ess <- sapply(1:length(log_a2_low_ess), function(i) {
  log_a2_low_ess[i] + b2_low_ess[i] * log(x) - log(k1_low_ess[i] + x^b2_low_ess[i])
})


# Create a data frame for plotting
data_h_low_ess <- data.frame(H = exp(log_y), DBH = x, sp = sp)
head(data_h_low_ess)
summary(data_h_low_ess)

# Add species-specific fitted values to the data frame
for (i in 1:length(log_a2_low_ess)) {
  data_h_low_ess[[paste0("fitted_H_sp_", low_ess_species_ids[i])]] <- exp(fitted_log_y_h_low_ess[, i])
}

# Transform data for plotting
data_long_low_ess <- melt(data_h_low_ess, id.vars = c("H", "DBH", "sp"), measure.vars = grep("fitted_H_sp_", names(data_h_low_ess), value = TRUE))


head(data_long_low_ess)
summary(data_long_low_ess)

# write.csv(as.data.frame(data_long_low_ess), "data/data_long_low_ess.csv", row.names = FALSE)
```

# Make the separate plots for each species 

```{r}
# data_long_low_ess <- read_csv("data/data_long_low_ess.csv")
# data_long_low_ess

# Update the variable names to include species names
data_long_low_ess$variable <- sub("fitted_H_sp_", "", data_long_low_ess$variable)

head(data_long_low_ess)
summary(data_long_low_ess)
```

```{r}
# Function to plot and save each species
plot_species <- function(species_name) {
  species_data <- data_long_low_ess %>% filter(variable == species_name)
  species_plot <- ggplot(species_data, aes(x = DBH, y = value, color = variable)) +
    geom_line() +
    geom_point(data = data_h_low_ess %>% filter(sp == species_name), aes(x = DBH, y = H), alpha = 0.5, color = "grey") +
    labs(title = paste("Fitted Values for", species_name, "with ESS < 300"), x = "DBH", y = "H") +
    theme_minimal() +
    theme(legend.position = "bottom", legend.title = element_blank())
  
  # Save the plot
  ggsave(paste0("figs/gmm_nou_h", species_name, "_H_vs_DBH.png"), plot = species_plot, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
  
  # Display the plot
  print(species_plot)
}


library(ggplot2)
library(patchwork)
library(dplyr)

# Generate plots for each species and store in a list
plots <- lapply(unique(data_long_low_ess$variable), plot_species)

# Combine all plots into a single plot layout
combined_plot <- wrap_plots(plots, ncol = 4)  # 4 columns, 6 rows

# Save the combined plot to a PDF file
ggsave("figs/gmm_nou_h/combined_figures.pdf", combined_plot, width = 16, height = 24, units = "in", dpi = 300)

```

```{r}
# Define the plotting function
plot_species <- function(species_name) {
  # Filter data for the selected species
  species_data <- data_long_low_ess %>% filter(variable == species_name)
  species_dbh <- species_data$DBH
  
  # Determine the range of DBH for the selected species
  dbh_min <- min(species_dbh)
  dbh_max <- min(max(species_dbh), 50)  # Cap the max at 100 for better visualization
  
  # Adjust the x-axis limits
  x_limits <- c(dbh_min, dbh_max)
  
  species_plot <- ggplot(species_data, aes(x = DBH, y = value, color = variable)) +
    geom_line() +
    geom_point(data = data_h_low_ess %>% filter(sp == as.numeric(species_name)), aes(x = DBH, y = H), alpha = 0.5, color = "grey") +
    labs(title = paste("Fitted Values for", species_name, "with ESS < 300"), x = "DBH", y = "H") +
    theme_minimal() +
    theme(legend.position = "bottom", legend.title = element_blank()) +
    scale_x_continuous(limits = x_limits)
  
  # Save the plot
  ggsave(paste0("figs/gmm_nou_h_", species_name, "_H_vs_DBH.png"), plot = species_plot, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
  
  # Display the plot
  print(species_plot)
}

# Example usage for all species
unique_species <- unique(data_long_low_ess$variable)
plots <- lapply(unique_species, plot_species)

# Combine all plots into a single plot layout
combined_plot <- wrap_plots(plots, ncol = 4)  # 4 columns

# Save the combined plot to a PDF file
ggsave("figs/gmm_nou_h/combined_figures.pdf", combined_plot, width = 16, height = 24, units = "in", dpi = 300)
```




```{r}
# Add species-specific fitted values to the data frame
for (i in 1:length(log_a2_low_ess)) {
  species_name <- small_ess_species %>% filter(species_id == low_ess_species_ids[i]) %>% pull(sp) %>% unique()
  species_name <- species_name[1]  # Ensure we only get one unique species name
  data_h_low_ess[[paste0("fitted_H_sp_", species_name)]] <- exp(fitted_log_y_h_low_ess[, i])
}

# Transform data for plotting
data_long_low_ess <- data_h_low_ess %>%
  pivot_longer(cols = starts_with("fitted_H_sp_"), names_to = "variable", values_to = "value")

# Update the variable names to include species names
data_long_low_ess$variable <- sub("fitted_H_sp_", "", data_long_low_ess$variable)

head(data_long_low_ess)

plot_species <- function(species_name) {
  species_data <- data_long_low_ess %>% filter(variable == species_name)
  species_plot <- ggplot(species_data, aes(x = DBH, y = value, color = variable)) +
    geom_line() +
    geom_point(data = data_h_low_ess %>% filter(sp == species_name), aes(x = DBH, y = H), alpha = 0.5, color = "grey") +
    labs(title = paste("Fitted Values for", species_name, "with ESS < 300"), x = "DBH", y = "H") +
    theme_minimal() +
    theme(legend.position = "bottom", legend.title = element_blank())
  
  # Save the plot
  ggsave(paste0("figs/gmm_nou_h", species_name, "_H_vs_DBH.png"), plot = species_plot, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
  
  # Display the plot
  print(species_plot)
}
# Generate plots for each species and store in a list
plots <- lapply(unique(data_long_low_ess$variable), plot_species)

# Combine all plots into a single plot layout
combined_plot <- wrap_plots(plots, ncol = 4)  # 4 columns, 6 rows

# Save the combined plot to a PDF file
ggsave("figs/gmm_nou_h/combined_figures.pdf", combined_plot, width = 16, height = 24, units = "in", dpi = 300)

```


```{r}
# Function to plot and save each species
plot_species <- function(species_name) {
  species_data <- data_long_low_ess %>% filter(variable == species_name)
  species_points <- data_h_low_ess %>% filter(sp == species_name)
  species_plot <- ggplot(species_data, aes(x = DBH, y = value, color = variable)) +
    geom_line() +
    geom_point(data = data_h_low_ess %>% filter(sp == species_name), aes(x = DBH, y = H), alpha = 0.5, color = "grey") +
    labs(title = paste("Fitted Values for", species_name, "with ESS < 300"), x = "DBH", y = "Fitted H") +
    theme_minimal() +
    theme(legend.position = "bottom", legend.title = element_blank())
  
  # Save the plot
  ggsave(paste0("figs/gmm/", gsub(" ", "_", species_name), "2_H_vs_DBH.png"), plot = species_plot, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
  
  # Display the plot
  print(species_plot)
}

# Loop through each species and plot
unique_species_names <- unique(data_long_low_ess$variable)
for (species in unique_species_names) {
  plot_species(species)
}
```

```{r}
# Function to plot and save each species
plot_species <- function(species_name) {
  species_data <- data_long_low_ess %>% filter(variable == species_name)
  species_points <- data_h_low_ess %>% filter(sp == species_name)
  species_plot <- ggplot(species_data, aes(x = DBH, y = value, color = variable)) +
    geom_line() +
    geom_point(data = species_points, aes(x = DBH, y = H), alpha = 0.5, color = "grey") +
    labs(title = paste("Fitted Values for", species_name, "with ESS < 300"), x = "DBH", y = "Fitted H") +
    theme_minimal() +
    theme(legend.position = "bottom", legend.title = element_blank())
  
  # Save the plot
  ggsave(paste0("figs/", gsub(" ", "_", species_name), "1_H_vs_DBH.png"), plot = species_plot, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
  
  # Display the plot
  print(species_plot)
}

# Loop through each species and plot
unique_species_names <- unique(data_long_low_ess$variable)
for (species in unique_species_names) {
  plot_species(species)
}
```



```{r}
library(cowplot)

# Function to create each species plot
create_species_plot <- function(species_name) {
  species_data <- data_long_low_ess %>% filter(variable == species_name)
  species_points <- data_h_low_ess %>% filter(sp == species_name)
  ggplot(species_data, aes(x = DBH, y = value, color = variable)) +
    geom_line() +
    geom_point(data = species_points, aes(x = DBH, y = H), alpha = 0.5, color = "grey") +
    labs(title = paste("Fitted Values for", species_name, "with ESS < 300"), x = "DBH", y = "Fitted H") +
    theme_minimal() +
    theme(legend.position = "none", legend.title = element_blank())
}

# Create a list of plots
unique_species_names <- unique(data_long_low_ess$variable)
plots <- lapply(unique_species_names, create_species_plot)

# Define the number of plots per page and total pages
plots_per_page <- 3 * 8

# Open a PDF device to save the plots
pdf("figs/species_fitted_plots.pdf", width = 11, height = 8.5)

# Loop through the pages and plot
for (i in seq(1, length(plots), by = plots_per_page)) {
  page_plots <- plots[i:min(i + plots_per_page - 1, length(plots))]
  plot_grid(plotlist = page_plots, ncol = 3, nrow = 8)
}

# Close the PDF device
dev.off()
```


# Arrange figures 

```{r}
library(ggplot2)
library(patchwork)
library(grid)
library(png)
library(jpeg)

# Directory containing the images
image_dir <- "figs/gmm1"
image_files <- list.files(image_dir, pattern = "\\.(png|PNG|jpg|jpeg|JPG|JPEG|gif|GIF|svg|SVG)$", full.names = TRUE)

# Check if any image files are found
if (length(image_files) == 0) {
  stop("No image files found in the directory.")
}

# Create a list to store the plots
plots <- list()

# Create a ggplot object for each image and add it to the list
for (image_file in image_files) {
  img <- NULL
  if (grepl("\\.png$|\\.PNG$", image_file)) {
    img <- try(readPNG(image_file), silent = TRUE)
  } else if (grepl("\\.jpg$|\\.jpeg$|\\.JPG$|\\.JPEG$", image_file)) {
    img <- try(readJPEG(image_file), silent = TRUE)
  } else {
    next # Skip unsupported file types
  }
  
  # Check if the image was successfully read
  if (inherits(img, "try-error")) {
    message("Failed to read image: ", image_file)
    next
  }
  
  plot <- ggplot() +
    annotation_custom(rasterGrob(img, width = unit(1, "npc"), height = unit(1, "npc")), -Inf, Inf, -Inf, Inf) +
    ggtitle(basename(image_file)) +
    theme_void() +
    theme(plot.title = element_text(size = 10))
  
  plots <- append(plots, list(plot))
}

# Check if any plots were created
if (length(plots) == 0) {
  stop("No plots created. Please check your image files.")
}

# Combine all plots into a single plot layout
combined_plot <- wrap_plots(plots, ncol = 4) # 4 columns

# Save the combined plot to a PDF file
ggsave("figs/combined_figures.pdf", combined_plot, width = 16, height = 24, dpi = 300 ) # Adjust width and height as needed
```

# Check the covariance

```{r}
# Load the required library
library(cmdstanr)
library(posterior)

gmm_nou_h <- tar_read(fit_nlr7_mcmc_gmm_nou_h)

str(gmm_nou_h)


# Extract the posterior samples directly as a draws_array
posterior_samples <- as_draws_array(gmm_nou_h$draws())

# Number of posterior samples
num_samples <- dim(posterior_samples)[1]
head(num_samples)

# Assuming K is known
K <- 3  # Change this to the actual value of K

# Extract L_Sigma_beta samples
# The variable names for L_Sigma_beta may be different; adapt as necessary
L_Sigma_beta_samples <- posterior_samples[, , grep("^L_Sigma_beta", dimnames(posterior_samples)$variable)]

# Initialize array to store covariance matrices
cov_matrices <- array(NA, dim = c(K, K, num_samples))

# Calculate covariance matrix for each sample
for (i in 1:num_samples) {
  L_Sigma_beta <- matrix(L_Sigma_beta_samples[i, , ], nrow = K, byrow = TRUE)
  cov_matrices[,,i] <- L_Sigma_beta %*% t(L_Sigma_beta)
}

# Calculate the mean covariance matrix
mean_cov_matrix <- apply(cov_matrices, c(1, 2), mean)

# Print the mean covariance matrix
print(mean_cov_matrix)

# Calculate the correlations
mean_cor_matrix <- cov2cor(mean_cov_matrix)

# Print the mean correlation matrix
print(mean_cor_matrix)
```