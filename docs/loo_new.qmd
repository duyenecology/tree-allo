---
title: "Comparing models"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)

```


```{r, include=FALSE}
library(targets)
library(dplyr)
# library(officer)
library(stringr)
library(here)
# tar_make()
```

# Loading data

```{r}
# Read the loo_tbl
loo_tbl <- tar_read(loo_tbl)

print(loo_tbl , n = Inf)


# H models
h_models <- loo_tbl |>
  filter(str_detect(tmp, "_h"), !str_detect(sp_biome, "biome")) |>
  arrange(looic)

print(h_models)

# CR models
cr_models <- loo_tbl |>
  filter(str_detect(tmp, "_cr"), !str_detect(sp_biome, "biome")) |>
  arrange(looic)

print(cr_models)

# DBH models
dbh_models <- loo_tbl |>
  filter(str_detect(tmp, "dbh|dbh1|dbh2|dbh3"), !str_detect(sp_biome, "biome")) |>
  arrange(looic)

print(dbh_models)
```


# Calculating ΔLOOIC

```{r}
calculate_delta_looic <- function(df) {
  df <- df |>
    group_by(div) |>
    arrange(looic, .by_group = TRUE) |>
    mutate(ΔLOOIC = looic - min(looic)) |>
    ungroup()
  return(df)
}

# H models
h_models_tbl <- h_models |>
  filter(str_detect(tmp, "_h")) |>
  mutate(
    Wood_Density = ifelse(wd == "no", "Without", "With")
  ) |>
  select(tmp, model, div, Wood_Density, elpd, p_loo, looic) |>
  calculate_delta_looic()

print(h_models_tbl)

# CR models
cr_models_tbl <- cr_models |>
  filter(str_detect(tmp, "_cr")) |>
  mutate(
    Wood_Density = ifelse(wd == "no", "Without", "With")
  ) |>
  select(tmp, model, div, Wood_Density, elpd, p_loo, looic) |>
  calculate_delta_looic()

print(cr_models_tbl)

# DBH models
dbh_models_tbl <- dbh_models |>
  filter(str_detect(tmp, "dbh|dbh1|dbh2|dbh3")) |>
  mutate(
    Wood_Density = ifelse(wd == "no", "Without", "With")
  ) |>
  select(tmp, model, div, Wood_Density, elpd, p_loo, looic) |>
  calculate_delta_looic()

print(dbh_models_tbl)

```

# Formating table

```{r}
format_table <- function(df, title) {
  formatted_df <- df |>
    mutate(
      # Define Dependent Variable based on the model type
      `Dependent variable` = case_when(
        grepl("dbh", tmp) ~ "DBH",
        grepl("_h", tmp) ~ "Tree Height",
        grepl("_cr", tmp) ~ "Crown Radius",
        TRUE ~ NA_character_
      ),
      # Define Predictor Variable for each model type and specific cases
      `Predictor variable` = case_when(
        grepl("dbh_mcmc_pl_wd", tmp) ~ "CR, H",
        grepl("dbh1", tmp) ~ "CR × H",
        grepl("dbh2", tmp) ~ "CR",
        grepl("dbh3", tmp) ~ "H",
        grepl("dbh$", tmp) ~ "CR, H",
        grepl("_h", tmp) ~ "DBH",
        grepl("_cr", tmp) ~ "DBH",
        TRUE ~ NA_character_
      ),
      # Map model types to simplified names
      `Functional form` = case_when(
        grepl("pl", model, ignore.case = TRUE) ~ "Power-law",
        grepl("gmm", model, ignore.case = TRUE) ~ "gMM",
        grepl("weibull", model, ignore.case = TRUE) ~ "Weibull",
        TRUE ~ model  # Preserve original name if no match found
      )
    ) |>
    rename(
      "Division" = div,
      "Wood Density" = Wood_Density,
      "ELPD" = elpd,
      "pLOO" = p_loo,
      "LOOIC" = looic,
      "ΔLOOIC" = ΔLOOIC
    ) |>
    mutate(across(c(ELPD, pLOO, LOOIC, `ΔLOOIC`), \(x) round(x, 2))) |>
    select(`Dependent variable`, `Predictor variable`, `Functional form`, Division, `Wood Density`, ELPD, pLOO, LOOIC, `ΔLOOIC`) |>
    as.data.frame()
  
  return(formatted_df)
}

h_models_tbl_fm <- format_table(h_models_tbl, "Tree Height Models")
cr_models_tbl_fm <- format_table(cr_models_tbl, "Crown Radius Models")
dbh_models_tbl_fm <- format_table(dbh_models_tbl, "DBH Models")

options(width = 200)
print(h_models_tbl_fm)
print(cr_models_tbl_fm)
print(dbh_models_tbl_fm)

```