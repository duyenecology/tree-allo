---
title: "Wood density vs. H-DBH allometry parameters (Weibull)"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```


```{r, include=FALSE}
library(targets)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(patchwork)
library(posterior)
options(width = 150)
```

# Read in data

- What is the difference between fit_wd_data_ang_h (768 sp) and fit_wd_ang_h_data (1214 sp), same for Gym case (62 vs 76 sp)?

- What is S parameter in h_data?

- I do not see the S parameter in weibull_wd.stan model.

- Best predictive model for Ang and Gym: Weibull

# Summary result

## Ang

```{r}
wb_h_wd_ang <- tar_read(fit_wd_ang_h_summary_weibull_wd)
wb_h_wd_ang
```

- Key finding: gamma_slope[1] and gamma_slope[2]: The 95% CIs overlap 0, so the effect of wood density to a and b are insignificant. gamma_slope[3]: The 95% CI does not overlap 0 (from -0.0254 to -0.00591), indicating that this effect to k is significant for *Angiosperm*.

## Gym

```{r}
wb_h_wd_gym <- tar_read(fit_wd_gym_h_summary_weibull_wd)
wb_h_wd_gym
```

- Key finding: The 95% CIs of gamma_slope parameters all do overlap 0. Hence, the effect of wood density on the H-DBH allometry of *Gymnosperms* is statistically insignificant.


# Plotting

## Data preparation

### Ang

```{r}
tallo_wd_df_h <- tar_read(tallo_wd_df_h)
tallo_wd_df_h

ang_h_df <- tallo_wd_df_h |> filter(division == "Angiosperm")
ang_h_df

wd_df_h_ang <- ang_h_df |>
  group_by(sp) |>
  summarize(wd = mean(wd), .groups = "drop") |>
  mutate(wd_s = scale(wd) |> as.numeric(), sp_id = row_number())

wd_df_h_ang

```

- 1214 species

```{r}
wb_h_wd_ang_draws <- tar_read(fit_wd_ang_h_draws_weibull_wd)

gamma_ang_h <- wb_h_wd_ang_draws |>
  select(starts_with("gamma"))

beta_ang_h <- wb_h_wd_ang_draws |>
  select(starts_with("beta["))

beta_ang_h_long <- beta_ang_h |>
  pivot_longer(
    cols = everything(),
    names_to = c("species", "parameter"),
    names_pattern = "beta\\[(\\d+),(\\d+)\\]",
    names_transform = list(species = as.integer, parameter = as.integer),
    values_to = "value"
  ) |>
  mutate(parameter = case_when(
    parameter == 1 ~ "log_a",
    parameter == 2 ~ "b",
    parameter == 3 ~ "k"
  ),
  value = log(value))

plot_ang_h_data <- beta_ang_h_long |>
  left_join(wd_df_h_ang, by = c("species" = "sp_id"))

plot_ang_h_data
```


### Gym

#### Species ID

```{r}
gym_h_df <- tallo_wd_df_h |> filter(division == "Gymnosperm")
gym_h_df

unique_sp_h_gym <- gym_h_df |>
  distinct(sp)

unique_sp_h_gym


wd_df_h_gym <- gym_h_df |>
  group_by(sp) |>
  summarize(wd = mean(wd), .groups = "drop") |>
  mutate(wd_s = scale(wd) |> as.numeric(), sp_id = row_number())

wd_df_h_gym

wd_seq_h_gym <- seq(min(wd_df_h_gym$wd_s), max(wd_df_h_gym$wd_s), length.out = 100)

wd_df_h_gym_seq_df <- data.frame(
  wd_s = wd_seq_h_gym,
  wd = approx(wd_df_h_gym$wd_s, wd_df_h_gym$wd, xout = wd_seq_h_gym)$y  
)
```

- 76 species

#### Extracting parameters

- WD vs a/b/k: insignificant 

```{r}
wb_h_wd_gym_draws <- tar_read(fit_wd_gym_h_draws_weibull_wd)
wb_h_wd_gym_draws

fit_wd_gym_h_data <- tar_read(fit_wd_gym_h_data)


wd_s <- fit_wd_gym_h_data$u[, 2]
length(wd_s)

gamma_gym_h <- wb_h_wd_gym_draws |>
  select(starts_with("gamma"))

gamma_gym_h
  

beta_gym_h <- wb_h_wd_gym_draws |>
  select(starts_with("beta["))

beta_gym_h

beta_gym_h_long <- beta_gym_h |>
  pivot_longer(
    cols = everything(),
    names_to = c("species", "parameter"),
    names_pattern = "beta\\[(\\d+),(\\d+)\\]",
    names_transform = list(species = as.integer, parameter = as.integer),
    values_to = "value"
  ) |>
  mutate(parameter = case_when(
    parameter == 1 ~ "log_a",
    parameter == 2 ~ "b",
    parameter == 3 ~ "k"
  ),
  value = log(value)) 

beta_gym_h_long


plot_gym_h_data <- beta_gym_h_long |>
  left_join(wd_df_h_gym, by = c("species" = "sp_id"))

plot_gym_h_data
```


# Plotting function

```{r}
prepare_and_plot_parameter <- function(wd_df, fit_draws_df, param_name, color_point, color_ribbon, line_color, line_type = "solid", show_ribbon = TRUE) {
  
  param_index <- which(c("log_a", "b", "k") == param_name)
  
  gamma_param <- fit_draws_df |>
    select(paste0("gamma_int[", param_index, "]"), paste0("gamma_slope[", param_index, "]"))

  transform_value <- if (param_name == "log_a") {
    function(x) exp(x)  # Apply exp() only for log_a
  } else {
    function(x) x  # No transformation for b and k
  }
  
  wd_seq <- seq(min(wd_df$wd_s), max(wd_df$wd_s), length.out = 100)
  wd_seq_df <- data.frame(
    wd_s = wd_seq,
    wd = approx(wd_df$wd_s, wd_df$wd, xout = wd_seq)$y
  )
  
  lines_data <- do.call(rbind, lapply(1:nrow(gamma_param), function(i) {
    data.frame(
      wd_s = wd_seq_df$wd_s,
      wd = wd_seq_df$wd,
      value = transform_value(gamma_param[[1]][i] + gamma_param[[2]][i] * wd_seq_df$wd_s),
      draw = i
    )
  }))
  
  median_intercept <- median(gamma_param[[1]], na.rm = TRUE)
  median_slope <- median(gamma_param[[2]], na.rm = TRUE)

  fit_line <- data.frame(
    wd_s = wd_seq_df$wd_s,
    wd = wd_seq_df$wd,
    value = transform_value(median_intercept + median_slope * wd_seq_df$wd_s)
  )
  
  ci_ribbon <- lines_data |>
    group_by(wd) |>
    summarize(
      lower = quantile(value, 0.025, na.rm = TRUE),
      upper = quantile(value, 0.975, na.rm = TRUE),
      .groups = "drop"
    )

  fit_with_ci <- left_join(fit_line, ci_ribbon, by = "wd")

  summary_stats <- fit_draws_df |>
    select(starts_with("beta[")) |>
    pivot_longer(
      cols = everything(),
      names_to = c("species", "parameter"),
      names_pattern = "beta\\[(\\d+),(\\d+)\\]",
      names_transform = list(species = as.integer, parameter = as.integer),
      values_to = "value"
    ) |>
    mutate(parameter = case_when(
      parameter == 1 ~ "log_a",
      parameter == 2 ~ "b",
      parameter == 3 ~ "k"
    )) |>
    filter(parameter == param_name) |>
    left_join(wd_df, by = c("species" = "sp_id")) |>
    group_by(species, parameter, wd, wd_s) |>
    summarize(
      median = median(value, na.rm = TRUE),
      lower = quantile(value, 0.025, na.rm = TRUE),
      upper = quantile(value, 0.975, na.rm = TRUE),
      .groups = "drop"
    )

  if (param_name == "log_a") {
    summary_stats <- summary_stats |>
      mutate(median = exp(median), lower = exp(lower), upper = exp(upper))
  }

  y_label <- case_when(
    param_name == "log_a" ~ "Amplitude parameter, a",
    param_name == "b" ~ "Scale parameter, b",
    param_name == "k" ~ "Shape parameter, k"
  )

  plot <- ggplot() +
    geom_errorbar(data = summary_stats, 
                  aes(x = wd, ymin = lower, ymax = upper), 
                  width = 0, linewidth = 0.2, color = color_ribbon) +
    geom_point(data = summary_stats, 
               aes(x = wd, y = median), color = color_point, size = 0.5) +
    geom_line(data = fit_line, aes(x = wd, y = value), 
              color = line_color, linewidth = 1, linetype = line_type) +
    theme_minimal() +
    labs(
      x = "Wood Density (g cm⁻³)",
      y = y_label
    ) +
    theme(
      plot.title = element_text(hjust = 0.5),
      axis.title.x = element_text(size = 12),
      axis.title.y = element_text(size = 12)
    )

  if (show_ribbon) {
    plot <- plot +
      geom_ribbon(data = fit_with_ci, aes(x = wd, ymin = lower, ymax = upper), 
                  alpha = 0.5, fill = color_ribbon)
  }
  
  return(plot)
}

```


```{r}
p1 <- prepare_and_plot_parameter(
  wd_df = wd_df_h_ang, 
  fit_draws_df = wb_h_wd_ang_draws, 
  param_name = "log_a", 
  color_point = "#9e9ac8", 
  color_ribbon = "#cbc9e2", 
  line_color = "#6a51a3",
  line_type = "dashed", 
  show_ribbon = FALSE
)


p2 <- prepare_and_plot_parameter(
  wd_df = wd_df_h_ang, 
  fit_draws_df = wb_h_wd_ang_draws, 
  param_name = "b", 
  color_point = "#74c476", 
  color_ribbon = "#bae4b3", 
  line_color = "#238b45",
  line_type = "dashed", 
  show_ribbon = FALSE
)


p3 <- prepare_and_plot_parameter(
  wd_df = wd_df_h_ang, 
  fit_draws_df = wb_h_wd_ang_draws, 
  param_name = "k",
  color_point = "#6baed6", 
  color_ribbon = "#8fcbee", 
  line_color = "#2171b5", 
  show_ribbon = TRUE
)

p4 <- prepare_and_plot_parameter(
  wd_df = wd_df_h_gym, 
  fit_draws_df = wb_h_wd_gym_draws, 
  param_name = "log_a", 
  color_point = "#9e9ac8", 
  color_ribbon = "#cbc9e2", 
  line_color = "#6a51a3",
  line_type = "dashed", 
  show_ribbon = FALSE
)

p5 <- prepare_and_plot_parameter(
  wd_df = wd_df_h_gym, 
  fit_draws_df = wb_h_wd_gym_draws, 
  param_name = "b", 
  color_point = "#74c476", 
  color_ribbon = "#bae4b3", 
  line_color = "#238b45",
  line_type = "dashed", 
  show_ribbon = FALSE
)


p6 <- prepare_and_plot_parameter(
  wd_df = wd_df_h_gym, 
  fit_draws_df = wb_h_wd_gym_draws, 
  param_name = "k",
  color_point = "#6baed6", 
  color_ribbon = "#8fcbee", 
  line_color = "#2171b5", 
  line_type = "dashed", 
  show_ribbon = FALSE
)


p1
p2
p3
p4
p5
p6
```


# Making figure

```{r}
prepare_and_plot_parameter <- function(wd_df, fit_draws_df, param_name, color_point, color_ribbon, line_color, line_type = "solid", show_ribbon = TRUE) {
    # Prepare wood density data
    wd_df <- wd_df |>
      filter(!is.na(wd_s)) |>
      group_by(sp) |>
      summarize(wd = mean(wd, na.rm = TRUE)) |>
      mutate(wd_s = scale(wd) |> as.numeric(), sp_id = 1:n())

    # Extract gamma and beta parameters from fit_draws
    gamma_params <- fit_draws |>
      dplyr::select(starts_with("gamma"))

    # Reshape the beta parameters for analysis
    beta_params <- fit_draws |>
      dplyr::select(starts_with("beta[")) |>
      pivot_longer(
        cols = everything(),
        names_to = c("species", "parameter"),
        names_pattern = "beta\\[(\\d+),(\\d+)\\]",
        names_transform = list(species = as.integer, parameter = as.integer),
        values_to = "value"
      ) |>
      mutate(parameter = case_when(
        parameter == 1 ~ "log_a",
        parameter == 2 ~ "b",
        parameter == 3 ~ "k"
      ))

    # Join wood density data with beta parameters
    plot_data <- beta_params |>
      left_join(wd_df, by = c("species" = "sp_id"))

    # Summarize the posterior distributions for plotting
    summary_stats <- plot_data |>
      group_by(species, parameter, wd, wd_s) |>
      summarize(
        median = median(value, na.rm = TRUE),
        lower = quantile(value, 0.025, na.rm = TRUE),
        upper = quantile(value, 0.975, na.rm = TRUE),
        .groups = "drop"
      )

    # Create a sequence for wd_s and merge with corresponding wd values
    wd_seq <- seq(min(wd_df$wd_s), max(wd_df$wd_s), length.out = 100)
    wd_seq_df <- data.frame(
      wd_s = wd_seq,
      wd = approx(wd_df$wd_s, wd_df$wd, xout = wd_seq)$y
    )

    # Extract relevant gamma parameters for the chosen model
    gamma_param <- gamma_params |>
      dplyr::select(paste0("gamma[1,", which(c("log_a", "b", "k") == param_name), "]"), 
             paste0("gamma[2,", which(c("log_a", "b", "k") == param_name), "]"))

    # Generate lines and fit data for the selected parameter
    transform_value <- if (param_name == "log_a") {
      function(x) exp(exp(x))
    } else {
      function(x) exp(x)
    }
    
    lines_data <- do.call(rbind, lapply(1:nrow(gamma_param), function(i) {
      data.frame(
        wd_s = wd_seq_df$wd_s,
        wd = wd_seq_df$wd,
        value = transform_value(gamma_param[[1]][i] + gamma_param[[2]][i] * wd_seq_df$wd_s),
        draw = i
      )
    }))
    
    # Compute the fit line and 95% credible intervals
    median_intercept <- median(gamma_param[[1]], na.rm = TRUE)
    median_slope <- median(gamma_param[[2]], na.rm = TRUE)

    fit_line <- data.frame(
      wd_s = wd_seq_df$wd_s,
      wd = wd_seq_df$wd,
      value = transform_value(median_intercept + median_slope * wd_seq_df$wd_s)
    )
    
    ci_ribbon <- lines_data |>
      group_by(wd) |>
      summarize(
        lower = quantile(value, 0.025, na.rm = TRUE),
        upper = quantile(value, 0.975, na.rm = TRUE),
        .groups = "drop"
      )

    fit_with_ci <- left_join(fit_line, ci_ribbon, by = "wd")

    # Apply transformation for log_a in summary_stats
    if (param_name == "log_a") {
      summary_stats <- summary_stats |>
        mutate(median = exp(median), lower = exp(lower), upper = exp(upper))
    }
    
    # Set y-axis label based on parameter
    y_label <- case_when(
      param_name == "log_a" ~ "Amplitude parameter, a",
      param_name == "b" ~ "Scale parameter, b",
      param_name == "k" ~ "Shape parameter, k"
    )

    # Create plot
    plot <- ggplot() +
      geom_errorbar(data = summary_stats |> filter(parameter == param_name), 
                    aes(x = wd, ymin = lower, ymax = upper), 
                    width = 0, linewidth = 0.2, color = color_ribbon) +
      geom_point(data = summary_stats |> filter(parameter == param_name), 
                 aes(x = wd, y = median), color = color_point, size = 0.5) +
      geom_line(data = fit_line, aes(x = wd, y = value), 
                color = line_color, linewidth = 0.6, linetype = line_type) +
      theme_minimal() +
      labs(x = "Wood Density (g cm⁻³)", y = y_label) +
      theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_text(size = 9), axis.title.y = element_text(size = 9))

    if (show_ribbon) {
      plot <- plot + geom_ribbon(data = fit_with_ci, aes(x = wd, ymin = lower, ymax = upper), alpha = 0.5, fill = color_ribbon)
    }

    return(plot)
  }

```

```{r}
p1 <- prepare_and_plot_parameter(
  fit_wd_gym_h_data,
  wb_h_wd_gym_draws,
  wd_df,
  "log_a", "#9e9ac8", "#cbc9e2", "#6a51a3",
  show_ribbon = TRUE)
 

```

```{r}
tallo_wd_df_h <- tar_read(tallo_wd_df_h)
tallo_wd_df_h

ang_h_df <- tallo_wd_df_h |> filter(division == "Angiosperm")
ang_h_df

gym_h_df <- tallo_wd_df_h |> filter(division == "Gymnosperm")
gym_h_df

fit_wd_ang_h_draws_weibull_wd <- tar_read(fit_wd_ang_h_draws_weibull_wd)


fit_wd_gym_h_draws_weibull_wd <- tar_read(fit_wd_gym_h_draws_weibull_wd)

fit_wd_ang_h_data <- tar_read(fit_wd_ang_h_data)

fit_wd_gym_h_data <- tar_read(fit_wd_gym_h_data)


```



```{r}
generate_wd_para_h <- function(tallo_wd_df_h, fit_wd_ang_h_draws_weibull_wd, fit_wd_gym_h_draws_weibull_wd, fit_wd_ang_h_data, fit_wd_gym_h_data) {


# Filter Angiosperms and Gymnosperms
  ang_h_df <- tallo_wd_df_h |> filter(division == "Angiosperm")
  gym_h_df <- tallo_wd_df_h |> filter(division == "Gymnosperm")

  # Group by species and calculate mean wood density for Angiosperms
  wd_df_ang <- ang_h_df |>
    group_by(sp) |>
    summarize(wd = mean(wd, na.rm = TRUE)) |>
    mutate(wd_s = scale(wd) |> as.numeric(), sp_id = row_number())

  # Group by species and calculate mean wood density for Gymnosperms
  wd_df_gym <- gym_h_df |>
    group_by(sp) |>
    summarize(wd = mean(wd, na.rm = TRUE)) |>
    mutate(wd_s = scale(wd) |> as.numeric(), sp_id = row_number())

  # Create the sequence for wood density for Angiosperms and Gymnosperms separately
  wd_seq_ang <- seq(min(wd_df_ang$wd_s), max(wd_df_ang$wd_s), length.out = 100)
  wd_seq_gym <- seq(min(wd_df_gym$wd_s), max(wd_df_gym$wd_s), length.out = 100)

  wd_seq_df_ang <- data.frame(
    wd_s = wd_seq_ang,
    wd = approx(wd_df_ang$wd_s, wd_df_ang$wd, xout = wd_seq_ang)$y
  )

  wd_seq_df_gym <- data.frame(
    wd_s = wd_seq_gym,
    wd = approx(wd_df_gym$wd_s, wd_df_gym$wd, xout = wd_seq_gym)$y
  )

  # Function to prepare and plot parameters (log_a, b, k) for H-DBH of Ang and Gym
  prepare_and_plot_parameter <- function(stan_data, fit_draws, wd_df, param_name, color_point, color_ribbon, line_color, line_type = "solid", show_ribbon = TRUE) {
    # Prepare wood density data
    wd_df <- wd_df |>
      filter(!is.na(wd_s)) |>
      group_by(sp) |>
      summarize(wd = mean(wd, na.rm = TRUE)) |>
      mutate(wd_s = scale(wd) |> as.numeric(), sp_id = 1:n())

    # Extract gamma and beta parameters from fit_draws
    gamma_params <- fit_draws |>
      dplyr::select(starts_with("gamma"))

    # Reshape the beta parameters for analysis
    beta_params <- fit_draws |>
      dplyr::select(starts_with("beta[")) |>
      pivot_longer(
        cols = everything(),
        names_to = c("species", "parameter"),
        names_pattern = "beta\\[(\\d+),(\\d+)\\]",
        names_transform = list(species = as.integer, parameter = as.integer),
        values_to = "value"
      ) |>
      mutate(parameter = case_when(
        parameter == 1 ~ "log_a",
        parameter == 2 ~ "b",
        parameter == 3 ~ "k"
      ))

    # Join wood density data with beta parameters
    plot_data <- beta_params |>
      left_join(wd_df, by = c("species" = "sp_id"))

    # Summarize the posterior distributions for plotting
    summary_stats <- plot_data |>
      group_by(species, parameter, wd, wd_s) |>
      summarize(
        median = median(value, na.rm = TRUE),
        lower = quantile(value, 0.025, na.rm = TRUE),
        upper = quantile(value, 0.975, na.rm = TRUE),
        .groups = "drop"
      )

    # Create a sequence for wd_s and merge with corresponding wd values
    wd_seq <- seq(min(wd_df$wd_s), max(wd_df$wd_s), length.out = 100)
    wd_seq_df <- data.frame(
      wd_s = wd_seq,
      wd = approx(wd_df$wd_s, wd_df$wd, xout = wd_seq)$y
    )

    # Extract relevant gamma parameters for the chosen model
    gamma_param <- gamma_params |>
      dplyr::select(paste0("gamma[1,", which(c("log_a", "b", "k") == param_name), "]"), 
             paste0("gamma[2,", which(c("log_a", "b", "k") == param_name), "]"))

    # Generate lines and fit data for the selected parameter
    transform_value <- if (param_name == "log_a") {
      function(x) exp(exp(x))
    } else {
      function(x) exp(x)
    }
    
    lines_data <- do.call(rbind, lapply(1:nrow(gamma_param), function(i) {
      data.frame(
        wd_s = wd_seq_df$wd_s,
        wd = wd_seq_df$wd,
        value = transform_value(gamma_param[[1]][i] + gamma_param[[2]][i] * wd_seq_df$wd_s),
        draw = i
      )
    }))
    
    # Compute the fit line and 95% credible intervals
    median_intercept <- median(gamma_param[[1]], na.rm = TRUE)
    median_slope <- median(gamma_param[[2]], na.rm = TRUE)

    fit_line <- data.frame(
      wd_s = wd_seq_df$wd_s,
      wd = wd_seq_df$wd,
      value = transform_value(median_intercept + median_slope * wd_seq_df$wd_s)
    )
    
    ci_ribbon <- lines_data |>
      group_by(wd) |>
      summarize(
        lower = quantile(value, 0.025, na.rm = TRUE),
        upper = quantile(value, 0.975, na.rm = TRUE),
        .groups = "drop"
      )

    fit_with_ci <- left_join(fit_line, ci_ribbon, by = "wd")

    # Apply transformation for log_a in summary_stats
    if (param_name == "log_a") {
      summary_stats <- summary_stats |>
        mutate(median = exp(median), lower = exp(lower), upper = exp(upper))
    }
    
    # Set y-axis label based on parameter
    y_label <- case_when(
      param_name == "log_a" ~ "Amplitude parameter, a",
      param_name == "b" ~ "Scale parameter, b",
      param_name == "k" ~ "Shape parameter, k"
    )

    # Create plot
    plot <- ggplot() +
      geom_errorbar(data = summary_stats |> filter(parameter == param_name), 
                    aes(x = wd, ymin = lower, ymax = upper), 
                    width = 0, linewidth = 0.2, color = color_ribbon) +
      geom_point(data = summary_stats |> filter(parameter == param_name), 
                 aes(x = wd, y = median), color = color_point, size = 0.5) +
      geom_line(data = fit_line, aes(x = wd, y = value), 
                color = line_color, linewidth = 0.6, linetype = line_type) +
      theme_minimal() +
      labs(x = "Wood Density (g cm⁻³)", y = y_label) +
      theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_text(size = 9), axis.title.y = element_text(size = 9))

    if (show_ribbon) {
      plot <- plot + geom_ribbon(data = fit_with_ci, aes(x = wd, ymin = lower, ymax = upper), alpha = 0.5, fill = color_ribbon)
    }

    return(plot)
  }

  # Generate individual plots for both H-DBH of Ang and Gym
  p1 <- prepare_and_plot_parameter(fit_wd_ang_h_data, fit_wd_ang_h_draws_weibull_wd, wd_df, "log_a", "#9e9ac8", "#cbc9e2", "#6a51a3", "dashed", show_ribbon = FALSE)
  p2 <- prepare_and_plot_parameter(fit_wd_ang_h_data, fit_wd_ang_h_draws_weibull_wd, wd_df, "b", "#74c476", "#bae4b3", "#238b45", "dashed", show_ribbon = FALSE)
  p3 <- prepare_and_plot_parameter(fit_wd_ang_h_data, fit_wd_ang_h_draws_weibull_wd, wd_df, "k", "#6baed6", "#8fcbee", "#2171b5", show_ribbon = TRUE)
  p4 <- prepare_and_plot_parameter(fit_wd_gym_h_data, fit_wd_gym_h_draws_weibull_wd, wd_df, "log_a", "#9e9ac8", "#cbc9e2", "#6a51a3", "dashed", show_ribbon = FALSE)
  p5 <- prepare_and_plot_parameter(fit_wd_gym_h_data, fit_wd_gym_h_draws_weibull_wd, wd_df, "b", "#74c476", "#bae4b3", "#238b45", "dashed", show_ribbon = FALSE)
  p6 <- prepare_and_plot_parameter(fit_wd_gym_h_data, fit_wd_gym_h_draws_weibull_wd, wd_df, "k", "#6baed6", "#8fcbee", "#2171b5", "dashed", show_ribbon = FALSE)

  # Combine all plots
  p <- (p1 + labs(tag = "(a)", x = NULL) + theme(axis.text.x = element_blank()) |
                    p4 + labs(tag = "(b)", x = NULL) + theme(axis.title.y = element_blank(), axis.text.x = element_blank()) |
                    p2 + labs(tag = "(c)", x = NULL) + theme(axis.text.x = element_blank()) |
                    p5 + labs(tag = "(d)", x = NULL) + theme(axis.title.y = element_blank(), axis.text.x = element_blank()) |
                    p3 + labs(tag = "(e)", x = expression("Wood Density (g cm"^"-3"~")")) |
                    p6 + labs(tag = "(f)", x = expression("Wood Density (g cm"^"-3"~")")) + theme(axis.title.y = element_blank())) +
    plot_layout(ncol = 2, nrow = 3) +
    plot_annotation(tag_levels = list(c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)"))) &
    theme(
      plot.tag = element_text(face = "bold", size = 10), 
      axis.title = element_text(size = 10),
      axis.text = element_text(size = 9),
      plot.margin = margin(5, 5, 5, 5))

  # Add labels
  p <- ggdraw() +
    draw_plot(p, x = 0, y = 0, width = 1, height = 0.9) +  
    draw_label("Angiosperm", x = 0.25, y = 0.91, fontface = 'bold', size = 10) +  
    draw_label("Gymnosperm", x = 0.75, y = 0.91, fontface = 'bold', size = 10)

  return(p)
}
```


# Plotting p
```{r}


```




```{r}

```

```{r}


```