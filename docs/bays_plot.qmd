---
title: "Bayesian results"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```


# Load the required packages

```{r}
# Load necessary libraries
library(targets)
library(cmdstanr)
library(posterior)
library(loo)
library(bayesplot)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(rstantools)
library(kableExtra)
library(ggpubr)
```

# Compare Model Performance using PSIS-LOO
```{r}
# Load the models
pl_dbh <- tar_read(fit_lr_mcmc_power_law_dbh)
pl_dbh1 <- tar_read(fit_lr_mcmc_power_law_dbh1)
```

```{r}
# Extract log-likelihood for both models
log_lik_dbh <- pl_dbh$draws(variables = "log_lik", format = "draws_matrix")
log_lik_dbh_matrix <- as_draws_matrix(log_lik_dbh)

log_lik_dbh1 <- pl_dbh1$draws(variables = "log_lik", format = "draws_matrix")
log_lik_dbh1_matrix <- as_draws_matrix(log_lik_dbh1)

# Calculate LOO for both models
loo_dbh <- loo(log_lik_dbh_matrix, reloo = TRUE, save_psis = TRUE)
loo_dbh1 <- loo(log_lik_dbh1_matrix, reloo = TRUE, save_psis = TRUE)

# Print LOO results
print(loo_dbh)
print(loo_dbh1)

# Compare models
model_comparison <- loo_compare(loo_dbh1, loo_dbh)
print(model_comparison)

```


```{r}
# Extract relevant metrics
metrics <- data.frame(
  Dependent_variable = c("DBH"),
  Functional_form = c("Power_law", "gMM", "Weibull")
  Model = c("pl_dbh", "pl_dbh1", "pl_dbh_", "pl_dbh1_"),
  group_level_predictor = c("Wood density", "-", "Wood density", "-"),
  elpd_loo = c(loo_dbh$estimates[1, 1], loo_dbh1$estimates[1, 1]),
  se_elpd_loo = c(loo_dbh$estimates[1, 2], loo_dbh1$estimates[1, 2]),
  p_loo = c(loo_dbh$estimates[2, 1], loo_dbh1$estimates[2, 1]),
  se_p_loo = c(loo_dbh$estimates[2, 2], loo_dbh1$estimates[2, 2]),
  looic = c(loo_dbh$estimates[3, 1], loo_dbh1$estimates[3, 1]),
  se_looic = c(loo_dbh$estimates[3, 2], loo_dbh1$estimates[3, 2])
)

# Create the table as a plot
table_plot <- ggtexttable(metrics, rows = NULL, theme = ttheme("mBlue"))

# Save the table as an image
ggsave("figs/model_comparison_table.png", table_plot, width = 10, height = 6)

# Display the table in the document
print(table_plot)
```

## Visualization
```{r}
# Extract the posterior draws for pl_dbh
posterior_draws_dbh <- as_draws_matrix(pl_dbh$draws())
posterior_draws_dbh1 <- as_draws_matrix(pl_dbh1$draws())
```

## pl_dbh
```{r}
# Trace plots for parameters
trace_plot_dbh <- mcmc_trace(posterior_draws_dbh[, c("gamma[1,1]", "gamma[2,1]", "gamma[1,2]", "gamma[2,2]")]) +
  ggtitle("Trace Plots for Parameters (Model pl_dbh)")

# Density plots for parameters
density_plot_dbh <- mcmc_areas(posterior_draws_dbh[, c("gamma[1,1]", "gamma[2,1]", "gamma[1,2]", "gamma[2,2]")]) +
  ggtitle("Density Plots for Parameters (pl_dbh)")

# Pareto k diagnostics
pareto_k_plot_dbh <- plot(loo_dbh) +
  title("Pareto k Diagnostics (pl_dbh)")

# Combine and display plots for pl_dbh
grid.arrange(trace_plot_dbh, density_plot_dbh, ncol = 2)
grid.draw(pareto_k_plot_dbh)

```

## pl_dbh1
```{r}
# Trace plots for parameters
trace_plot_dbh1 <- mcmc_trace(posterior_draws[, c("gamma[1,1]", "gamma[2,1]", "gamma[1,2]", "gamma[2,2]")]) +
  ggtitle("Trace Plots for Parameters (pl_dbh1)")

# Density plots for parameters
density_plot_dbh1 <- mcmc_areas(posterior_draws[, c("gamma[1,1]", "gamma[2,1]", "gamma[1,2]", "gamma[2,2]")]) +
  ggtitle("Density Plots for Parameters (pl_dbh1)")

# Pareto k diagnostics
pareto_k_plot_dbh1 <- plot(loo_dbh1) +
  title("Pareto k Diagnostics")

# Combine and display plots
gridExtra::grid.arrange(trace_plot, density_plot, pareto_k_plot, ncol = 2)

```

# Marginal posterior predictive checks
```{r}
# stan_data_lr_dbh
# stan_data_lr_dbh1
stan_lr_data_dbh <- tar_read(stan_data_lr_dbh)
stan_lr_data_dbh1 <- tar_read(stan_data_lr_dbh1)
str(stan_lr_data_dbh)
str(stan_lr_data_dbh1)

str(stan_lr_data_dbh)
str(stan_lr_data_dbh1)
```

```{r}
predictive_function <- function(draws, data) {
  # Extract parameters from draws
  gamma <- as.matrix(draws[, grepl("gamma", colnames(draws))])
  
  # Compute posterior predictions
  predictions <- apply(gamma, 1, function(params) {
    # Example formula: y_pred = exp(params[1]) * data$log_x[, 1] ^ params[2]
    y_pred <- exp(params[1]) * data$log_x[, 1] ^ params[2]
    return(y_pred)
  })
  
  return(predictions)
}
```

## pl_dbh
```{r}
# Compute posterior predictions
y_rep_dbh <- predictive_function(posterior_draws_dbh, stan_lr_data_dbh)

# Assuming `log_y` is observed data
y_obs_dbh <- stan_lr_data_dbh$log_y

str(y_rep_dbh)
str(y_obs_dbh)

# Ensure dimensions match
y_rep_dbh <- t(y_rep_dbh) 
str(y_rep_dbh)

# Marginal posterior predictive checks
ppc_dbh <- ppc_loo_pit_overlay(
  y = y_obs_dbh,
  yrep = y_rep_dbh, 
  lw = weights(loo_dbh$psis_object)
) + ggtitle("Marginal Posterior Predictive Check (pl_dbh)")

print(ppc_dbh)
```

## pl_dbh1
```{r}
# Compute posterior predictions
y_rep_dbh1 <- predictive_function(posterior_draws_dbh1, stan_lr_data_dbh1)

# Assuming `log_y` is observed data
y_obs_dbh1 <- stan_lr_data_dbh1$log_y

# Ensure dimensions match
y_rep_dbh1 <- t(y_rep_dbh1)  # Transpose to match dimensions

# Marginal posterior predictive checks
ppc_dbh1 <- ppc_loo_pit_overlay(
  y = y_obs_dbh1,
  yrep = y_rep_dbh1, 
  lw = weights(loo_dbh1$psis_object)
) + ggtitle("Marginal Posterior Predictive Check (pl_dbh1)")

print(ppc_dbh1)
```
 

# Comparison of H model
```{r}
pl_h <-  tar_read(fit_lr_mcmc_power_law_h)
pl_h
gmm_h <-  tar_read(fit_nlr1_mcmc_gmm_h)
# gmm_h <- summary$gmm_h(variable = "gamma")
gmm_h
```

```{r}
# Extract log-likelihood for both models
log_lik_pl_h <- pl_h$draws(variables = "log_lik")
log_lik_pl_h_matrix <- as_draws_matrix(log_lik_pl_h)

log_lik_gmm_h <- gmm_h$draws(variables = "log_lik", format = "draws_matrix")
log_lik_gmm_h_matrix <- as_draws_matrix(log_lik_gmm_h)


# Calculate LOO for both models
loo_pl_h <- loo(log_lik_pl_h_matrix, reloo = TRUE, save_psis = TRUE)
loo_gmm_h <- loo(log_lik_gmm_h_matrix, reloo = TRUE, save_psis = TRUE)

# Print LOO results
print(loo_pl_h)
print(loo_gmm_h)

# Compare models
h_model_comparison <- loo_compare(loo_pl_h, loo_gmm_h)
print(h_model_comparison)
```

# Comparison of CR model 
```{r}
pl_cr <- tar_read(fit_lr_mcmc_power_law_cr)
pl_cr
gmm_cr <-  tar_read(fit_nlr1_mcmc_gmm_cr)
# gmm_cr <- summary$gmm_cr(variable = "gamma")
```

```{r}
# Extract log-likelihood for both models
log_lik_pl_cr <- pl_cr$draws(variables = "log_lik")
log_lik_pl_cr_matrix <- as_draws_matrix(log_lik_pl_cr)

log_lik_gmm_cr <- gmm_cr$draws(variables = "log_lik", format = "draws_matrix")
log_lik_gmm_cr_matrix <- as_draws_matrix(log_lik_gmm_cr)

# Calculate LOO for both models
loo_pl_cr <- loo(log_lik_pl_cr_matrix, reloo = TRUE, save_psis = TRUE)
loo_gmm_cr <- loo(log_lik_gmm_cr_matrix, reloo = TRUE, save_psis = TRUE)

# Print LOO results
print(loo_pl_cr)
print(loo_gmm_cr)

# Compare models
cr_model_comparison <- loo_compare(loo_pl_cr, loo_gmm_cr)
print(cr_model_comparison)
```

# Try to make plots
```{r}
pl_cr <- tar_read(fit_lr_mcmc_power_law_cr)
pl_cr
stan_lr_data_cr <- tar_read(stan_data_lr_cr)
str(stan_lr_data_cr)
```

```{r}
# Extract summaries
summary_pl_cr <- pl_cr$summary()

# Extract mean values for log(a) and b
log_a_mean <- summary_pl_cr[summary_pl_cr$variable == "gamma[1,1]", "mean"]
b_mean <- summary_pl_cr[summary_pl_cr$variable == "gamma[2,1]", "mean"]

# Convert log(a) to a
a_mean <- exp(log_a_mean)

# Define a function to make predictions using the power law model
make_predictions_pl <- function(a, b, x_seq) {
  a * x_seq^b
}

# Generate sequence for trunk diameter
dbh_seq <- seq(1, 100, length.out = 100)

# Generate predictions
cr_pred <- make_predictions_pl(a_mean, b_mean, dbh_seq)

df_pred_pl_cr <- data.frame(
  dbh = dbh_seq,
  crown_radius = cr_pred
)

```


```{r}
str(stan_lr_data_h)
head(stan_lr_data_h)

hist(stan_lr_data_h$log_y)

dbh <- stan_lr_data_h$log_x
cr <- stan_lr_data_h$log_y
sp <- factor(stan_lr_data_h$jj)

# Create the data frame
df <- data.frame(
  dbh = dbh,
  cr = cr,
  sp = sp
)

head(df)
str(df)

pl_cr_plot <- ggplot(df, aes(x= dbh.2, y = cr, color = sp))
pl_cr_plot
```

```{r}
library(cmdstanr)
library(posterior)
library(tidyverse)


pl_cr <- tar_read(fit_lr_mcmc_power_law_cr)
pl_cr

stan_lr_data_cr <- tar_read(stan_data_lr_cr)
str(stan_lr_data_cr)


# Assuming `stan_lr_data_cr` is your data list
log_y <- stan_lr_data_cr$log_y
log_x <- stan_lr_data_cr$log_x[, 2]  
data$sp <- as.factor(stan_lr_data_cr$jj)

# Creating a data frame for ggplot
data <- data.frame(CR = log_y, DBH = log_x, sp = sp)
head(data)
summary(data)

# Scatter plot of CR vs DBH
ggplot(data, aes(x = DBH, y = CR)) +
  geom_point(alpha = 0.5) +
  labs(title = "Scatter Plot of CR vs DBH",
       x = "DBH (cm)",
       y = "CR (m)") +
  theme_minimal()


# Extract summaries
summary_pl_cr <- pl_cr$summary()

# Extract mean values for log(a) and b
log_a_mean <- summary_pl_cr |> filter(variable == "gamma[1,1]") |> pull(mean)
b_mean <- summary_pl_cr |> filter(variable == "gamma[1,2]") |> pull(mean)


# Compute the fitted values for CR using the formula log_y = log_a + b * log_x
fitted_log_y <- log_a_mean + b_mean * log_x
str(fitted_log_y)

# Create a data frame for ggplot
data <- data.frame(CR = log_y, DBH = log_x, fitted_CR = fitted_log_y, sp = sp)
head(data)
str(data)

# Plot the scatter plot of observed CR vs DBH and add the fitted line
ggplot(data, aes(x = exp(DBH), y = exp(CR))) +
  geom_point(alpha = 0.5) +
  geom_line(aes(y = fitted_CR), color = "red") +
  labs(title = "Scatter Plot of CR vs DBH with Fitted Line",
       x = "DBH (cm)",
       y = "CR (m)") +
  theme_minimal()


ggplot(data, aes(x = exp(DBH), y = exp(CR))) +
  geom_point(alpha = 0.5) +
  geom_line(aes(x = exp(DBH), y = exp(fitted_CR)), color = "red") +
  labs(title = "Scatter Plot of CR vs DBH with Fitted Line",
       x = "DBH (cm)",
       y = "CR (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal()


# Plot the scatter plot of observed CR vs DBH and add the fitted line for each species
p <- ggplot(data, aes(x = exp(DBH), y = exp(CR))) +
  geom_point(alpha = 0.5) +
  geom_line(aes(x = exp(DBH), y = exp(fitted_CR), color = sp, group = sp), show.legend = FALSE) +
  labs(title = "Scatter Plot of CR vs DBH with Fitted Lines for Each Species",
       x = "DBH (cm)",
       y = "CR (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal()

# Set background color to white
par(bg = "white")
bg = "white"
# Save the plot
ggsave("figs/scatter_plot_CR_vs_DBH.png", plot = p, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
```



```{r}
library(cmdstanr)
library(posterior)
library(tidyverse)


gmm_h <- tar_read(fit_nlr3_mcmc_gmm_h)
gmm_h

stan_nlr_data_h <- tar_read(stan_data_nlr_h)
str(stan_nlr_data_h)


# Assuming `stan_lr_data_cr` is your data list
log_y <- stan_nlr_data_h$log_y
x <- stan_nlr_data_h$x
data$sp <- as.factor(stan_nlr_data_h$jj)


# Extract summaries
summary_gmm_h <- gmm_h$summary()

# Extract mean values for log(a) and b
log_a2 <- summary_gmm_h |> filter(variable == "gamma[1,1]") |> pull(mean)
b2 <- summary_gmm_h |> filter(variable == "gamma[1,2]") |> pull(mean)
k1 <- summary_gmm_h |> filter(variable == "gamma[1,3]") |> pull(mean)

# Compute the fitted values for H using the formula gMM
fitted_log_y_h <- log_a2 + b2 * log(x) - log(k1 + x^b2)

# Create a data frame for ggplot
data_h <- data.frame(H = exp(log_y), DBH = x, fitted_H = exp(fitted_log_y_h), sp = sp)

# Check the structure of the data frame
head(data_h)
str(data_h)

# Plot the scatter plot of observed H vs DBH and add the fitted line for each species

h <- ggplot(data_h, aes(x = DBH, y = H)) +
  geom_point(alpha = 0.5) +
  geom_line(aes(x = DBH, y = fitted_H, color = sp, group = sp), show.legend = FALSE) +
  labs(title = "Scatter Plot of H vs DBH with Fitted Lines for Each Species",
       x = "DBH (cm)",
       y = "H (m)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal()

h
# Save the plot
ggsave("figs/scatter_plot_H_vs_DBH.png", plot = h, width = 8, height = 6, units = "in", dpi = 300, bg = "white")
```



```{r}
library(targets)
library(bayesplot)
gmm_cr <- tar_read(fit_nlr4_mcmc_gmm_cr)
gmm_cr
gamma_trace <- gmm_cr$draws("gamma")
gamma_trace
mcmc_trace(gamma_trace)

gamma_trace <- gmm_nou_h$draws("gamma")
mcmc_trace(gamma_trace)

gmm_nou_h <- tar_read(fit_nlr7_mcmc_gmm_nou_h)
gamma_trace <- gmm_nou_h$draws("gamma")
mcmc_trace(gamma_trace)
```

```{r}
library(dplyr)
library(readr)
library(targets)
library(stringr)

tallo_wd_200_df <- read_csv("data/tallo_wd_200.csv")
tallo_wd_200_df
stan_data_nlr_h <- tar_read(stan_data_nlr_h)
str(stan_data_nlr_h)

gmm_nou_h <- tar_read(fit_nlr7_mcmc_gmm_nou_h)

beta <- gmm_nou_h$summary(variable = "beta")
str(beta)
beta

# Filter beta parameters with small ess_bulk
small_ess_beta <- beta |>
  filter(ess_bulk < 300) |>
  arrange(ess_bulk) |>
  mutate(species_id = as.integer(str_extract(variable, "\\d+")))

# Print the filtered beta parameters
print(small_ess_beta)

# Count the number of individuals per species
species_count <- tallo_wd_200_df |>
  group_by(sp) |>
  summarise(num_individuals = n())

# Print the species count
print(species_count)

# Create a mapping from species_id to species name and number of individuals
species_map <- tallo_wd_200_df |>
  mutate(species_id = as.integer(as.factor(sp))) |>
  group_by(species_id, sp) |>
  summarise(num_individuals = n(), .groups = 'drop')

# Join the filtered beta parameters with the species count
small_ess_species <- small_ess_beta |>
  left_join(species_map, by = "species_id")

# Print the result
options(width = 200)
print(small_ess_species)
summary(small_ess_species)

# Extract the unique species and their number of individuals
unique_species_count <- small_ess_species |>
  select(sp, num_individuals) |>
  distinct()

# Print the unique species and their number of individuals
print(unique_species_count, n = Inf)

```

# Covariance between beta
```{r}
library(cmdstanr)
library(posterior)
library(dplyr)
library(tidyr)

gmm_nou_h <- tar_read(fit_nlr7_mcmc_gmm_nou_h)

# Extract beta samples
beta_samples <- as_draws_df(gmm_nou_h, variable = "beta")

# Check the structure of the extracted samples
str(beta_samples)

# Reshape the data frame to long format
beta_long <- beta_samples |>
  pivot_longer(cols = starts_with("beta"), names_to = "parameter", values_to = "value")

# Extract species and parameter indices from the names
beta_long <- beta_long |>
  mutate(species = as.integer(str_extract(parameter, "(?<=\\[)\\d+")),
         param = as.integer(str_extract(parameter, "(?<=,)\\d+(?=\\])"))) |>
  select(-parameter)

# Filter for the three beta parameters of interest (e.g., beta[,1], beta[,2], beta[,3])
beta_filtered <- beta_long %>%
  filter(param %in% c(1, 2, 3))

# Reshape to wide format for covariance calculation
beta_wide <- beta_filtered %>%
  pivot_wider(names_from = param, values_from = value, names_prefix = "beta_")

# Print the reshaped data frame
print(beta_wide)

# Compute the covariance matrix for beta parameters 1, 2, and 3
cov_matrix <- cov(beta_wide[, c("beta_1", "beta_2", "beta_3")])

# Print the covariance matrix
print(cov_matrix)

```