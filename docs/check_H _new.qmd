---
title: "Plotting H-DBH allometry"
author: "Nguyen Thi Duyen"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    theme: coderpro
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    standalone: true
    embed-resources: true
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE)
knitr::opts_knit$set(root.dir = here::here())
```

```{r, include=FALSE}
library(targets)
library(here)
library(tidyverse)
library(scales)
options(width=150)
source("R/figs.R")
```

# Read in data
```{r}
tallo_reduced_lr_df_ang_h <- tar_read(tallo_reduced_lr_df_ang_h)
tallo_reduced_lr_df_ang_h
h_data <- tallo_reduced_lr_df_ang_h |> 
  filter(!is.na(h))
h_data

sp_posterior_h_df <- tar_read(sp_posterior_h_df)
head(sp_posterior_h_df)
dim(sp_posterior_h_df)

large_tree_species <- h_data |>
  group_by(sp) |>
  filter(any(dbh > 150)) |>
  ungroup()

large_tree_summary <- large_tree_species |>
  group_by(sp) |>
  summarize(
    min_dbh = min(dbh, na.rm = TRUE),
    max_dbh = max(dbh, na.rm = TRUE),
    mean_dbh = mean(dbh, na.rm = TRUE),
    count = n()
  ) |>
  arrange(desc(max_dbh))

top_30_species <- large_tree_summary |>
  slice(1:30)

top_30_species

top_30_data <- h_data |>
  filter(sp %in% top_30_species$sp) |>
  select(tree_id, sp, dbh, h)

sub_datasets <- top_30_data |>
  group_split(sp)

names(sub_datasets) <- unique(top_30_data$sp)
```

# Plot function
```{r}
# generate_plot <- function(sub_datasets, sp_posterior_h_df) {
#   combined_data <- data.frame()
    
#   for (i in seq_along(sub_datasets)) {
#       species_data <- sub_datasets[[i]]
#       species_name <- names(sub_datasets)[i]
      
#       species_post <- sp_posterior_h_df |>
#         filter(Species == species_name)
      
#       if (nrow(species_post) == 0) {
#         warning(paste("No posterior data for species:", species_name))
#         next
#       }
      
#       # Extract parameters
#       a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
#       log_a <- log(a)
#       b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))
#       k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))
      
#       dbh <- species_data$dbh
      
#       # Compute the fitted height values
#       fitted_log_y <- log_a + log(1 - exp(-b * (dbh ^ k)))
#       fitted_height <- exp(fitted_log_y)
      
#       # Create a dataframe for the fitted curve
#       fitted_curve <- data.frame(
#         DBH = dbh,
#         H = fitted_height,
#         sp = species_name,
#         Source = "Fitted"
#       )
      
#       # Combine observed and fitted data
#       combined_species_data <- species_data |>
#         mutate(Species = species_name, Source = "Observed") |>
#         dplyr::select(DBH = dbh, H = h, sp, Source) |>
#         bind_rows(fitted_curve)
      
#       # Append to the combined dataset
#       combined_data <- bind_rows(combined_data, combined_species_data)
#   }

#   p <- ggplot(combined_data, aes(x = DBH, y = H, color = Source)) +
#         geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
#         geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#0f92e9", linewidth = 0.6) +
#         facet_wrap(~ sp, scales = "free", ncol = 4) +
#         labs(
#           x = "DBH (cm)",
#           y = "Tree Height (m)"
#         ) +
#         my_theme()
#   return(p)
# }

# generate_plot_log <- function(sub_datasets, sp_posterior_h_df) {
#   combined_data <- data.frame()
    
#   for (i in seq_along(sub_datasets)) {
#       species_data <- sub_datasets[[i]]
#       species_name <- names(sub_datasets)[i]
      
#       species_post <- sp_posterior_h_df |>
#         filter(Species == species_name)
      
#       if (nrow(species_post) == 0) {
#         warning(paste("No posterior data for species:", species_name))
#         next
#       }
      
#       # Extract parameters
#       a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
#       log_a <- log(a)
#       b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))
#       k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))
      
#       dbh <- species_data$dbh
      
#       # Compute the fitted height values
#       fitted_log_y <- log_a + log(1 - exp(-b * (dbh ^ k)))
#       fitted_height <- exp(fitted_log_y)
      
#       # Create a dataframe for the fitted curve
#       fitted_curve <- data.frame(
#         DBH = dbh,
#         H = fitted_height,
#         sp = species_name,
#         Source = "Fitted"
#       )
      
#       # Combine observed and fitted data
#       combined_species_data <- species_data |>
#         mutate(Species = species_name, Source = "Observed") |>
#         dplyr::select(DBH = dbh, H = h, sp, Source) |>
#         bind_rows(fitted_curve)
      
#       # Append to the combined dataset
#       combined_data <- bind_rows(combined_data, combined_species_data)
#   }

#   p <- ggplot(combined_data, aes(x = DBH, y = H, color = Source)) +
#         geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
#         geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#0f92e9", linewidth = 0.6) +
#         facet_wrap(~ sp, scales = "free", ncol = 4) +
#         labs(
#           x = "DBH (cm)",
#           y = "Tree Height (m)"
#         ) +
#     scale_x_log10() +
#     scale_y_log10() +
#     my_theme()
  
#   return(p)
# }

generate_plot <- function(sub_datasets, sp_posterior_h_df) {
  combined_data <- data.frame()
    
  for (i in seq_along(sub_datasets)) {
      species_data <- sub_datasets[[i]]
      species_name <- names(sub_datasets)[i]
      
      species_post <- sp_posterior_h_df |>
        filter(Species == species_name)
      
      if (nrow(species_post) == 0) {
        warning(paste("No posterior data for species:", species_name))
        next
      }
      
      # Extract parameters
      a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
      log_a <- log(a)
      b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))
      k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))
      
      # Extend DBH range
      dbh_min <- min(species_data$dbh, na.rm = TRUE)
      dbh_max <- max(species_data$dbh, na.rm = TRUE)
      extended_dbh <- seq(dbh_min * 0.1, dbh_max * 2, length.out = 100)
      
      # Compute the fitted height values
      fitted_log_y <- log_a + log(1 - exp(-b * (extended_dbh ^ k)))
      fitted_height <- exp(fitted_log_y)
      
      # Create a dataframe for the fitted curve
      fitted_curve <- data.frame(
        DBH = extended_dbh,
        H = fitted_height,
        sp = species_name,
        Source = "Fitted"
      )
      
      # Combine observed and fitted data
      combined_species_data <- species_data |>
        mutate(Species = species_name, Source = "Observed") |>
        dplyr::select(DBH = dbh, H = h, sp, Source) |>
        bind_rows(fitted_curve)
      
      # Append to the combined dataset
      combined_data <- bind_rows(combined_data, combined_species_data)
  }

  p <- ggplot(combined_data, aes(x = DBH, y = H, color = Source)) +
        geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
        geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#0f92e9", linewidth = 0.6) +
        facet_wrap(~ sp, scales = "free", ncol = 4) +
        labs(
          x = "DBH (cm)",
          y = "Tree Height (m)"
        ) +
        my_theme()
  return(p)
}

generate_plot_log <- function(sub_datasets, sp_posterior_h_df) {
  combined_data <- data.frame()
    
  for (i in seq_along(sub_datasets)) {
      species_data <- sub_datasets[[i]]
      species_name <- names(sub_datasets)[i]
      
      species_post <- sp_posterior_h_df |>
        filter(Species == species_name)
      
      if (nrow(species_post) == 0) {
        warning(paste("No posterior data for species:", species_name))
        next
      }
      
      # Extract parameters
      a <- as.numeric(sub(" \\(.*\\)", "", species_post$a))
      log_a <- log(a)
      b <- as.numeric(sub(" \\(.*\\)", "", species_post$b))
      k <- as.numeric(sub(" \\(.*\\)", "", species_post$k))
      
      # Extend DBH range
      dbh_min <- min(species_data$dbh, na.rm = TRUE)
      dbh_max <- max(species_data$dbh, na.rm = TRUE)
      extended_dbh <- seq(dbh_min * 0.1, dbh_max * 2, length.out = 100)
      
      # Compute the fitted height values
      fitted_log_y <- log_a + log(1 - exp(-b * (extended_dbh ^ k)))
      fitted_height <- exp(fitted_log_y)
      
      # Create a dataframe for the fitted curve
      fitted_curve <- data.frame(
        DBH = extended_dbh,
        H = fitted_height,
        sp = species_name,
        Source = "Fitted"
      )
      
      # Combine observed and fitted data
      combined_species_data <- species_data |>
        mutate(Species = species_name, Source = "Observed") |>
        dplyr::select(DBH = dbh, H = h, sp, Source) |>
        bind_rows(fitted_curve)
      
      # Append to the combined dataset
      combined_data <- bind_rows(combined_data, combined_species_data)
  }

  p <- ggplot(combined_data, aes(x = DBH, y = H, color = Source)) +
        geom_point(data = combined_data |> filter(Source == "Observed"), alpha = 0.5, color = "gray") +
        geom_line(data = combined_data |> filter(Source == "Fitted"), aes(group = sp), color = "#0f92e9", linewidth = 0.6) +
        facet_wrap(~ sp, scales = "free", ncol = 4) +
        labs(
          x = "DBH (cm)",
          y = "Tree Height (m)"
        ) +
        scale_x_log10() +
        scale_y_log10() +
        my_theme()
  
  return(p)
}

```

```{r, fig.width=14, fig.height=20}
p <- generate_plot(sub_datasets, sp_posterior_h_df)
p
```

```{r, fig.width=14, fig.height=20}
p_log <- generate_plot_log(sub_datasets, sp_posterior_h_df)
p_log
```